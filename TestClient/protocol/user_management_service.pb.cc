// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_management_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "user_management_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace umsProtocol {

namespace {

const ::google::protobuf::Descriptor* Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Result_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthUserRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthUserRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthUserResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthUserResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuitUserRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuitUserRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuitUserResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuitUserResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFriendListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFriendListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFriendListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFriendListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUserInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUserInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUserInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUserInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFriendInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFriendInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFriendInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFriendInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGroupListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGroupListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupListItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupListItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGroupListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGroupListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateGroupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateGroupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateGroupResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateGroupResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinGroupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinGroupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinGroupResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinGroupResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExitGroupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExitGroupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExitGroupResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExitGroupResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGroupUserListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGroupUserListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGroupUserListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGroupUserListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchGroupUserListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchGroupUserListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupUserListItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupUserListItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchGroupUserListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchGroupUserListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddFriendRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddFriendRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddFriendResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddFriendResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFriendVerifyInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFriendVerifyInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFriendVerifyInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFriendVerifyInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteFriendRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteFriendRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteFriendResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteFriendResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateFriendBranchRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateFriendBranchRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateFriendBranchResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateFriendBranchResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddBranchRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddBranchRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddBranchResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddBranchResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteBranchRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteBranchRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteBranchResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteBranchResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateBranchInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateBranchInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateBranchInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateBranchInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* KickoutGroupUserRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KickoutGroupUserRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* KickoutGroupUserResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KickoutGroupUserResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetGroupManagerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetGroupManagerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetGroupManagerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetGroupManagerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateFriendRemarkRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateFriendRemarkRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateFriendRemarkResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateFriendRemarkResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBranchListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBranchListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserIdRemarkItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserIdRemarkItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* BranchListItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BranchListItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBranchListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBranchListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetFriendOptionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetFriendOptionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetFriendOptionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetFriendOptionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteGroupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteGroupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteGroupResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteGroupResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateGroupUserInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateGroupUserInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateGroupUserInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateGroupUserInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateGroupInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateGroupInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateGroupInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateGroupInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateGroupOptionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateGroupOptionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateGroupOptionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateGroupOptionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateGroupNoticeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateGroupNoticeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateGroupNoticeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateGroupNoticeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGroupInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGroupInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGroupInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGroupInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateUserInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateUserInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateUserInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateUserInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateUserMoodRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateUserMoodRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateUserMoodResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateUserMoodResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateUserNickNameRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateUserNickNameRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateUserNickNameResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateUserNickNameResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateAvatarRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateAvatarRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateAvatarResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateAvatarResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGroupUserInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGroupUserInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGroupUserInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGroupUserInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFriendBaseInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFriendBaseInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendListItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendListItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFriendBaseInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFriendBaseInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGroupOptionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGroupOptionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGroupOptionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGroupOptionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGroupUserCardRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGroupUserCardRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGroupUserCardResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGroupUserCardResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetGroupMsgModeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetGroupMsgModeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetGroupMsgModeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetGroupMsgModeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetGroupTalkModeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetGroupTalkModeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetGroupTalkModeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetGroupTalkModeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGroupManagerListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGroupManagerListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGroupManagerListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGroupManagerListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyJoinGroupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyJoinGroupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyExitGroupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyExitGroupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyKickoutGroupUserRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyKickoutGroupUserRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifySetGroupManagerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifySetGroupManagerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyDeleteGroupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyDeleteGroupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyUpdateGroupRemarkRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyUpdateGroupRemarkRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyUpdateGroupInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyUpdateGroupInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyUpdateGroupOptionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyUpdateGroupOptionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyUpdateGroupNoticeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyUpdateGroupNoticeRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_user_5fmanagement_5fservice_2eproto() {
  protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "user_management_service.proto");
  GOOGLE_CHECK(file != NULL);
  Result_descriptor_ = file->message_type(0);
  static const int Result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, msg_),
  };
  Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Result_descriptor_,
      Result::default_instance_,
      Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Result));
  AuthUserRequest_descriptor_ = file->message_type(1);
  static const int AuthUserRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserRequest, login_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserRequest, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserRequest, terminal_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserRequest, mac_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserRequest, login_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserRequest, user_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserRequest, token_),
  };
  AuthUserRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthUserRequest_descriptor_,
      AuthUserRequest::default_instance_,
      AuthUserRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthUserRequest));
  AuthUserResponse_descriptor_ = file->message_type(2);
  static const int AuthUserResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserResponse, tt_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserResponse, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserResponse, avatar_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserResponse, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserResponse, token_),
  };
  AuthUserResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthUserResponse_descriptor_,
      AuthUserResponse::default_instance_,
      AuthUserResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthUserResponse));
  QuitUserRequest_descriptor_ = file->message_type(3);
  static const int QuitUserRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitUserRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitUserRequest, terminal_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitUserRequest, token_),
  };
  QuitUserRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuitUserRequest_descriptor_,
      QuitUserRequest::default_instance_,
      QuitUserRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitUserRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitUserRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuitUserRequest));
  QuitUserResponse_descriptor_ = file->message_type(4);
  static const int QuitUserResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitUserResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitUserResponse, user_id_),
  };
  QuitUserResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuitUserResponse_descriptor_,
      QuitUserResponse::default_instance_,
      QuitUserResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitUserResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitUserResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuitUserResponse));
  GetFriendListRequest_descriptor_ = file->message_type(5);
  static const int GetFriendListRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendListRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendListRequest, version_id_),
  };
  GetFriendListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFriendListRequest_descriptor_,
      GetFriendListRequest::default_instance_,
      GetFriendListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFriendListRequest));
  GetFriendListResponse_descriptor_ = file->message_type(6);
  static const int GetFriendListResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendListResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendListResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendListResponse, version_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendListResponse, friend_id_),
  };
  GetFriendListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFriendListResponse_descriptor_,
      GetFriendListResponse::default_instance_,
      GetFriendListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFriendListResponse));
  GetUserInfoRequest_descriptor_ = file->message_type(7);
  static const int GetUserInfoRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoRequest, user_id_),
  };
  GetUserInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUserInfoRequest_descriptor_,
      GetUserInfoRequest::default_instance_,
      GetUserInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUserInfoRequest));
  GetUserInfoResponse_descriptor_ = file->message_type(8);
  static const int GetUserInfoResponse_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoResponse, tt_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoResponse, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoResponse, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoResponse, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoResponse, mobile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoResponse, birthday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoResponse, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoResponse, user_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoResponse, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoResponse, constellation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoResponse, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoResponse, like_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoResponse, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoResponse, personal_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoResponse, real_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoResponse, friend_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoResponse, result_),
  };
  GetUserInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUserInfoResponse_descriptor_,
      GetUserInfoResponse::default_instance_,
      GetUserInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUserInfoResponse));
  GetFriendInfoRequest_descriptor_ = file->message_type(9);
  static const int GetFriendInfoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendInfoRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendInfoRequest, friend_id_),
  };
  GetFriendInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFriendInfoRequest_descriptor_,
      GetFriendInfoRequest::default_instance_,
      GetFriendInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFriendInfoRequest));
  GetFriendInfoResponse_descriptor_ = file->message_type(10);
  static const int GetFriendInfoResponse_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendInfoResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendInfoResponse, tt_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendInfoResponse, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendInfoResponse, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendInfoResponse, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendInfoResponse, mobile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendInfoResponse, birthday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendInfoResponse, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendInfoResponse, user_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendInfoResponse, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendInfoResponse, constellation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendInfoResponse, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendInfoResponse, like_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendInfoResponse, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendInfoResponse, personal_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendInfoResponse, real_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendInfoResponse, friend_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendInfoResponse, result_),
  };
  GetFriendInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFriendInfoResponse_descriptor_,
      GetFriendInfoResponse::default_instance_,
      GetFriendInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFriendInfoResponse));
  GetGroupListRequest_descriptor_ = file->message_type(11);
  static const int GetGroupListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupListRequest, user_id_),
  };
  GetGroupListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGroupListRequest_descriptor_,
      GetGroupListRequest::default_instance_,
      GetGroupListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGroupListRequest));
  GroupListItem_descriptor_ = file->message_type(12);
  static const int GroupListItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupListItem, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupListItem, group_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupListItem, remark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupListItem, avatar_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupListItem, avatar_),
  };
  GroupListItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupListItem_descriptor_,
      GroupListItem::default_instance_,
      GroupListItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupListItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupListItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupListItem));
  GetGroupListResponse_descriptor_ = file->message_type(13);
  static const int GetGroupListResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupListResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupListResponse, group_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupListResponse, result_),
  };
  GetGroupListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGroupListResponse_descriptor_,
      GetGroupListResponse::default_instance_,
      GetGroupListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGroupListResponse));
  CreateGroupRequest_descriptor_ = file->message_type(14);
  static const int CreateGroupRequest_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupRequest, group_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupRequest, group_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupRequest, group_icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupRequest, verify_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupRequest, group_intro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupRequest, group_sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupRequest, sub_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupRequest, avatar_id_),
  };
  CreateGroupRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateGroupRequest_descriptor_,
      CreateGroupRequest::default_instance_,
      CreateGroupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateGroupRequest));
  CreateGroupResponse_descriptor_ = file->message_type(15);
  static const int CreateGroupResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupResponse, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupResponse, gorup_number_),
  };
  CreateGroupResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateGroupResponse_descriptor_,
      CreateGroupResponse::default_instance_,
      CreateGroupResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateGroupResponse));
  JoinGroupRequest_descriptor_ = file->message_type(16);
  static const int JoinGroupRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupRequest, group_id_),
  };
  JoinGroupRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinGroupRequest_descriptor_,
      JoinGroupRequest::default_instance_,
      JoinGroupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinGroupRequest));
  JoinGroupResponse_descriptor_ = file->message_type(17);
  static const int JoinGroupResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupResponse, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupResponse, result_),
  };
  JoinGroupResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinGroupResponse_descriptor_,
      JoinGroupResponse::default_instance_,
      JoinGroupResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinGroupResponse));
  ExitGroupRequest_descriptor_ = file->message_type(18);
  static const int ExitGroupRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitGroupRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitGroupRequest, group_id_),
  };
  ExitGroupRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExitGroupRequest_descriptor_,
      ExitGroupRequest::default_instance_,
      ExitGroupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitGroupRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitGroupRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExitGroupRequest));
  ExitGroupResponse_descriptor_ = file->message_type(19);
  static const int ExitGroupResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitGroupResponse, result_),
  };
  ExitGroupResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExitGroupResponse_descriptor_,
      ExitGroupResponse::default_instance_,
      ExitGroupResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitGroupResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitGroupResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExitGroupResponse));
  GetGroupUserListRequest_descriptor_ = file->message_type(20);
  static const int GetGroupUserListRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserListRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserListRequest, group_id_),
  };
  GetGroupUserListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGroupUserListRequest_descriptor_,
      GetGroupUserListRequest::default_instance_,
      GetGroupUserListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGroupUserListRequest));
  GetGroupUserListResponse_descriptor_ = file->message_type(21);
  static const int GetGroupUserListResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserListResponse, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserListResponse, sum_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserListResponse, group_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserListResponse, result_),
  };
  GetGroupUserListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGroupUserListResponse_descriptor_,
      GetGroupUserListResponse::default_instance_,
      GetGroupUserListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGroupUserListResponse));
  SearchGroupUserListRequest_descriptor_ = file->message_type(22);
  static const int SearchGroupUserListRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchGroupUserListRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchGroupUserListRequest, search_string_),
  };
  SearchGroupUserListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchGroupUserListRequest_descriptor_,
      SearchGroupUserListRequest::default_instance_,
      SearchGroupUserListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchGroupUserListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchGroupUserListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchGroupUserListRequest));
  GroupUserListItem_descriptor_ = file->message_type(23);
  static const int GroupUserListItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupUserListItem, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupUserListItem, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupUserListItem, avatar_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupUserListItem, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupUserListItem, role_),
  };
  GroupUserListItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupUserListItem_descriptor_,
      GroupUserListItem::default_instance_,
      GroupUserListItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupUserListItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupUserListItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupUserListItem));
  SearchGroupUserListResponse_descriptor_ = file->message_type(24);
  static const int SearchGroupUserListResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchGroupUserListResponse, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchGroupUserListResponse, list_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchGroupUserListResponse, result_),
  };
  SearchGroupUserListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchGroupUserListResponse_descriptor_,
      SearchGroupUserListResponse::default_instance_,
      SearchGroupUserListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchGroupUserListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchGroupUserListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchGroupUserListResponse));
  AddFriendRequest_descriptor_ = file->message_type(25);
  static const int AddFriendRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendRequest, friend_id_),
  };
  AddFriendRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddFriendRequest_descriptor_,
      AddFriendRequest::default_instance_,
      AddFriendRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddFriendRequest));
  AddFriendResponse_descriptor_ = file->message_type(26);
  static const int AddFriendResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendResponse, result_),
  };
  AddFriendResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddFriendResponse_descriptor_,
      AddFriendResponse::default_instance_,
      AddFriendResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddFriendResponse));
  GetFriendVerifyInfoRequest_descriptor_ = file->message_type(27);
  static const int GetFriendVerifyInfoRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendVerifyInfoRequest, user_id_),
  };
  GetFriendVerifyInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFriendVerifyInfoRequest_descriptor_,
      GetFriendVerifyInfoRequest::default_instance_,
      GetFriendVerifyInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendVerifyInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendVerifyInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFriendVerifyInfoRequest));
  GetFriendVerifyInfoResponse_descriptor_ = file->message_type(28);
  static const int GetFriendVerifyInfoResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendVerifyInfoResponse, verify_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendVerifyInfoResponse, question_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendVerifyInfoResponse, answer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendVerifyInfoResponse, result_),
  };
  GetFriendVerifyInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFriendVerifyInfoResponse_descriptor_,
      GetFriendVerifyInfoResponse::default_instance_,
      GetFriendVerifyInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendVerifyInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendVerifyInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFriendVerifyInfoResponse));
  DeleteFriendRequest_descriptor_ = file->message_type(29);
  static const int DeleteFriendRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFriendRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFriendRequest, friend_id_),
  };
  DeleteFriendRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteFriendRequest_descriptor_,
      DeleteFriendRequest::default_instance_,
      DeleteFriendRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFriendRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFriendRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteFriendRequest));
  DeleteFriendResponse_descriptor_ = file->message_type(30);
  static const int DeleteFriendResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFriendResponse, result_),
  };
  DeleteFriendResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteFriendResponse_descriptor_,
      DeleteFriendResponse::default_instance_,
      DeleteFriendResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFriendResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFriendResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteFriendResponse));
  UpdateFriendBranchRequest_descriptor_ = file->message_type(31);
  static const int UpdateFriendBranchRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendBranchRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendBranchRequest, friend_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendBranchRequest, branch_id_),
  };
  UpdateFriendBranchRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateFriendBranchRequest_descriptor_,
      UpdateFriendBranchRequest::default_instance_,
      UpdateFriendBranchRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendBranchRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendBranchRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateFriendBranchRequest));
  UpdateFriendBranchResponse_descriptor_ = file->message_type(32);
  static const int UpdateFriendBranchResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendBranchResponse, result_),
  };
  UpdateFriendBranchResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateFriendBranchResponse_descriptor_,
      UpdateFriendBranchResponse::default_instance_,
      UpdateFriendBranchResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendBranchResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendBranchResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateFriendBranchResponse));
  AddBranchRequest_descriptor_ = file->message_type(33);
  static const int AddBranchRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBranchRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBranchRequest, branch_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBranchRequest, branch_sort_),
  };
  AddBranchRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddBranchRequest_descriptor_,
      AddBranchRequest::default_instance_,
      AddBranchRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBranchRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBranchRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddBranchRequest));
  AddBranchResponse_descriptor_ = file->message_type(34);
  static const int AddBranchResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBranchResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBranchResponse, branch_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBranchResponse, branch_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBranchResponse, branch_sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBranchResponse, result_),
  };
  AddBranchResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddBranchResponse_descriptor_,
      AddBranchResponse::default_instance_,
      AddBranchResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBranchResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBranchResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddBranchResponse));
  DeleteBranchRequest_descriptor_ = file->message_type(35);
  static const int DeleteBranchRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteBranchRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteBranchRequest, branch_id_),
  };
  DeleteBranchRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteBranchRequest_descriptor_,
      DeleteBranchRequest::default_instance_,
      DeleteBranchRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteBranchRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteBranchRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteBranchRequest));
  DeleteBranchResponse_descriptor_ = file->message_type(36);
  static const int DeleteBranchResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteBranchResponse, result_),
  };
  DeleteBranchResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteBranchResponse_descriptor_,
      DeleteBranchResponse::default_instance_,
      DeleteBranchResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteBranchResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteBranchResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteBranchResponse));
  UpdateBranchInfoRequest_descriptor_ = file->message_type(37);
  static const int UpdateBranchInfoRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBranchInfoRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBranchInfoRequest, branch_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBranchInfoRequest, branch_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBranchInfoRequest, branch_sort_),
  };
  UpdateBranchInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateBranchInfoRequest_descriptor_,
      UpdateBranchInfoRequest::default_instance_,
      UpdateBranchInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBranchInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBranchInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateBranchInfoRequest));
  UpdateBranchInfoResponse_descriptor_ = file->message_type(38);
  static const int UpdateBranchInfoResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBranchInfoResponse, result_),
  };
  UpdateBranchInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateBranchInfoResponse_descriptor_,
      UpdateBranchInfoResponse::default_instance_,
      UpdateBranchInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBranchInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBranchInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateBranchInfoResponse));
  KickoutGroupUserRequest_descriptor_ = file->message_type(39);
  static const int KickoutGroupUserRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickoutGroupUserRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickoutGroupUserRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickoutGroupUserRequest, group_user_id_),
  };
  KickoutGroupUserRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KickoutGroupUserRequest_descriptor_,
      KickoutGroupUserRequest::default_instance_,
      KickoutGroupUserRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickoutGroupUserRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickoutGroupUserRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KickoutGroupUserRequest));
  KickoutGroupUserResponse_descriptor_ = file->message_type(40);
  static const int KickoutGroupUserResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickoutGroupUserResponse, result_),
  };
  KickoutGroupUserResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KickoutGroupUserResponse_descriptor_,
      KickoutGroupUserResponse::default_instance_,
      KickoutGroupUserResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickoutGroupUserResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickoutGroupUserResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KickoutGroupUserResponse));
  SetGroupManagerRequest_descriptor_ = file->message_type(41);
  static const int SetGroupManagerRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGroupManagerRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGroupManagerRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGroupManagerRequest, group_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGroupManagerRequest, control_value_),
  };
  SetGroupManagerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetGroupManagerRequest_descriptor_,
      SetGroupManagerRequest::default_instance_,
      SetGroupManagerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGroupManagerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGroupManagerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetGroupManagerRequest));
  SetGroupManagerResponse_descriptor_ = file->message_type(42);
  static const int SetGroupManagerResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGroupManagerResponse, result_),
  };
  SetGroupManagerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetGroupManagerResponse_descriptor_,
      SetGroupManagerResponse::default_instance_,
      SetGroupManagerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGroupManagerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGroupManagerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetGroupManagerResponse));
  UpdateFriendRemarkRequest_descriptor_ = file->message_type(43);
  static const int UpdateFriendRemarkRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendRemarkRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendRemarkRequest, friend_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendRemarkRequest, remark_),
  };
  UpdateFriendRemarkRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateFriendRemarkRequest_descriptor_,
      UpdateFriendRemarkRequest::default_instance_,
      UpdateFriendRemarkRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendRemarkRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendRemarkRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateFriendRemarkRequest));
  UpdateFriendRemarkResponse_descriptor_ = file->message_type(44);
  static const int UpdateFriendRemarkResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendRemarkResponse, result_),
  };
  UpdateFriendRemarkResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateFriendRemarkResponse_descriptor_,
      UpdateFriendRemarkResponse::default_instance_,
      UpdateFriendRemarkResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendRemarkResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendRemarkResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateFriendRemarkResponse));
  GetBranchListRequest_descriptor_ = file->message_type(45);
  static const int GetBranchListRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBranchListRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBranchListRequest, version_id_),
  };
  GetBranchListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBranchListRequest_descriptor_,
      GetBranchListRequest::default_instance_,
      GetBranchListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBranchListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBranchListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBranchListRequest));
  UserIdRemarkItem_descriptor_ = file->message_type(46);
  static const int UserIdRemarkItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserIdRemarkItem, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserIdRemarkItem, user_remark_),
  };
  UserIdRemarkItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserIdRemarkItem_descriptor_,
      UserIdRemarkItem::default_instance_,
      UserIdRemarkItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserIdRemarkItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserIdRemarkItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserIdRemarkItem));
  BranchListItem_descriptor_ = file->message_type(47);
  static const int BranchListItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchListItem, branch_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchListItem, branch_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchListItem, branch_sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchListItem, users_),
  };
  BranchListItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BranchListItem_descriptor_,
      BranchListItem::default_instance_,
      BranchListItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchListItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchListItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BranchListItem));
  GetBranchListResponse_descriptor_ = file->message_type(48);
  static const int GetBranchListResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBranchListResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBranchListResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBranchListResponse, version_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBranchListResponse, branch_item_),
  };
  GetBranchListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBranchListResponse_descriptor_,
      GetBranchListResponse::default_instance_,
      GetBranchListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBranchListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBranchListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBranchListResponse));
  SetFriendOptionRequest_descriptor_ = file->message_type(49);
  static const int SetFriendOptionRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetFriendOptionRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetFriendOptionRequest, verify_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetFriendOptionRequest, question_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetFriendOptionRequest, answer_),
  };
  SetFriendOptionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetFriendOptionRequest_descriptor_,
      SetFriendOptionRequest::default_instance_,
      SetFriendOptionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetFriendOptionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetFriendOptionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetFriendOptionRequest));
  SetFriendOptionResponse_descriptor_ = file->message_type(50);
  static const int SetFriendOptionResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetFriendOptionResponse, result_),
  };
  SetFriendOptionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetFriendOptionResponse_descriptor_,
      SetFriendOptionResponse::default_instance_,
      SetFriendOptionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetFriendOptionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetFriendOptionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetFriendOptionResponse));
  DeleteGroupRequest_descriptor_ = file->message_type(51);
  static const int DeleteGroupRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteGroupRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteGroupRequest, group_id_),
  };
  DeleteGroupRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteGroupRequest_descriptor_,
      DeleteGroupRequest::default_instance_,
      DeleteGroupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteGroupRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteGroupRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteGroupRequest));
  DeleteGroupResponse_descriptor_ = file->message_type(52);
  static const int DeleteGroupResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteGroupResponse, result_),
  };
  DeleteGroupResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteGroupResponse_descriptor_,
      DeleteGroupResponse::default_instance_,
      DeleteGroupResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteGroupResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteGroupResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteGroupResponse));
  UpdateGroupUserInfoRequest_descriptor_ = file->message_type(53);
  static const int UpdateGroupUserInfoRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupUserInfoRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupUserInfoRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupUserInfoRequest, group_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupUserInfoRequest, remark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupUserInfoRequest, group_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupUserInfoRequest, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupUserInfoRequest, tel_),
  };
  UpdateGroupUserInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateGroupUserInfoRequest_descriptor_,
      UpdateGroupUserInfoRequest::default_instance_,
      UpdateGroupUserInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupUserInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupUserInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateGroupUserInfoRequest));
  UpdateGroupUserInfoResponse_descriptor_ = file->message_type(54);
  static const int UpdateGroupUserInfoResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupUserInfoResponse, result_),
  };
  UpdateGroupUserInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateGroupUserInfoResponse_descriptor_,
      UpdateGroupUserInfoResponse::default_instance_,
      UpdateGroupUserInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupUserInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupUserInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateGroupUserInfoResponse));
  UpdateGroupInfoRequest_descriptor_ = file->message_type(55);
  static const int UpdateGroupInfoRequest_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupInfoRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupInfoRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupInfoRequest, group_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupInfoRequest, remark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupInfoRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupInfoRequest, group_intro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupInfoRequest, group_notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupInfoRequest, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupInfoRequest, sub_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupInfoRequest, avatar_id_),
  };
  UpdateGroupInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateGroupInfoRequest_descriptor_,
      UpdateGroupInfoRequest::default_instance_,
      UpdateGroupInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateGroupInfoRequest));
  UpdateGroupInfoResponse_descriptor_ = file->message_type(56);
  static const int UpdateGroupInfoResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupInfoResponse, result_),
  };
  UpdateGroupInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateGroupInfoResponse_descriptor_,
      UpdateGroupInfoResponse::default_instance_,
      UpdateGroupInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateGroupInfoResponse));
  UpdateGroupOptionRequest_descriptor_ = file->message_type(57);
  static const int UpdateGroupOptionRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupOptionRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupOptionRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupOptionRequest, verify_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupOptionRequest, channel_id_),
  };
  UpdateGroupOptionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateGroupOptionRequest_descriptor_,
      UpdateGroupOptionRequest::default_instance_,
      UpdateGroupOptionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupOptionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupOptionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateGroupOptionRequest));
  UpdateGroupOptionResponse_descriptor_ = file->message_type(58);
  static const int UpdateGroupOptionResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupOptionResponse, result_),
  };
  UpdateGroupOptionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateGroupOptionResponse_descriptor_,
      UpdateGroupOptionResponse::default_instance_,
      UpdateGroupOptionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupOptionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupOptionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateGroupOptionResponse));
  UpdateGroupNoticeRequest_descriptor_ = file->message_type(59);
  static const int UpdateGroupNoticeRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupNoticeRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupNoticeRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupNoticeRequest, notice_),
  };
  UpdateGroupNoticeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateGroupNoticeRequest_descriptor_,
      UpdateGroupNoticeRequest::default_instance_,
      UpdateGroupNoticeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupNoticeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupNoticeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateGroupNoticeRequest));
  UpdateGroupNoticeResponse_descriptor_ = file->message_type(60);
  static const int UpdateGroupNoticeResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupNoticeResponse, result_),
  };
  UpdateGroupNoticeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateGroupNoticeResponse_descriptor_,
      UpdateGroupNoticeResponse::default_instance_,
      UpdateGroupNoticeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupNoticeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupNoticeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateGroupNoticeResponse));
  GetGroupInfoRequest_descriptor_ = file->message_type(61);
  static const int GetGroupInfoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupInfoRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupInfoRequest, group_id_),
  };
  GetGroupInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGroupInfoRequest_descriptor_,
      GetGroupInfoRequest::default_instance_,
      GetGroupInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGroupInfoRequest));
  GetGroupInfoResponse_descriptor_ = file->message_type(62);
  static const int GetGroupInfoResponse_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupInfoResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupInfoResponse, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupInfoResponse, group_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupInfoResponse, remark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupInfoResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupInfoResponse, group_intro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupInfoResponse, group_notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupInfoResponse, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupInfoResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupInfoResponse, sub_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupInfoResponse, group_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupInfoResponse, avatar_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupInfoResponse, owner_id_),
  };
  GetGroupInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGroupInfoResponse_descriptor_,
      GetGroupInfoResponse::default_instance_,
      GetGroupInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGroupInfoResponse));
  UpdateUserInfoRequest_descriptor_ = file->message_type(63);
  static const int UpdateUserInfoRequest_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoRequest, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoRequest, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoRequest, mobile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoRequest, birthday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoRequest, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoRequest, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoRequest, constellation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoRequest, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoRequest, like_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoRequest, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoRequest, personal_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoRequest, real_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoRequest, token_),
  };
  UpdateUserInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateUserInfoRequest_descriptor_,
      UpdateUserInfoRequest::default_instance_,
      UpdateUserInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateUserInfoRequest));
  UpdateUserInfoResponse_descriptor_ = file->message_type(64);
  static const int UpdateUserInfoResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoResponse, result_),
  };
  UpdateUserInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateUserInfoResponse_descriptor_,
      UpdateUserInfoResponse::default_instance_,
      UpdateUserInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateUserInfoResponse));
  UpdateUserMoodRequest_descriptor_ = file->message_type(65);
  static const int UpdateUserMoodRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserMoodRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserMoodRequest, mood_),
  };
  UpdateUserMoodRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateUserMoodRequest_descriptor_,
      UpdateUserMoodRequest::default_instance_,
      UpdateUserMoodRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserMoodRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserMoodRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateUserMoodRequest));
  UpdateUserMoodResponse_descriptor_ = file->message_type(66);
  static const int UpdateUserMoodResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserMoodResponse, result_),
  };
  UpdateUserMoodResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateUserMoodResponse_descriptor_,
      UpdateUserMoodResponse::default_instance_,
      UpdateUserMoodResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserMoodResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserMoodResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateUserMoodResponse));
  UpdateUserNickNameRequest_descriptor_ = file->message_type(67);
  static const int UpdateUserNickNameRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserNickNameRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserNickNameRequest, nick_name_),
  };
  UpdateUserNickNameRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateUserNickNameRequest_descriptor_,
      UpdateUserNickNameRequest::default_instance_,
      UpdateUserNickNameRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserNickNameRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserNickNameRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateUserNickNameRequest));
  UpdateUserNickNameResponse_descriptor_ = file->message_type(68);
  static const int UpdateUserNickNameResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserNickNameResponse, result_),
  };
  UpdateUserNickNameResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateUserNickNameResponse_descriptor_,
      UpdateUserNickNameResponse::default_instance_,
      UpdateUserNickNameResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserNickNameResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserNickNameResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateUserNickNameResponse));
  UpdateAvatarRequest_descriptor_ = file->message_type(69);
  static const int UpdateAvatarRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAvatarRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAvatarRequest, avatar_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAvatarRequest, avatar_),
  };
  UpdateAvatarRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateAvatarRequest_descriptor_,
      UpdateAvatarRequest::default_instance_,
      UpdateAvatarRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAvatarRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAvatarRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateAvatarRequest));
  UpdateAvatarResponse_descriptor_ = file->message_type(70);
  static const int UpdateAvatarResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAvatarResponse, result_),
  };
  UpdateAvatarResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateAvatarResponse_descriptor_,
      UpdateAvatarResponse::default_instance_,
      UpdateAvatarResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAvatarResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAvatarResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateAvatarResponse));
  GetGroupUserInfoRequest_descriptor_ = file->message_type(71);
  static const int GetGroupUserInfoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserInfoRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserInfoRequest, user_id_),
  };
  GetGroupUserInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGroupUserInfoRequest_descriptor_,
      GetGroupUserInfoRequest::default_instance_,
      GetGroupUserInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGroupUserInfoRequest));
  GetGroupUserInfoResponse_descriptor_ = file->message_type(72);
  static const int GetGroupUserInfoResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserInfoResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserInfoResponse, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserInfoResponse, group_members_),
  };
  GetGroupUserInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGroupUserInfoResponse_descriptor_,
      GetGroupUserInfoResponse::default_instance_,
      GetGroupUserInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGroupUserInfoResponse));
  GetFriendBaseInfoRequest_descriptor_ = file->message_type(73);
  static const int GetFriendBaseInfoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendBaseInfoRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendBaseInfoRequest, friend_id_),
  };
  GetFriendBaseInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFriendBaseInfoRequest_descriptor_,
      GetFriendBaseInfoRequest::default_instance_,
      GetFriendBaseInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendBaseInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendBaseInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFriendBaseInfoRequest));
  FriendListItem_descriptor_ = file->message_type(74);
  static const int FriendListItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendListItem, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendListItem, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendListItem, avatar_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendListItem, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendListItem, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendListItem, level_),
  };
  FriendListItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendListItem_descriptor_,
      FriendListItem::default_instance_,
      FriendListItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendListItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendListItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendListItem));
  GetFriendBaseInfoResponse_descriptor_ = file->message_type(75);
  static const int GetFriendBaseInfoResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendBaseInfoResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendBaseInfoResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendBaseInfoResponse, friend_item_),
  };
  GetFriendBaseInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFriendBaseInfoResponse_descriptor_,
      GetFriendBaseInfoResponse::default_instance_,
      GetFriendBaseInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendBaseInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendBaseInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFriendBaseInfoResponse));
  GetGroupOptionRequest_descriptor_ = file->message_type(76);
  static const int GetGroupOptionRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupOptionRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupOptionRequest, group_id_),
  };
  GetGroupOptionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGroupOptionRequest_descriptor_,
      GetGroupOptionRequest::default_instance_,
      GetGroupOptionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupOptionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupOptionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGroupOptionRequest));
  GetGroupOptionResponse_descriptor_ = file->message_type(77);
  static const int GetGroupOptionResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupOptionResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupOptionResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupOptionResponse, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupOptionResponse, verify_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupOptionResponse, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupOptionResponse, msg_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupOptionResponse, talk_mode_),
  };
  GetGroupOptionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGroupOptionResponse_descriptor_,
      GetGroupOptionResponse::default_instance_,
      GetGroupOptionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupOptionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupOptionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGroupOptionResponse));
  GetGroupUserCardRequest_descriptor_ = file->message_type(78);
  static const int GetGroupUserCardRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserCardRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserCardRequest, group_id_),
  };
  GetGroupUserCardRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGroupUserCardRequest_descriptor_,
      GetGroupUserCardRequest::default_instance_,
      GetGroupUserCardRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserCardRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserCardRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGroupUserCardRequest));
  GetGroupUserCardResponse_descriptor_ = file->message_type(79);
  static const int GetGroupUserCardResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserCardResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserCardResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserCardResponse, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserCardResponse, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserCardResponse, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserCardResponse, mail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserCardResponse, remark_),
  };
  GetGroupUserCardResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGroupUserCardResponse_descriptor_,
      GetGroupUserCardResponse::default_instance_,
      GetGroupUserCardResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserCardResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserCardResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGroupUserCardResponse));
  SetGroupMsgModeRequest_descriptor_ = file->message_type(80);
  static const int SetGroupMsgModeRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGroupMsgModeRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGroupMsgModeRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGroupMsgModeRequest, msg_mode_),
  };
  SetGroupMsgModeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetGroupMsgModeRequest_descriptor_,
      SetGroupMsgModeRequest::default_instance_,
      SetGroupMsgModeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGroupMsgModeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGroupMsgModeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetGroupMsgModeRequest));
  SetGroupMsgModeResponse_descriptor_ = file->message_type(81);
  static const int SetGroupMsgModeResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGroupMsgModeResponse, result_),
  };
  SetGroupMsgModeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetGroupMsgModeResponse_descriptor_,
      SetGroupMsgModeResponse::default_instance_,
      SetGroupMsgModeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGroupMsgModeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGroupMsgModeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetGroupMsgModeResponse));
  SetGroupTalkModeRequest_descriptor_ = file->message_type(82);
  static const int SetGroupTalkModeRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGroupTalkModeRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGroupTalkModeRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGroupTalkModeRequest, talk_mode_),
  };
  SetGroupTalkModeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetGroupTalkModeRequest_descriptor_,
      SetGroupTalkModeRequest::default_instance_,
      SetGroupTalkModeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGroupTalkModeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGroupTalkModeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetGroupTalkModeRequest));
  SetGroupTalkModeResponse_descriptor_ = file->message_type(83);
  static const int SetGroupTalkModeResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGroupTalkModeResponse, result_),
  };
  SetGroupTalkModeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetGroupTalkModeResponse_descriptor_,
      SetGroupTalkModeResponse::default_instance_,
      SetGroupTalkModeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGroupTalkModeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGroupTalkModeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetGroupTalkModeResponse));
  GetGroupManagerListRequest_descriptor_ = file->message_type(84);
  static const int GetGroupManagerListRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupManagerListRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupManagerListRequest, group_id_),
  };
  GetGroupManagerListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGroupManagerListRequest_descriptor_,
      GetGroupManagerListRequest::default_instance_,
      GetGroupManagerListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupManagerListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupManagerListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGroupManagerListRequest));
  GetGroupManagerListResponse_descriptor_ = file->message_type(85);
  static const int GetGroupManagerListResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupManagerListResponse, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupManagerListResponse, sum_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupManagerListResponse, group_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupManagerListResponse, result_),
  };
  GetGroupManagerListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGroupManagerListResponse_descriptor_,
      GetGroupManagerListResponse::default_instance_,
      GetGroupManagerListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupManagerListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupManagerListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGroupManagerListResponse));
  NotifyJoinGroupRequest_descriptor_ = file->message_type(86);
  static const int NotifyJoinGroupRequest_offsets_[1] = {
  };
  NotifyJoinGroupRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyJoinGroupRequest_descriptor_,
      NotifyJoinGroupRequest::default_instance_,
      NotifyJoinGroupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyJoinGroupRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyJoinGroupRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyJoinGroupRequest));
  NotifyExitGroupRequest_descriptor_ = file->message_type(87);
  static const int NotifyExitGroupRequest_offsets_[1] = {
  };
  NotifyExitGroupRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyExitGroupRequest_descriptor_,
      NotifyExitGroupRequest::default_instance_,
      NotifyExitGroupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyExitGroupRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyExitGroupRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyExitGroupRequest));
  NotifyKickoutGroupUserRequest_descriptor_ = file->message_type(88);
  static const int NotifyKickoutGroupUserRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyKickoutGroupUserRequest, admin_user_id_),
  };
  NotifyKickoutGroupUserRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyKickoutGroupUserRequest_descriptor_,
      NotifyKickoutGroupUserRequest::default_instance_,
      NotifyKickoutGroupUserRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyKickoutGroupUserRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyKickoutGroupUserRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyKickoutGroupUserRequest));
  NotifySetGroupManagerRequest_descriptor_ = file->message_type(89);
  static const int NotifySetGroupManagerRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySetGroupManagerRequest, super_admin_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySetGroupManagerRequest, control_value_),
  };
  NotifySetGroupManagerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifySetGroupManagerRequest_descriptor_,
      NotifySetGroupManagerRequest::default_instance_,
      NotifySetGroupManagerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySetGroupManagerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySetGroupManagerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifySetGroupManagerRequest));
  NotifyDeleteGroupRequest_descriptor_ = file->message_type(90);
  static const int NotifyDeleteGroupRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDeleteGroupRequest, super_admin_user_id_),
  };
  NotifyDeleteGroupRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyDeleteGroupRequest_descriptor_,
      NotifyDeleteGroupRequest::default_instance_,
      NotifyDeleteGroupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDeleteGroupRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDeleteGroupRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyDeleteGroupRequest));
  NotifyUpdateGroupRemarkRequest_descriptor_ = file->message_type(91);
  static const int NotifyUpdateGroupRemarkRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUpdateGroupRemarkRequest, admin_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUpdateGroupRemarkRequest, remark_),
  };
  NotifyUpdateGroupRemarkRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyUpdateGroupRemarkRequest_descriptor_,
      NotifyUpdateGroupRemarkRequest::default_instance_,
      NotifyUpdateGroupRemarkRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUpdateGroupRemarkRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUpdateGroupRemarkRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyUpdateGroupRemarkRequest));
  NotifyUpdateGroupInfoRequest_descriptor_ = file->message_type(92);
  static const int NotifyUpdateGroupInfoRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUpdateGroupInfoRequest, group_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUpdateGroupInfoRequest, remark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUpdateGroupInfoRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUpdateGroupInfoRequest, group_intro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUpdateGroupInfoRequest, group_notice_),
  };
  NotifyUpdateGroupInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyUpdateGroupInfoRequest_descriptor_,
      NotifyUpdateGroupInfoRequest::default_instance_,
      NotifyUpdateGroupInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUpdateGroupInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUpdateGroupInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyUpdateGroupInfoRequest));
  NotifyUpdateGroupOptionRequest_descriptor_ = file->message_type(93);
  static const int NotifyUpdateGroupOptionRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUpdateGroupOptionRequest, verify_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUpdateGroupOptionRequest, channel_id_),
  };
  NotifyUpdateGroupOptionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyUpdateGroupOptionRequest_descriptor_,
      NotifyUpdateGroupOptionRequest::default_instance_,
      NotifyUpdateGroupOptionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUpdateGroupOptionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUpdateGroupOptionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyUpdateGroupOptionRequest));
  NotifyUpdateGroupNoticeRequest_descriptor_ = file->message_type(94);
  static const int NotifyUpdateGroupNoticeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUpdateGroupNoticeRequest, notice_),
  };
  NotifyUpdateGroupNoticeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyUpdateGroupNoticeRequest_descriptor_,
      NotifyUpdateGroupNoticeRequest::default_instance_,
      NotifyUpdateGroupNoticeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUpdateGroupNoticeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUpdateGroupNoticeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyUpdateGroupNoticeRequest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_user_5fmanagement_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Result_descriptor_, &Result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthUserRequest_descriptor_, &AuthUserRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthUserResponse_descriptor_, &AuthUserResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuitUserRequest_descriptor_, &QuitUserRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuitUserResponse_descriptor_, &QuitUserResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFriendListRequest_descriptor_, &GetFriendListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFriendListResponse_descriptor_, &GetFriendListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUserInfoRequest_descriptor_, &GetUserInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUserInfoResponse_descriptor_, &GetUserInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFriendInfoRequest_descriptor_, &GetFriendInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFriendInfoResponse_descriptor_, &GetFriendInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGroupListRequest_descriptor_, &GetGroupListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupListItem_descriptor_, &GroupListItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGroupListResponse_descriptor_, &GetGroupListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateGroupRequest_descriptor_, &CreateGroupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateGroupResponse_descriptor_, &CreateGroupResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinGroupRequest_descriptor_, &JoinGroupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinGroupResponse_descriptor_, &JoinGroupResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExitGroupRequest_descriptor_, &ExitGroupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExitGroupResponse_descriptor_, &ExitGroupResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGroupUserListRequest_descriptor_, &GetGroupUserListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGroupUserListResponse_descriptor_, &GetGroupUserListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchGroupUserListRequest_descriptor_, &SearchGroupUserListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupUserListItem_descriptor_, &GroupUserListItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchGroupUserListResponse_descriptor_, &SearchGroupUserListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddFriendRequest_descriptor_, &AddFriendRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddFriendResponse_descriptor_, &AddFriendResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFriendVerifyInfoRequest_descriptor_, &GetFriendVerifyInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFriendVerifyInfoResponse_descriptor_, &GetFriendVerifyInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteFriendRequest_descriptor_, &DeleteFriendRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteFriendResponse_descriptor_, &DeleteFriendResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateFriendBranchRequest_descriptor_, &UpdateFriendBranchRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateFriendBranchResponse_descriptor_, &UpdateFriendBranchResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddBranchRequest_descriptor_, &AddBranchRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddBranchResponse_descriptor_, &AddBranchResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteBranchRequest_descriptor_, &DeleteBranchRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteBranchResponse_descriptor_, &DeleteBranchResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateBranchInfoRequest_descriptor_, &UpdateBranchInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateBranchInfoResponse_descriptor_, &UpdateBranchInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KickoutGroupUserRequest_descriptor_, &KickoutGroupUserRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KickoutGroupUserResponse_descriptor_, &KickoutGroupUserResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetGroupManagerRequest_descriptor_, &SetGroupManagerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetGroupManagerResponse_descriptor_, &SetGroupManagerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateFriendRemarkRequest_descriptor_, &UpdateFriendRemarkRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateFriendRemarkResponse_descriptor_, &UpdateFriendRemarkResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBranchListRequest_descriptor_, &GetBranchListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserIdRemarkItem_descriptor_, &UserIdRemarkItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BranchListItem_descriptor_, &BranchListItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBranchListResponse_descriptor_, &GetBranchListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetFriendOptionRequest_descriptor_, &SetFriendOptionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetFriendOptionResponse_descriptor_, &SetFriendOptionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteGroupRequest_descriptor_, &DeleteGroupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteGroupResponse_descriptor_, &DeleteGroupResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateGroupUserInfoRequest_descriptor_, &UpdateGroupUserInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateGroupUserInfoResponse_descriptor_, &UpdateGroupUserInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateGroupInfoRequest_descriptor_, &UpdateGroupInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateGroupInfoResponse_descriptor_, &UpdateGroupInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateGroupOptionRequest_descriptor_, &UpdateGroupOptionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateGroupOptionResponse_descriptor_, &UpdateGroupOptionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateGroupNoticeRequest_descriptor_, &UpdateGroupNoticeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateGroupNoticeResponse_descriptor_, &UpdateGroupNoticeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGroupInfoRequest_descriptor_, &GetGroupInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGroupInfoResponse_descriptor_, &GetGroupInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateUserInfoRequest_descriptor_, &UpdateUserInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateUserInfoResponse_descriptor_, &UpdateUserInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateUserMoodRequest_descriptor_, &UpdateUserMoodRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateUserMoodResponse_descriptor_, &UpdateUserMoodResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateUserNickNameRequest_descriptor_, &UpdateUserNickNameRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateUserNickNameResponse_descriptor_, &UpdateUserNickNameResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateAvatarRequest_descriptor_, &UpdateAvatarRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateAvatarResponse_descriptor_, &UpdateAvatarResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGroupUserInfoRequest_descriptor_, &GetGroupUserInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGroupUserInfoResponse_descriptor_, &GetGroupUserInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFriendBaseInfoRequest_descriptor_, &GetFriendBaseInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendListItem_descriptor_, &FriendListItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFriendBaseInfoResponse_descriptor_, &GetFriendBaseInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGroupOptionRequest_descriptor_, &GetGroupOptionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGroupOptionResponse_descriptor_, &GetGroupOptionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGroupUserCardRequest_descriptor_, &GetGroupUserCardRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGroupUserCardResponse_descriptor_, &GetGroupUserCardResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetGroupMsgModeRequest_descriptor_, &SetGroupMsgModeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetGroupMsgModeResponse_descriptor_, &SetGroupMsgModeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetGroupTalkModeRequest_descriptor_, &SetGroupTalkModeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetGroupTalkModeResponse_descriptor_, &SetGroupTalkModeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGroupManagerListRequest_descriptor_, &GetGroupManagerListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGroupManagerListResponse_descriptor_, &GetGroupManagerListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyJoinGroupRequest_descriptor_, &NotifyJoinGroupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyExitGroupRequest_descriptor_, &NotifyExitGroupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyKickoutGroupUserRequest_descriptor_, &NotifyKickoutGroupUserRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifySetGroupManagerRequest_descriptor_, &NotifySetGroupManagerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyDeleteGroupRequest_descriptor_, &NotifyDeleteGroupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyUpdateGroupRemarkRequest_descriptor_, &NotifyUpdateGroupRemarkRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyUpdateGroupInfoRequest_descriptor_, &NotifyUpdateGroupInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyUpdateGroupOptionRequest_descriptor_, &NotifyUpdateGroupOptionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyUpdateGroupNoticeRequest_descriptor_, &NotifyUpdateGroupNoticeRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_user_5fmanagement_5fservice_2eproto() {
  delete Result::default_instance_;
  delete Result_reflection_;
  delete AuthUserRequest::default_instance_;
  delete AuthUserRequest_reflection_;
  delete AuthUserResponse::default_instance_;
  delete AuthUserResponse_reflection_;
  delete QuitUserRequest::default_instance_;
  delete QuitUserRequest_reflection_;
  delete QuitUserResponse::default_instance_;
  delete QuitUserResponse_reflection_;
  delete GetFriendListRequest::default_instance_;
  delete GetFriendListRequest_reflection_;
  delete GetFriendListResponse::default_instance_;
  delete GetFriendListResponse_reflection_;
  delete GetUserInfoRequest::default_instance_;
  delete GetUserInfoRequest_reflection_;
  delete GetUserInfoResponse::default_instance_;
  delete GetUserInfoResponse_reflection_;
  delete GetFriendInfoRequest::default_instance_;
  delete GetFriendInfoRequest_reflection_;
  delete GetFriendInfoResponse::default_instance_;
  delete GetFriendInfoResponse_reflection_;
  delete GetGroupListRequest::default_instance_;
  delete GetGroupListRequest_reflection_;
  delete GroupListItem::default_instance_;
  delete GroupListItem_reflection_;
  delete GetGroupListResponse::default_instance_;
  delete GetGroupListResponse_reflection_;
  delete CreateGroupRequest::default_instance_;
  delete CreateGroupRequest_reflection_;
  delete CreateGroupResponse::default_instance_;
  delete CreateGroupResponse_reflection_;
  delete JoinGroupRequest::default_instance_;
  delete JoinGroupRequest_reflection_;
  delete JoinGroupResponse::default_instance_;
  delete JoinGroupResponse_reflection_;
  delete ExitGroupRequest::default_instance_;
  delete ExitGroupRequest_reflection_;
  delete ExitGroupResponse::default_instance_;
  delete ExitGroupResponse_reflection_;
  delete GetGroupUserListRequest::default_instance_;
  delete GetGroupUserListRequest_reflection_;
  delete GetGroupUserListResponse::default_instance_;
  delete GetGroupUserListResponse_reflection_;
  delete SearchGroupUserListRequest::default_instance_;
  delete SearchGroupUserListRequest_reflection_;
  delete GroupUserListItem::default_instance_;
  delete GroupUserListItem_reflection_;
  delete SearchGroupUserListResponse::default_instance_;
  delete SearchGroupUserListResponse_reflection_;
  delete AddFriendRequest::default_instance_;
  delete AddFriendRequest_reflection_;
  delete AddFriendResponse::default_instance_;
  delete AddFriendResponse_reflection_;
  delete GetFriendVerifyInfoRequest::default_instance_;
  delete GetFriendVerifyInfoRequest_reflection_;
  delete GetFriendVerifyInfoResponse::default_instance_;
  delete GetFriendVerifyInfoResponse_reflection_;
  delete DeleteFriendRequest::default_instance_;
  delete DeleteFriendRequest_reflection_;
  delete DeleteFriendResponse::default_instance_;
  delete DeleteFriendResponse_reflection_;
  delete UpdateFriendBranchRequest::default_instance_;
  delete UpdateFriendBranchRequest_reflection_;
  delete UpdateFriendBranchResponse::default_instance_;
  delete UpdateFriendBranchResponse_reflection_;
  delete AddBranchRequest::default_instance_;
  delete AddBranchRequest_reflection_;
  delete AddBranchResponse::default_instance_;
  delete AddBranchResponse_reflection_;
  delete DeleteBranchRequest::default_instance_;
  delete DeleteBranchRequest_reflection_;
  delete DeleteBranchResponse::default_instance_;
  delete DeleteBranchResponse_reflection_;
  delete UpdateBranchInfoRequest::default_instance_;
  delete UpdateBranchInfoRequest_reflection_;
  delete UpdateBranchInfoResponse::default_instance_;
  delete UpdateBranchInfoResponse_reflection_;
  delete KickoutGroupUserRequest::default_instance_;
  delete KickoutGroupUserRequest_reflection_;
  delete KickoutGroupUserResponse::default_instance_;
  delete KickoutGroupUserResponse_reflection_;
  delete SetGroupManagerRequest::default_instance_;
  delete SetGroupManagerRequest_reflection_;
  delete SetGroupManagerResponse::default_instance_;
  delete SetGroupManagerResponse_reflection_;
  delete UpdateFriendRemarkRequest::default_instance_;
  delete UpdateFriendRemarkRequest_reflection_;
  delete UpdateFriendRemarkResponse::default_instance_;
  delete UpdateFriendRemarkResponse_reflection_;
  delete GetBranchListRequest::default_instance_;
  delete GetBranchListRequest_reflection_;
  delete UserIdRemarkItem::default_instance_;
  delete UserIdRemarkItem_reflection_;
  delete BranchListItem::default_instance_;
  delete BranchListItem_reflection_;
  delete GetBranchListResponse::default_instance_;
  delete GetBranchListResponse_reflection_;
  delete SetFriendOptionRequest::default_instance_;
  delete SetFriendOptionRequest_reflection_;
  delete SetFriendOptionResponse::default_instance_;
  delete SetFriendOptionResponse_reflection_;
  delete DeleteGroupRequest::default_instance_;
  delete DeleteGroupRequest_reflection_;
  delete DeleteGroupResponse::default_instance_;
  delete DeleteGroupResponse_reflection_;
  delete UpdateGroupUserInfoRequest::default_instance_;
  delete UpdateGroupUserInfoRequest_reflection_;
  delete UpdateGroupUserInfoResponse::default_instance_;
  delete UpdateGroupUserInfoResponse_reflection_;
  delete UpdateGroupInfoRequest::default_instance_;
  delete UpdateGroupInfoRequest_reflection_;
  delete UpdateGroupInfoResponse::default_instance_;
  delete UpdateGroupInfoResponse_reflection_;
  delete UpdateGroupOptionRequest::default_instance_;
  delete UpdateGroupOptionRequest_reflection_;
  delete UpdateGroupOptionResponse::default_instance_;
  delete UpdateGroupOptionResponse_reflection_;
  delete UpdateGroupNoticeRequest::default_instance_;
  delete UpdateGroupNoticeRequest_reflection_;
  delete UpdateGroupNoticeResponse::default_instance_;
  delete UpdateGroupNoticeResponse_reflection_;
  delete GetGroupInfoRequest::default_instance_;
  delete GetGroupInfoRequest_reflection_;
  delete GetGroupInfoResponse::default_instance_;
  delete GetGroupInfoResponse_reflection_;
  delete UpdateUserInfoRequest::default_instance_;
  delete UpdateUserInfoRequest_reflection_;
  delete UpdateUserInfoResponse::default_instance_;
  delete UpdateUserInfoResponse_reflection_;
  delete UpdateUserMoodRequest::default_instance_;
  delete UpdateUserMoodRequest_reflection_;
  delete UpdateUserMoodResponse::default_instance_;
  delete UpdateUserMoodResponse_reflection_;
  delete UpdateUserNickNameRequest::default_instance_;
  delete UpdateUserNickNameRequest_reflection_;
  delete UpdateUserNickNameResponse::default_instance_;
  delete UpdateUserNickNameResponse_reflection_;
  delete UpdateAvatarRequest::default_instance_;
  delete UpdateAvatarRequest_reflection_;
  delete UpdateAvatarResponse::default_instance_;
  delete UpdateAvatarResponse_reflection_;
  delete GetGroupUserInfoRequest::default_instance_;
  delete GetGroupUserInfoRequest_reflection_;
  delete GetGroupUserInfoResponse::default_instance_;
  delete GetGroupUserInfoResponse_reflection_;
  delete GetFriendBaseInfoRequest::default_instance_;
  delete GetFriendBaseInfoRequest_reflection_;
  delete FriendListItem::default_instance_;
  delete FriendListItem_reflection_;
  delete GetFriendBaseInfoResponse::default_instance_;
  delete GetFriendBaseInfoResponse_reflection_;
  delete GetGroupOptionRequest::default_instance_;
  delete GetGroupOptionRequest_reflection_;
  delete GetGroupOptionResponse::default_instance_;
  delete GetGroupOptionResponse_reflection_;
  delete GetGroupUserCardRequest::default_instance_;
  delete GetGroupUserCardRequest_reflection_;
  delete GetGroupUserCardResponse::default_instance_;
  delete GetGroupUserCardResponse_reflection_;
  delete SetGroupMsgModeRequest::default_instance_;
  delete SetGroupMsgModeRequest_reflection_;
  delete SetGroupMsgModeResponse::default_instance_;
  delete SetGroupMsgModeResponse_reflection_;
  delete SetGroupTalkModeRequest::default_instance_;
  delete SetGroupTalkModeRequest_reflection_;
  delete SetGroupTalkModeResponse::default_instance_;
  delete SetGroupTalkModeResponse_reflection_;
  delete GetGroupManagerListRequest::default_instance_;
  delete GetGroupManagerListRequest_reflection_;
  delete GetGroupManagerListResponse::default_instance_;
  delete GetGroupManagerListResponse_reflection_;
  delete NotifyJoinGroupRequest::default_instance_;
  delete NotifyJoinGroupRequest_reflection_;
  delete NotifyExitGroupRequest::default_instance_;
  delete NotifyExitGroupRequest_reflection_;
  delete NotifyKickoutGroupUserRequest::default_instance_;
  delete NotifyKickoutGroupUserRequest_reflection_;
  delete NotifySetGroupManagerRequest::default_instance_;
  delete NotifySetGroupManagerRequest_reflection_;
  delete NotifyDeleteGroupRequest::default_instance_;
  delete NotifyDeleteGroupRequest_reflection_;
  delete NotifyUpdateGroupRemarkRequest::default_instance_;
  delete NotifyUpdateGroupRemarkRequest_reflection_;
  delete NotifyUpdateGroupInfoRequest::default_instance_;
  delete NotifyUpdateGroupInfoRequest_reflection_;
  delete NotifyUpdateGroupOptionRequest::default_instance_;
  delete NotifyUpdateGroupOptionRequest_reflection_;
  delete NotifyUpdateGroupNoticeRequest::default_instance_;
  delete NotifyUpdateGroupNoticeRequest_reflection_;
}

void protobuf_AddDesc_user_5fmanagement_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035user_management_service.proto\022\013umsProt"
    "ocol\"#\n\006Result\022\014\n\004code\030\001 \002(\r\022\013\n\003msg\030\002 \002("
    "\t\"\245\001\n\017AuthUserRequest\022\022\n\nlogin_name\030\001 \001("
    "\t\022\020\n\010password\030\002 \001(\t\022\025\n\rterminal_type\030\003 \002"
    "(\r\022\020\n\010mac_addr\030\004 \001(\t\022\022\n\nlogin_type\030\005 \001(\r"
    "\022\017\n\007user_ip\030\006 \001(\t\022\017\n\007user_id\030\007 \001(\004\022\r\n\005to"
    "ken\030\010 \001(\t\"\240\001\n\020AuthUserResponse\022#\n\006result"
    "\030\001 \002(\0132\023.umsProtocol.Result\022\017\n\007user_id\030\002"
    " \001(\004\022\021\n\ttt_number\030\003 \001(\004\022\021\n\tnick_name\030\004 \001"
    "(\t\022\021\n\tavatar_id\030\005 \001(\t\022\016\n\006avatar\030\006 \001(\t\022\r\n"
    "\005token\030\007 \001(\t\"H\n\017QuitUserRequest\022\017\n\007user_"
    "id\030\001 \002(\004\022\025\n\rterminal_type\030\002 \002(\r\022\r\n\005token"
    "\030\003 \002(\t\"H\n\020QuitUserResponse\022#\n\006result\030\002 \002"
    "(\0132\023.umsProtocol.Result\022\017\n\007user_id\030\001 \001(\004"
    "\";\n\024GetFriendListRequest\022\017\n\007user_id\030\001 \002("
    "\004\022\022\n\nversion_id\030\002 \001(\004\"t\n\025GetFriendListRe"
    "sponse\022#\n\006result\030\001 \002(\0132\023.umsProtocol.Res"
    "ult\022\017\n\007user_id\030\002 \001(\004\022\022\n\nversion_id\030\003 \001(\004"
    "\022\021\n\tfriend_id\030\004 \003(\004\"%\n\022GetUserInfoReques"
    "t\022\017\n\007user_id\030\001 \002(\004\"\341\002\n\023GetUserInfoRespon"
    "se\022\017\n\007user_id\030\001 \001(\004\022\021\n\ttt_number\030\002 \001(\004\022\021"
    "\n\tuser_name\030\003 \001(\t\022\021\n\tnick_name\030\004 \001(\t\022\013\n\003"
    "sex\030\005 \001(\r\022\016\n\006mobile\030\006 \001(\t\022\020\n\010birthday\030\007 "
    "\001(\t\022\r\n\005email\030\010 \001(\t\022\022\n\nuser_grade\030\t \001(\r\022\013"
    "\n\003age\030\n \001(\r\022\025\n\rconstellation\030\013 \001(\r\022\014\n\004si"
    "gn\030\014 \001(\t\022\014\n\004like\030\r \001(\t\022\014\n\004city\030\016 \001(\t\022\025\n\r"
    "personal_desc\030\017 \001(\t\022\021\n\treal_name\030\020 \001(\t\022\021"
    "\n\tfriend_id\030\021 \001(\004\022#\n\006result\030\022 \002(\0132\023.umsP"
    "rotocol.Result\":\n\024GetFriendInfoRequest\022\017"
    "\n\007user_id\030\001 \002(\004\022\021\n\tfriend_id\030\002 \002(\004\"\343\002\n\025G"
    "etFriendInfoResponse\022\017\n\007user_id\030\001 \001(\004\022\021\n"
    "\ttt_number\030\002 \001(\004\022\021\n\tuser_name\030\003 \001(\t\022\021\n\tn"
    "ick_name\030\004 \001(\t\022\013\n\003sex\030\005 \001(\r\022\016\n\006mobile\030\006 "
    "\001(\t\022\020\n\010birthday\030\007 \001(\t\022\r\n\005email\030\010 \001(\t\022\022\n\n"
    "user_grade\030\t \001(\r\022\013\n\003age\030\n \001(\r\022\025\n\rconstel"
    "lation\030\013 \001(\r\022\014\n\004sign\030\014 \001(\t\022\014\n\004like\030\r \001(\t"
    "\022\014\n\004city\030\016 \001(\t\022\025\n\rpersonal_desc\030\017 \001(\t\022\021\n"
    "\treal_name\030\020 \001(\t\022\021\n\tfriend_id\030\021 \001(\004\022#\n\006r"
    "esult\030\022 \002(\0132\023.umsProtocol.Result\"&\n\023GetG"
    "roupListRequest\022\017\n\007user_id\030\001 \002(\004\"h\n\rGrou"
    "pListItem\022\020\n\010group_id\030\001 \002(\004\022\022\n\ngroup_nam"
    "e\030\002 \001(\t\022\016\n\006remark\030\003 \001(\t\022\021\n\tavatar_id\030\004 \001"
    "(\r\022\016\n\006avatar\030\005 \001(\t\"|\n\024GetGroupListRespon"
    "se\022\017\n\007user_id\030\001 \001(\004\022.\n\ngroup_item\030\002 \003(\0132"
    "\032.umsProtocol.GroupListItem\022#\n\006result\030\003 "
    "\002(\0132\023.umsProtocol.Result\"\304\001\n\022CreateGroup"
    "Request\022\017\n\007user_id\030\001 \002(\004\022\022\n\ngroup_name\030\002"
    " \002(\t\022\022\n\ngroup_type\030\003 \001(\r\022\022\n\ngroup_icon\030\004"
    " \001(\t\022\023\n\013verify_type\030\005 \001(\r\022\023\n\013group_intro"
    "\030\006 \001(\t\022\022\n\ngroup_sign\030\007 \001(\t\022\020\n\010sub_type\030\010"
    " \001(\r\022\021\n\tavatar_id\030\t \001(\r\"s\n\023CreateGroupRe"
    "sponse\022#\n\006result\030\001 \002(\0132\023.umsProtocol.Res"
    "ult\022\017\n\007user_id\030\002 \001(\004\022\020\n\010group_id\030\003 \001(\004\022\024"
    "\n\014gorup_number\030\004 \001(\r\"5\n\020JoinGroupRequest"
    "\022\017\n\007user_id\030\001 \002(\004\022\020\n\010group_id\030\002 \002(\004\"[\n\021J"
    "oinGroupResponse\022\017\n\007user_id\030\001 \001(\004\022\020\n\010gro"
    "up_id\030\002 \001(\004\022#\n\006result\030\004 \002(\0132\023.umsProtoco"
    "l.Result\"5\n\020ExitGroupRequest\022\017\n\007user_id\030"
    "\001 \002(\004\022\020\n\010group_id\030\002 \002(\004\"8\n\021ExitGroupResp"
    "onse\022#\n\006result\030\001 \002(\0132\023.umsProtocol.Resul"
    "t\"<\n\027GetGroupUserListRequest\022\017\n\007user_id\030"
    "\001 \002(\004\022\020\n\010group_id\030\002 \002(\004\"y\n\030GetGroupUserL"
    "istResponse\022\020\n\010group_id\030\001 \001(\004\022\017\n\007sum_num"
    "\030\002 \001(\r\022\025\n\rgroup_user_id\030\003 \003(\004\022#\n\006result\030"
    "\004 \002(\0132\023.umsProtocol.Result\"E\n\032SearchGrou"
    "pUserListRequest\022\020\n\010group_id\030\001 \002(\004\022\025\n\rse"
    "arch_string\030\002 \002(\t\"h\n\021GroupUserListItem\022\017"
    "\n\007user_id\030\001 \002(\004\022\021\n\tnick_name\030\002 \001(\t\022\021\n\tav"
    "atar_id\030\003 \001(\r\022\016\n\006avatar\030\004 \001(\t\022\014\n\004role\030\005 "
    "\001(\r\"\207\001\n\033SearchGroupUserListResponse\022\020\n\010g"
    "roup_id\030\001 \001(\004\0221\n\tlist_item\030\002 \003(\0132\036.umsPr"
    "otocol.GroupUserListItem\022#\n\006result\030\003 \002(\013"
    "2\023.umsProtocol.Result\"6\n\020AddFriendReques"
    "t\022\017\n\007user_id\030\001 \002(\004\022\021\n\tfriend_id\030\002 \002(\004\"8\n"
    "\021AddFriendResponse\022#\n\006result\030\001 \002(\0132\023.ums"
    "Protocol.Result\"-\n\032GetFriendVerifyInfoRe"
    "quest\022\017\n\007user_id\030\001 \002(\004\"~\n\033GetFriendVerif"
    "yInfoResponse\022\023\n\013verify_type\030\001 \001(\r\022\025\n\rqu"
    "estion_type\030\002 \001(\r\022\016\n\006answer\030\003 \001(\t\022#\n\006res"
    "ult\030\004 \002(\0132\023.umsProtocol.Result\"9\n\023Delete"
    "FriendRequest\022\017\n\007user_id\030\001 \002(\004\022\021\n\tfriend"
    "_id\030\002 \002(\004\";\n\024DeleteFriendResponse\022#\n\006res"
    "ult\030\001 \002(\0132\023.umsProtocol.Result\"R\n\031Update"
    "FriendBranchRequest\022\017\n\007user_id\030\001 \002(\004\022\021\n\t"
    "friend_id\030\002 \002(\004\022\021\n\tbranch_id\030\003 \002(\004\"A\n\032Up"
    "dateFriendBranchResponse\022#\n\006result\030\001 \002(\013"
    "2\023.umsProtocol.Result\"M\n\020AddBranchReques"
    "t\022\017\n\007user_id\030\001 \002(\004\022\023\n\013branch_name\030\002 \001(\t\022"
    "\023\n\013branch_sort\030\003 \001(\r\"\206\001\n\021AddBranchRespon"
    "se\022\017\n\007user_id\030\001 \001(\004\022\021\n\tbranch_id\030\002 \001(\004\022\023"
    "\n\013branch_name\030\003 \001(\t\022\023\n\013branch_sort\030\004 \001(\r"
    "\022#\n\006result\030\005 \002(\0132\023.umsProtocol.Result\"9\n"
    "\023DeleteBranchRequest\022\017\n\007user_id\030\001 \002(\004\022\021\n"
    "\tbranch_id\030\002 \002(\004\";\n\024DeleteBranchResponse"
    "\022#\n\006result\030\001 \002(\0132\023.umsProtocol.Result\"g\n"
    "\027UpdateBranchInfoRequest\022\017\n\007user_id\030\001 \002("
    "\004\022\021\n\tbranch_id\030\002 \001(\004\022\023\n\013branch_name\030\003 \001("
    "\t\022\023\n\013branch_sort\030\004 \001(\r\"\?\n\030UpdateBranchIn"
    "foResponse\022#\n\006result\030\001 \002(\0132\023.umsProtocol"
    ".Result\"S\n\027KickoutGroupUserRequest\022\017\n\007us"
    "er_id\030\001 \002(\004\022\020\n\010group_id\030\002 \002(\004\022\025\n\rgroup_u"
    "ser_id\030\003 \001(\004\"\?\n\030KickoutGroupUserResponse"
    "\022#\n\006result\030\001 \002(\0132\023.umsProtocol.Result\"i\n"
    "\026SetGroupManagerRequest\022\017\n\007user_id\030\001 \002(\004"
    "\022\020\n\010group_id\030\002 \001(\004\022\025\n\rgroup_user_id\030\003 \001("
    "\004\022\025\n\rcontrol_value\030\004 \001(\r\">\n\027SetGroupMana"
    "gerResponse\022#\n\006result\030\001 \002(\0132\023.umsProtoco"
    "l.Result\"O\n\031UpdateFriendRemarkRequest\022\017\n"
    "\007user_id\030\001 \002(\004\022\021\n\tfriend_id\030\002 \001(\004\022\016\n\006rem"
    "ark\030\003 \001(\t\"A\n\032UpdateFriendRemarkResponse\022"
    "#\n\006result\030\001 \002(\0132\023.umsProtocol.Result\";\n\024"
    "GetBranchListRequest\022\017\n\007user_id\030\001 \002(\004\022\022\n"
    "\nversion_id\030\002 \001(\004\"8\n\020UserIdRemarkItem\022\017\n"
    "\007user_id\030\001 \002(\004\022\023\n\013user_remark\030\002 \001(\t\"{\n\016B"
    "ranchListItem\022\021\n\tbranch_id\030\001 \001(\004\022\023\n\013bran"
    "ch_name\030\002 \001(\t\022\023\n\013branch_sort\030\003 \001(\r\022,\n\005us"
    "ers\030\004 \003(\0132\035.umsProtocol.UserIdRemarkItem"
    "\"\223\001\n\025GetBranchListResponse\022#\n\006result\030\001 \002"
    "(\0132\023.umsProtocol.Result\022\017\n\007user_id\030\002 \001(\004"
    "\022\022\n\nversion_id\030\003 \001(\004\0220\n\013branch_item\030\004 \003("
    "\0132\033.umsProtocol.BranchListItem\"e\n\026SetFri"
    "endOptionRequest\022\017\n\007user_id\030\001 \002(\004\022\023\n\013ver"
    "ify_type\030\002 \001(\r\022\025\n\rquestion_type\030\003 \001(\r\022\016\n"
    "\006answer\030\004 \001(\t\">\n\027SetFriendOptionResponse"
    "\022#\n\006result\030\001 \002(\0132\023.umsProtocol.Result\"7\n"
    "\022DeleteGroupRequest\022\017\n\007user_id\030\001 \002(\004\022\020\n\010"
    "group_id\030\002 \001(\004\":\n\023DeleteGroupResponse\022#\n"
    "\006result\030\001 \002(\0132\023.umsProtocol.Result\"\226\001\n\032U"
    "pdateGroupUserInfoRequest\022\017\n\007user_id\030\001 \002"
    "(\004\022\020\n\010group_id\030\002 \002(\004\022\025\n\rgroup_user_id\030\003 "
    "\002(\004\022\016\n\006remark\030\004 \001(\t\022\022\n\ngroup_card\030\005 \001(\t\022"
    "\r\n\005email\030\006 \001(\t\022\013\n\003tel\030\007 \001(\t\"B\n\033UpdateGro"
    "upUserInfoResponse\022#\n\006result\030\001 \002(\0132\023.ums"
    "Protocol.Result\"\315\001\n\026UpdateGroupInfoReque"
    "st\022\017\n\007user_id\030\001 \002(\004\022\020\n\010group_id\030\002 \002(\004\022\022\n"
    "\ngroup_name\030\003 \001(\t\022\016\n\006remark\030\004 \001(\t\022\014\n\004typ"
    "e\030\005 \001(\r\022\023\n\013group_intro\030\006 \001(\t\022\024\n\014group_no"
    "tice\030\007 \001(\t\022\016\n\006avatar\030\010 \001(\t\022\020\n\010sub_type\030\t"
    " \001(\r\022\021\n\tavatar_id\030\n \001(\r\">\n\027UpdateGroupIn"
    "foResponse\022#\n\006result\030\001 \002(\0132\023.umsProtocol"
    ".Result\"f\n\030UpdateGroupOptionRequest\022\017\n\007u"
    "ser_id\030\001 \002(\004\022\020\n\010group_id\030\002 \002(\004\022\023\n\013verify"
    "_type\030\003 \001(\r\022\022\n\nchannel_id\030\004 \001(\004\"@\n\031Updat"
    "eGroupOptionResponse\022#\n\006result\030\001 \002(\0132\023.u"
    "msProtocol.Result\"M\n\030UpdateGroupNoticeRe"
    "quest\022\017\n\007user_id\030\001 \002(\004\022\020\n\010group_id\030\002 \002(\004"
    "\022\016\n\006notice\030\003 \001(\t\"@\n\031UpdateGroupNoticeRes"
    "ponse\022#\n\006result\030\001 \002(\0132\023.umsProtocol.Resu"
    "lt\"8\n\023GetGroupInfoRequest\022\017\n\007user_id\030\001 \002"
    "(\004\022\020\n\010group_id\030\002 \002(\004\"\230\002\n\024GetGroupInfoRes"
    "ponse\022\017\n\007user_id\030\001 \001(\004\022\020\n\010group_id\030\002 \001(\004"
    "\022\022\n\ngroup_name\030\003 \001(\t\022\016\n\006remark\030\004 \001(\t\022\014\n\004"
    "type\030\005 \001(\r\022\023\n\013group_intro\030\006 \001(\t\022\024\n\014group"
    "_notice\030\007 \001(\t\022\016\n\006avatar\030\010 \001(\t\022#\n\006result\030"
    "\t \002(\0132\023.umsProtocol.Result\022\020\n\010sub_type\030\n"
    " \001(\r\022\024\n\014group_number\030\013 \001(\004\022\021\n\tavatar_id\030"
    "\014 \001(\r\022\020\n\010owner_id\030\r \001(\004\"\200\002\n\025UpdateUserIn"
    "foRequest\022\017\n\007user_id\030\001 \002(\004\022\021\n\tnick_name\030"
    "\002 \001(\t\022\013\n\003sex\030\003 \001(\r\022\016\n\006mobile\030\004 \001(\t\022\020\n\010bi"
    "rthday\030\005 \001(\t\022\r\n\005email\030\006 \001(\t\022\013\n\003age\030\007 \001(\r"
    "\022\025\n\rconstellation\030\010 \001(\r\022\014\n\004sign\030\t \001(\t\022\014\n"
    "\004like\030\n \001(\t\022\014\n\004city\030\013 \001(\t\022\025\n\rpersonal_de"
    "sc\030\014 \001(\t\022\021\n\treal_name\030\r \001(\t\022\r\n\005token\030\016 \001"
    "(\t\"=\n\026UpdateUserInfoResponse\022#\n\006result\030\001"
    " \002(\0132\023.umsProtocol.Result\"6\n\025UpdateUserM"
    "oodRequest\022\017\n\007user_id\030\001 \002(\004\022\014\n\004mood\030\002 \001("
    "\t\"=\n\026UpdateUserMoodResponse\022#\n\006result\030\001 "
    "\002(\0132\023.umsProtocol.Result\"\?\n\031UpdateUserNi"
    "ckNameRequest\022\017\n\007user_id\030\001 \002(\004\022\021\n\tnick_n"
    "ame\030\002 \001(\t\"A\n\032UpdateUserNickNameResponse\022"
    "#\n\006result\030\001 \002(\0132\023.umsProtocol.Result\"I\n\023"
    "UpdateAvatarRequest\022\017\n\007user_id\030\001 \002(\004\022\021\n\t"
    "avatar_id\030\002 \001(\r\022\016\n\006avatar\030\003 \001(\t\";\n\024Updat"
    "eAvatarResponse\022#\n\006result\030\001 \002(\0132\023.umsPro"
    "tocol.Result\"<\n\027GetGroupUserInfoRequest\022"
    "\020\n\010group_id\030\001 \002(\004\022\017\n\007user_id\030\002 \003(\004\"\210\001\n\030G"
    "etGroupUserInfoResponse\022#\n\006result\030\001 \002(\0132"
    "\023.umsProtocol.Result\022\020\n\010group_id\030\002 \001(\004\0225"
    "\n\rgroup_members\030\003 \003(\0132\036.umsProtocol.Grou"
    "pUserListItem\">\n\030GetFriendBaseInfoReques"
    "t\022\017\n\007user_id\030\001 \002(\004\022\021\n\tfriend_id\030\002 \003(\004\"t\n"
    "\016FriendListItem\022\017\n\007user_id\030\001 \002(\004\022\021\n\tnick"
    "_name\030\002 \001(\t\022\021\n\tavatar_id\030\003 \001(\r\022\016\n\006avatar"
    "\030\004 \001(\t\022\014\n\004sign\030\005 \001(\t\022\r\n\005level\030\006 \001(\r\"\203\001\n\031"
    "GetFriendBaseInfoResponse\022#\n\006result\030\001 \002("
    "\0132\023.umsProtocol.Result\022\017\n\007user_id\030\002 \001(\004\022"
    "0\n\013friend_item\030\004 \003(\0132\033.umsProtocol.Frien"
    "dListItem\":\n\025GetGroupOptionRequest\022\017\n\007us"
    "er_id\030\001 \002(\004\022\020\n\010group_id\030\002 \002(\004\"\256\001\n\026GetGro"
    "upOptionResponse\022#\n\006result\030\001 \002(\0132\023.umsPr"
    "otocol.Result\022\017\n\007user_id\030\002 \001(\004\022\020\n\010group_"
    "id\030\003 \001(\004\022\023\n\013verify_type\030\004 \001(\r\022\022\n\nchannel"
    "_id\030\005 \001(\004\022\020\n\010msg_mode\030\006 \001(\005\022\021\n\ttalk_mode"
    "\030\007 \001(\005\"<\n\027GetGroupUserCardRequest\022\017\n\007use"
    "r_id\030\001 \002(\004\022\020\n\010group_id\030\002 \002(\004\"\242\001\n\030GetGrou"
    "pUserCardResponse\022#\n\006result\030\001 \002(\0132\023.umsP"
    "rotocol.Result\022\017\n\007user_id\030\002 \001(\004\022\020\n\010group"
    "_id\030\003 \001(\004\022\021\n\tnick_name\030\004 \001(\t\022\r\n\005phone\030\005 "
    "\001(\t\022\014\n\004mail\030\006 \001(\t\022\016\n\006remark\030\007 \001(\t\"M\n\026Set"
    "GroupMsgModeRequest\022\017\n\007user_id\030\001 \002(\004\022\020\n\010"
    "group_id\030\002 \002(\004\022\020\n\010msg_mode\030\003 \002(\r\">\n\027SetG"
    "roupMsgModeResponse\022#\n\006result\030\001 \002(\0132\023.um"
    "sProtocol.Result\"O\n\027SetGroupTalkModeRequ"
    "est\022\017\n\007user_id\030\001 \002(\004\022\020\n\010group_id\030\002 \002(\004\022\021"
    "\n\ttalk_mode\030\003 \002(\r\"\?\n\030SetGroupTalkModeRes"
    "ponse\022#\n\006result\030\001 \002(\0132\023.umsProtocol.Resu"
    "lt\"\?\n\032GetGroupManagerListRequest\022\017\n\007user"
    "_id\030\001 \002(\004\022\020\n\010group_id\030\002 \002(\004\"|\n\033GetGroupM"
    "anagerListResponse\022\020\n\010group_id\030\001 \001(\004\022\017\n\007"
    "sum_num\030\002 \001(\r\022\025\n\rgroup_user_id\030\003 \003(\004\022#\n\006"
    "result\030\004 \002(\0132\023.umsProtocol.Result\"\030\n\026Not"
    "ifyJoinGroupRequest\"\030\n\026NotifyExitGroupRe"
    "quest\"6\n\035NotifyKickoutGroupUserRequest\022\025"
    "\n\radmin_user_id\030\001 \002(\004\"R\n\034NotifySetGroupM"
    "anagerRequest\022\033\n\023super_admin_user_id\030\001 \002"
    "(\004\022\025\n\rcontrol_value\030\002 \002(\r\"7\n\030NotifyDelet"
    "eGroupRequest\022\033\n\023super_admin_user_id\030\001 \002"
    "(\004\"G\n\036NotifyUpdateGroupRemarkRequest\022\025\n\r"
    "admin_user_id\030\001 \002(\004\022\016\n\006remark\030\002 \001(\t\"{\n\034N"
    "otifyUpdateGroupInfoRequest\022\022\n\ngroup_nam"
    "e\030\001 \001(\t\022\016\n\006remark\030\002 \001(\t\022\014\n\004type\030\003 \001(\r\022\023\n"
    "\013group_intro\030\004 \001(\t\022\024\n\014group_notice\030\005 \001(\t"
    "\"I\n\036NotifyUpdateGroupOptionRequest\022\023\n\013ve"
    "rify_type\030\001 \001(\r\022\022\n\nchannel_id\030\002 \001(\004\"0\n\036N"
    "otifyUpdateGroupNoticeRequest\022\016\n\006notice\030"
    "\001 \001(\t", 9005);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "user_management_service.proto", &protobuf_RegisterTypes);
  Result::default_instance_ = new Result();
  AuthUserRequest::default_instance_ = new AuthUserRequest();
  AuthUserResponse::default_instance_ = new AuthUserResponse();
  QuitUserRequest::default_instance_ = new QuitUserRequest();
  QuitUserResponse::default_instance_ = new QuitUserResponse();
  GetFriendListRequest::default_instance_ = new GetFriendListRequest();
  GetFriendListResponse::default_instance_ = new GetFriendListResponse();
  GetUserInfoRequest::default_instance_ = new GetUserInfoRequest();
  GetUserInfoResponse::default_instance_ = new GetUserInfoResponse();
  GetFriendInfoRequest::default_instance_ = new GetFriendInfoRequest();
  GetFriendInfoResponse::default_instance_ = new GetFriendInfoResponse();
  GetGroupListRequest::default_instance_ = new GetGroupListRequest();
  GroupListItem::default_instance_ = new GroupListItem();
  GetGroupListResponse::default_instance_ = new GetGroupListResponse();
  CreateGroupRequest::default_instance_ = new CreateGroupRequest();
  CreateGroupResponse::default_instance_ = new CreateGroupResponse();
  JoinGroupRequest::default_instance_ = new JoinGroupRequest();
  JoinGroupResponse::default_instance_ = new JoinGroupResponse();
  ExitGroupRequest::default_instance_ = new ExitGroupRequest();
  ExitGroupResponse::default_instance_ = new ExitGroupResponse();
  GetGroupUserListRequest::default_instance_ = new GetGroupUserListRequest();
  GetGroupUserListResponse::default_instance_ = new GetGroupUserListResponse();
  SearchGroupUserListRequest::default_instance_ = new SearchGroupUserListRequest();
  GroupUserListItem::default_instance_ = new GroupUserListItem();
  SearchGroupUserListResponse::default_instance_ = new SearchGroupUserListResponse();
  AddFriendRequest::default_instance_ = new AddFriendRequest();
  AddFriendResponse::default_instance_ = new AddFriendResponse();
  GetFriendVerifyInfoRequest::default_instance_ = new GetFriendVerifyInfoRequest();
  GetFriendVerifyInfoResponse::default_instance_ = new GetFriendVerifyInfoResponse();
  DeleteFriendRequest::default_instance_ = new DeleteFriendRequest();
  DeleteFriendResponse::default_instance_ = new DeleteFriendResponse();
  UpdateFriendBranchRequest::default_instance_ = new UpdateFriendBranchRequest();
  UpdateFriendBranchResponse::default_instance_ = new UpdateFriendBranchResponse();
  AddBranchRequest::default_instance_ = new AddBranchRequest();
  AddBranchResponse::default_instance_ = new AddBranchResponse();
  DeleteBranchRequest::default_instance_ = new DeleteBranchRequest();
  DeleteBranchResponse::default_instance_ = new DeleteBranchResponse();
  UpdateBranchInfoRequest::default_instance_ = new UpdateBranchInfoRequest();
  UpdateBranchInfoResponse::default_instance_ = new UpdateBranchInfoResponse();
  KickoutGroupUserRequest::default_instance_ = new KickoutGroupUserRequest();
  KickoutGroupUserResponse::default_instance_ = new KickoutGroupUserResponse();
  SetGroupManagerRequest::default_instance_ = new SetGroupManagerRequest();
  SetGroupManagerResponse::default_instance_ = new SetGroupManagerResponse();
  UpdateFriendRemarkRequest::default_instance_ = new UpdateFriendRemarkRequest();
  UpdateFriendRemarkResponse::default_instance_ = new UpdateFriendRemarkResponse();
  GetBranchListRequest::default_instance_ = new GetBranchListRequest();
  UserIdRemarkItem::default_instance_ = new UserIdRemarkItem();
  BranchListItem::default_instance_ = new BranchListItem();
  GetBranchListResponse::default_instance_ = new GetBranchListResponse();
  SetFriendOptionRequest::default_instance_ = new SetFriendOptionRequest();
  SetFriendOptionResponse::default_instance_ = new SetFriendOptionResponse();
  DeleteGroupRequest::default_instance_ = new DeleteGroupRequest();
  DeleteGroupResponse::default_instance_ = new DeleteGroupResponse();
  UpdateGroupUserInfoRequest::default_instance_ = new UpdateGroupUserInfoRequest();
  UpdateGroupUserInfoResponse::default_instance_ = new UpdateGroupUserInfoResponse();
  UpdateGroupInfoRequest::default_instance_ = new UpdateGroupInfoRequest();
  UpdateGroupInfoResponse::default_instance_ = new UpdateGroupInfoResponse();
  UpdateGroupOptionRequest::default_instance_ = new UpdateGroupOptionRequest();
  UpdateGroupOptionResponse::default_instance_ = new UpdateGroupOptionResponse();
  UpdateGroupNoticeRequest::default_instance_ = new UpdateGroupNoticeRequest();
  UpdateGroupNoticeResponse::default_instance_ = new UpdateGroupNoticeResponse();
  GetGroupInfoRequest::default_instance_ = new GetGroupInfoRequest();
  GetGroupInfoResponse::default_instance_ = new GetGroupInfoResponse();
  UpdateUserInfoRequest::default_instance_ = new UpdateUserInfoRequest();
  UpdateUserInfoResponse::default_instance_ = new UpdateUserInfoResponse();
  UpdateUserMoodRequest::default_instance_ = new UpdateUserMoodRequest();
  UpdateUserMoodResponse::default_instance_ = new UpdateUserMoodResponse();
  UpdateUserNickNameRequest::default_instance_ = new UpdateUserNickNameRequest();
  UpdateUserNickNameResponse::default_instance_ = new UpdateUserNickNameResponse();
  UpdateAvatarRequest::default_instance_ = new UpdateAvatarRequest();
  UpdateAvatarResponse::default_instance_ = new UpdateAvatarResponse();
  GetGroupUserInfoRequest::default_instance_ = new GetGroupUserInfoRequest();
  GetGroupUserInfoResponse::default_instance_ = new GetGroupUserInfoResponse();
  GetFriendBaseInfoRequest::default_instance_ = new GetFriendBaseInfoRequest();
  FriendListItem::default_instance_ = new FriendListItem();
  GetFriendBaseInfoResponse::default_instance_ = new GetFriendBaseInfoResponse();
  GetGroupOptionRequest::default_instance_ = new GetGroupOptionRequest();
  GetGroupOptionResponse::default_instance_ = new GetGroupOptionResponse();
  GetGroupUserCardRequest::default_instance_ = new GetGroupUserCardRequest();
  GetGroupUserCardResponse::default_instance_ = new GetGroupUserCardResponse();
  SetGroupMsgModeRequest::default_instance_ = new SetGroupMsgModeRequest();
  SetGroupMsgModeResponse::default_instance_ = new SetGroupMsgModeResponse();
  SetGroupTalkModeRequest::default_instance_ = new SetGroupTalkModeRequest();
  SetGroupTalkModeResponse::default_instance_ = new SetGroupTalkModeResponse();
  GetGroupManagerListRequest::default_instance_ = new GetGroupManagerListRequest();
  GetGroupManagerListResponse::default_instance_ = new GetGroupManagerListResponse();
  NotifyJoinGroupRequest::default_instance_ = new NotifyJoinGroupRequest();
  NotifyExitGroupRequest::default_instance_ = new NotifyExitGroupRequest();
  NotifyKickoutGroupUserRequest::default_instance_ = new NotifyKickoutGroupUserRequest();
  NotifySetGroupManagerRequest::default_instance_ = new NotifySetGroupManagerRequest();
  NotifyDeleteGroupRequest::default_instance_ = new NotifyDeleteGroupRequest();
  NotifyUpdateGroupRemarkRequest::default_instance_ = new NotifyUpdateGroupRemarkRequest();
  NotifyUpdateGroupInfoRequest::default_instance_ = new NotifyUpdateGroupInfoRequest();
  NotifyUpdateGroupOptionRequest::default_instance_ = new NotifyUpdateGroupOptionRequest();
  NotifyUpdateGroupNoticeRequest::default_instance_ = new NotifyUpdateGroupNoticeRequest();
  Result::default_instance_->InitAsDefaultInstance();
  AuthUserRequest::default_instance_->InitAsDefaultInstance();
  AuthUserResponse::default_instance_->InitAsDefaultInstance();
  QuitUserRequest::default_instance_->InitAsDefaultInstance();
  QuitUserResponse::default_instance_->InitAsDefaultInstance();
  GetFriendListRequest::default_instance_->InitAsDefaultInstance();
  GetFriendListResponse::default_instance_->InitAsDefaultInstance();
  GetUserInfoRequest::default_instance_->InitAsDefaultInstance();
  GetUserInfoResponse::default_instance_->InitAsDefaultInstance();
  GetFriendInfoRequest::default_instance_->InitAsDefaultInstance();
  GetFriendInfoResponse::default_instance_->InitAsDefaultInstance();
  GetGroupListRequest::default_instance_->InitAsDefaultInstance();
  GroupListItem::default_instance_->InitAsDefaultInstance();
  GetGroupListResponse::default_instance_->InitAsDefaultInstance();
  CreateGroupRequest::default_instance_->InitAsDefaultInstance();
  CreateGroupResponse::default_instance_->InitAsDefaultInstance();
  JoinGroupRequest::default_instance_->InitAsDefaultInstance();
  JoinGroupResponse::default_instance_->InitAsDefaultInstance();
  ExitGroupRequest::default_instance_->InitAsDefaultInstance();
  ExitGroupResponse::default_instance_->InitAsDefaultInstance();
  GetGroupUserListRequest::default_instance_->InitAsDefaultInstance();
  GetGroupUserListResponse::default_instance_->InitAsDefaultInstance();
  SearchGroupUserListRequest::default_instance_->InitAsDefaultInstance();
  GroupUserListItem::default_instance_->InitAsDefaultInstance();
  SearchGroupUserListResponse::default_instance_->InitAsDefaultInstance();
  AddFriendRequest::default_instance_->InitAsDefaultInstance();
  AddFriendResponse::default_instance_->InitAsDefaultInstance();
  GetFriendVerifyInfoRequest::default_instance_->InitAsDefaultInstance();
  GetFriendVerifyInfoResponse::default_instance_->InitAsDefaultInstance();
  DeleteFriendRequest::default_instance_->InitAsDefaultInstance();
  DeleteFriendResponse::default_instance_->InitAsDefaultInstance();
  UpdateFriendBranchRequest::default_instance_->InitAsDefaultInstance();
  UpdateFriendBranchResponse::default_instance_->InitAsDefaultInstance();
  AddBranchRequest::default_instance_->InitAsDefaultInstance();
  AddBranchResponse::default_instance_->InitAsDefaultInstance();
  DeleteBranchRequest::default_instance_->InitAsDefaultInstance();
  DeleteBranchResponse::default_instance_->InitAsDefaultInstance();
  UpdateBranchInfoRequest::default_instance_->InitAsDefaultInstance();
  UpdateBranchInfoResponse::default_instance_->InitAsDefaultInstance();
  KickoutGroupUserRequest::default_instance_->InitAsDefaultInstance();
  KickoutGroupUserResponse::default_instance_->InitAsDefaultInstance();
  SetGroupManagerRequest::default_instance_->InitAsDefaultInstance();
  SetGroupManagerResponse::default_instance_->InitAsDefaultInstance();
  UpdateFriendRemarkRequest::default_instance_->InitAsDefaultInstance();
  UpdateFriendRemarkResponse::default_instance_->InitAsDefaultInstance();
  GetBranchListRequest::default_instance_->InitAsDefaultInstance();
  UserIdRemarkItem::default_instance_->InitAsDefaultInstance();
  BranchListItem::default_instance_->InitAsDefaultInstance();
  GetBranchListResponse::default_instance_->InitAsDefaultInstance();
  SetFriendOptionRequest::default_instance_->InitAsDefaultInstance();
  SetFriendOptionResponse::default_instance_->InitAsDefaultInstance();
  DeleteGroupRequest::default_instance_->InitAsDefaultInstance();
  DeleteGroupResponse::default_instance_->InitAsDefaultInstance();
  UpdateGroupUserInfoRequest::default_instance_->InitAsDefaultInstance();
  UpdateGroupUserInfoResponse::default_instance_->InitAsDefaultInstance();
  UpdateGroupInfoRequest::default_instance_->InitAsDefaultInstance();
  UpdateGroupInfoResponse::default_instance_->InitAsDefaultInstance();
  UpdateGroupOptionRequest::default_instance_->InitAsDefaultInstance();
  UpdateGroupOptionResponse::default_instance_->InitAsDefaultInstance();
  UpdateGroupNoticeRequest::default_instance_->InitAsDefaultInstance();
  UpdateGroupNoticeResponse::default_instance_->InitAsDefaultInstance();
  GetGroupInfoRequest::default_instance_->InitAsDefaultInstance();
  GetGroupInfoResponse::default_instance_->InitAsDefaultInstance();
  UpdateUserInfoRequest::default_instance_->InitAsDefaultInstance();
  UpdateUserInfoResponse::default_instance_->InitAsDefaultInstance();
  UpdateUserMoodRequest::default_instance_->InitAsDefaultInstance();
  UpdateUserMoodResponse::default_instance_->InitAsDefaultInstance();
  UpdateUserNickNameRequest::default_instance_->InitAsDefaultInstance();
  UpdateUserNickNameResponse::default_instance_->InitAsDefaultInstance();
  UpdateAvatarRequest::default_instance_->InitAsDefaultInstance();
  UpdateAvatarResponse::default_instance_->InitAsDefaultInstance();
  GetGroupUserInfoRequest::default_instance_->InitAsDefaultInstance();
  GetGroupUserInfoResponse::default_instance_->InitAsDefaultInstance();
  GetFriendBaseInfoRequest::default_instance_->InitAsDefaultInstance();
  FriendListItem::default_instance_->InitAsDefaultInstance();
  GetFriendBaseInfoResponse::default_instance_->InitAsDefaultInstance();
  GetGroupOptionRequest::default_instance_->InitAsDefaultInstance();
  GetGroupOptionResponse::default_instance_->InitAsDefaultInstance();
  GetGroupUserCardRequest::default_instance_->InitAsDefaultInstance();
  GetGroupUserCardResponse::default_instance_->InitAsDefaultInstance();
  SetGroupMsgModeRequest::default_instance_->InitAsDefaultInstance();
  SetGroupMsgModeResponse::default_instance_->InitAsDefaultInstance();
  SetGroupTalkModeRequest::default_instance_->InitAsDefaultInstance();
  SetGroupTalkModeResponse::default_instance_->InitAsDefaultInstance();
  GetGroupManagerListRequest::default_instance_->InitAsDefaultInstance();
  GetGroupManagerListResponse::default_instance_->InitAsDefaultInstance();
  NotifyJoinGroupRequest::default_instance_->InitAsDefaultInstance();
  NotifyExitGroupRequest::default_instance_->InitAsDefaultInstance();
  NotifyKickoutGroupUserRequest::default_instance_->InitAsDefaultInstance();
  NotifySetGroupManagerRequest::default_instance_->InitAsDefaultInstance();
  NotifyDeleteGroupRequest::default_instance_->InitAsDefaultInstance();
  NotifyUpdateGroupRemarkRequest::default_instance_->InitAsDefaultInstance();
  NotifyUpdateGroupInfoRequest::default_instance_->InitAsDefaultInstance();
  NotifyUpdateGroupOptionRequest::default_instance_->InitAsDefaultInstance();
  NotifyUpdateGroupNoticeRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_user_5fmanagement_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_user_5fmanagement_5fservice_2eproto {
  StaticDescriptorInitializer_user_5fmanagement_5fservice_2eproto() {
    protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  }
} static_descriptor_initializer_user_5fmanagement_5fservice_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Result::kCodeFieldNumber;
const int Result::kMsgFieldNumber;
#endif  // !_MSC_VER

Result::Result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.Result)
}

void Result::InitAsDefaultInstance() {
}

Result::Result(const Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.Result)
}

void Result::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 0u;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:umsProtocol.Result)
  SharedDtor();
}

void Result::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Result_descriptor_;
}

const Result& Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

Result* Result::default_instance_ = NULL;

Result* Result::New() const {
  return new Result;
}

void Result::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    code_ = 0u;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.Result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // required string msg = 2;
      case 2: {
        if (tag == 18) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.Result)
  return false;
#undef DO_
}

void Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.Result)
  // required uint32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->code(), output);
  }

  // required string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.Result)
}

::google::protobuf::uint8* Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.Result)
  // required uint32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->code(), target);
  }

  // required string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.Result)
  return target;
}

int Result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->code());
    }

    // required string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Result::MergeFrom(const Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Result::CopyFrom(const Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Result::Swap(Result* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Result_descriptor_;
  metadata.reflection = Result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuthUserRequest::kLoginNameFieldNumber;
const int AuthUserRequest::kPasswordFieldNumber;
const int AuthUserRequest::kTerminalTypeFieldNumber;
const int AuthUserRequest::kMacAddrFieldNumber;
const int AuthUserRequest::kLoginTypeFieldNumber;
const int AuthUserRequest::kUserIpFieldNumber;
const int AuthUserRequest::kUserIdFieldNumber;
const int AuthUserRequest::kTokenFieldNumber;
#endif  // !_MSC_VER

AuthUserRequest::AuthUserRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.AuthUserRequest)
}

void AuthUserRequest::InitAsDefaultInstance() {
}

AuthUserRequest::AuthUserRequest(const AuthUserRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.AuthUserRequest)
}

void AuthUserRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  login_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  terminal_type_ = 0u;
  mac_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  login_type_ = 0u;
  user_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = GOOGLE_ULONGLONG(0);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthUserRequest::~AuthUserRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.AuthUserRequest)
  SharedDtor();
}

void AuthUserRequest::SharedDtor() {
  if (login_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete login_name_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (mac_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mac_addr_;
  }
  if (user_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_ip_;
  }
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void AuthUserRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthUserRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthUserRequest_descriptor_;
}

const AuthUserRequest& AuthUserRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

AuthUserRequest* AuthUserRequest::default_instance_ = NULL;

AuthUserRequest* AuthUserRequest::New() const {
  return new AuthUserRequest;
}

void AuthUserRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AuthUserRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(terminal_type_, login_type_);
    if (has_login_name()) {
      if (login_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        login_name_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
    if (has_mac_addr()) {
      if (mac_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mac_addr_->clear();
      }
    }
    if (has_user_ip()) {
      if (user_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_ip_->clear();
      }
    }
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthUserRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.AuthUserRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string login_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->login_name().data(), this->login_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "login_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_terminal_type;
        break;
      }

      // required uint32 terminal_type = 3;
      case 3: {
        if (tag == 24) {
         parse_terminal_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terminal_type_)));
          set_has_terminal_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mac_addr;
        break;
      }

      // optional string mac_addr = 4;
      case 4: {
        if (tag == 34) {
         parse_mac_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mac_addr().data(), this->mac_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mac_addr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_login_type;
        break;
      }

      // optional uint32 login_type = 5;
      case 5: {
        if (tag == 40) {
         parse_login_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &login_type_)));
          set_has_login_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_user_ip;
        break;
      }

      // optional string user_ip = 6;
      case 6: {
        if (tag == 50) {
         parse_user_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_ip().data(), this->user_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 7;
      case 7: {
        if (tag == 56) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_token;
        break;
      }

      // optional string token = 8;
      case 8: {
        if (tag == 66) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.AuthUserRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.AuthUserRequest)
  return false;
#undef DO_
}

void AuthUserRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.AuthUserRequest)
  // optional string login_name = 1;
  if (has_login_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login_name().data(), this->login_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->login_name(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // required uint32 terminal_type = 3;
  if (has_terminal_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->terminal_type(), output);
  }

  // optional string mac_addr = 4;
  if (has_mac_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac_addr().data(), this->mac_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mac_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->mac_addr(), output);
  }

  // optional uint32 login_type = 5;
  if (has_login_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->login_type(), output);
  }

  // optional string user_ip = 6;
  if (has_user_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_ip().data(), this->user_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->user_ip(), output);
  }

  // optional uint64 user_id = 7;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->user_id(), output);
  }

  // optional string token = 8;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.AuthUserRequest)
}

::google::protobuf::uint8* AuthUserRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.AuthUserRequest)
  // optional string login_name = 1;
  if (has_login_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login_name().data(), this->login_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->login_name(), target);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // required uint32 terminal_type = 3;
  if (has_terminal_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->terminal_type(), target);
  }

  // optional string mac_addr = 4;
  if (has_mac_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac_addr().data(), this->mac_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mac_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mac_addr(), target);
  }

  // optional uint32 login_type = 5;
  if (has_login_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->login_type(), target);
  }

  // optional string user_ip = 6;
  if (has_user_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_ip().data(), this->user_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->user_ip(), target);
  }

  // optional uint64 user_id = 7;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->user_id(), target);
  }

  // optional string token = 8;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.AuthUserRequest)
  return target;
}

int AuthUserRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string login_name = 1;
    if (has_login_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login_name());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // required uint32 terminal_type = 3;
    if (has_terminal_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terminal_type());
    }

    // optional string mac_addr = 4;
    if (has_mac_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mac_addr());
    }

    // optional uint32 login_type = 5;
    if (has_login_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->login_type());
    }

    // optional string user_ip = 6;
    if (has_user_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_ip());
    }

    // optional uint64 user_id = 7;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string token = 8;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthUserRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthUserRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthUserRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthUserRequest::MergeFrom(const AuthUserRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_login_name()) {
      set_login_name(from.login_name());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_terminal_type()) {
      set_terminal_type(from.terminal_type());
    }
    if (from.has_mac_addr()) {
      set_mac_addr(from.mac_addr());
    }
    if (from.has_login_type()) {
      set_login_type(from.login_type());
    }
    if (from.has_user_ip()) {
      set_user_ip(from.user_ip());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthUserRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthUserRequest::CopyFrom(const AuthUserRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void AuthUserRequest::Swap(AuthUserRequest* other) {
  if (other != this) {
    std::swap(login_name_, other->login_name_);
    std::swap(password_, other->password_);
    std::swap(terminal_type_, other->terminal_type_);
    std::swap(mac_addr_, other->mac_addr_);
    std::swap(login_type_, other->login_type_);
    std::swap(user_ip_, other->user_ip_);
    std::swap(user_id_, other->user_id_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthUserRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthUserRequest_descriptor_;
  metadata.reflection = AuthUserRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuthUserResponse::kResultFieldNumber;
const int AuthUserResponse::kUserIdFieldNumber;
const int AuthUserResponse::kTtNumberFieldNumber;
const int AuthUserResponse::kNickNameFieldNumber;
const int AuthUserResponse::kAvatarIdFieldNumber;
const int AuthUserResponse::kAvatarFieldNumber;
const int AuthUserResponse::kTokenFieldNumber;
#endif  // !_MSC_VER

AuthUserResponse::AuthUserResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.AuthUserResponse)
}

void AuthUserResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::umsProtocol::Result*>(&::umsProtocol::Result::default_instance());
}

AuthUserResponse::AuthUserResponse(const AuthUserResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.AuthUserResponse)
}

void AuthUserResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = NULL;
  user_id_ = GOOGLE_ULONGLONG(0);
  tt_number_ = GOOGLE_ULONGLONG(0);
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthUserResponse::~AuthUserResponse() {
  // @@protoc_insertion_point(destructor:umsProtocol.AuthUserResponse)
  SharedDtor();
}

void AuthUserResponse::SharedDtor() {
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_name_;
  }
  if (avatar_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_id_;
  }
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
    delete result_;
  }
}

void AuthUserResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthUserResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthUserResponse_descriptor_;
}

const AuthUserResponse& AuthUserResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

AuthUserResponse* AuthUserResponse::default_instance_ = NULL;

AuthUserResponse* AuthUserResponse::New() const {
  return new AuthUserResponse;
}

void AuthUserResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AuthUserResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(user_id_, tt_number_);
    if (has_result()) {
      if (result_ != NULL) result_->::umsProtocol::Result::Clear();
    }
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nick_name_->clear();
      }
    }
    if (has_avatar_id()) {
      if (avatar_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_id_->clear();
      }
    }
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthUserResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.AuthUserResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .umsProtocol.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_tt_number;
        break;
      }

      // optional uint64 tt_number = 3;
      case 3: {
        if (tag == 24) {
         parse_tt_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tt_number_)));
          set_has_tt_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 4;
      case 4: {
        if (tag == 34) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nick_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_avatar_id;
        break;
      }

      // optional string avatar_id = 5;
      case 5: {
        if (tag == 42) {
         parse_avatar_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->avatar_id().data(), this->avatar_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "avatar_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_avatar;
        break;
      }

      // optional string avatar = 6;
      case 6: {
        if (tag == 50) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->avatar().data(), this->avatar().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "avatar");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_token;
        break;
      }

      // optional string token = 7;
      case 7: {
        if (tag == 58) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.AuthUserResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.AuthUserResponse)
  return false;
#undef DO_
}

void AuthUserResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.AuthUserResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional uint64 tt_number = 3;
  if (has_tt_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->tt_number(), output);
  }

  // optional string nick_name = 4;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nick_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->nick_name(), output);
  }

  // optional string avatar_id = 5;
  if (has_avatar_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar_id().data(), this->avatar_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->avatar_id(), output);
  }

  // optional string avatar = 6;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->avatar(), output);
  }

  // optional string token = 7;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.AuthUserResponse)
}

::google::protobuf::uint8* AuthUserResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.AuthUserResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional uint64 tt_number = 3;
  if (has_tt_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->tt_number(), target);
  }

  // optional string nick_name = 4;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nick_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nick_name(), target);
  }

  // optional string avatar_id = 5;
  if (has_avatar_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar_id().data(), this->avatar_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->avatar_id(), target);
  }

  // optional string avatar = 6;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->avatar(), target);
  }

  // optional string token = 7;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.AuthUserResponse)
  return target;
}

int AuthUserResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .umsProtocol.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 tt_number = 3;
    if (has_tt_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tt_number());
    }

    // optional string nick_name = 4;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

    // optional string avatar_id = 5;
    if (has_avatar_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar_id());
    }

    // optional string avatar = 6;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar());
    }

    // optional string token = 7;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthUserResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthUserResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthUserResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthUserResponse::MergeFrom(const AuthUserResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::umsProtocol::Result::MergeFrom(from.result());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_tt_number()) {
      set_tt_number(from.tt_number());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_avatar_id()) {
      set_avatar_id(from.avatar_id());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthUserResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthUserResponse::CopyFrom(const AuthUserResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void AuthUserResponse::Swap(AuthUserResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_id_, other->user_id_);
    std::swap(tt_number_, other->tt_number_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(avatar_id_, other->avatar_id_);
    std::swap(avatar_, other->avatar_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthUserResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthUserResponse_descriptor_;
  metadata.reflection = AuthUserResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuitUserRequest::kUserIdFieldNumber;
const int QuitUserRequest::kTerminalTypeFieldNumber;
const int QuitUserRequest::kTokenFieldNumber;
#endif  // !_MSC_VER

QuitUserRequest::QuitUserRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.QuitUserRequest)
}

void QuitUserRequest::InitAsDefaultInstance() {
}

QuitUserRequest::QuitUserRequest(const QuitUserRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.QuitUserRequest)
}

void QuitUserRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  terminal_type_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuitUserRequest::~QuitUserRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.QuitUserRequest)
  SharedDtor();
}

void QuitUserRequest::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void QuitUserRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuitUserRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuitUserRequest_descriptor_;
}

const QuitUserRequest& QuitUserRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

QuitUserRequest* QuitUserRequest::default_instance_ = NULL;

QuitUserRequest* QuitUserRequest::New() const {
  return new QuitUserRequest;
}

void QuitUserRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    user_id_ = GOOGLE_ULONGLONG(0);
    terminal_type_ = 0u;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuitUserRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.QuitUserRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_terminal_type;
        break;
      }

      // required uint32 terminal_type = 2;
      case 2: {
        if (tag == 16) {
         parse_terminal_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terminal_type_)));
          set_has_terminal_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // required string token = 3;
      case 3: {
        if (tag == 26) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.QuitUserRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.QuitUserRequest)
  return false;
#undef DO_
}

void QuitUserRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.QuitUserRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint32 terminal_type = 2;
  if (has_terminal_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->terminal_type(), output);
  }

  // required string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.QuitUserRequest)
}

::google::protobuf::uint8* QuitUserRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.QuitUserRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint32 terminal_type = 2;
  if (has_terminal_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->terminal_type(), target);
  }

  // required string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.QuitUserRequest)
  return target;
}

int QuitUserRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint32 terminal_type = 2;
    if (has_terminal_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terminal_type());
    }

    // required string token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuitUserRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuitUserRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuitUserRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuitUserRequest::MergeFrom(const QuitUserRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_terminal_type()) {
      set_terminal_type(from.terminal_type());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuitUserRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuitUserRequest::CopyFrom(const QuitUserRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitUserRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void QuitUserRequest::Swap(QuitUserRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(terminal_type_, other->terminal_type_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuitUserRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuitUserRequest_descriptor_;
  metadata.reflection = QuitUserRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuitUserResponse::kResultFieldNumber;
const int QuitUserResponse::kUserIdFieldNumber;
#endif  // !_MSC_VER

QuitUserResponse::QuitUserResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.QuitUserResponse)
}

void QuitUserResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::umsProtocol::Result*>(&::umsProtocol::Result::default_instance());
}

QuitUserResponse::QuitUserResponse(const QuitUserResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.QuitUserResponse)
}

void QuitUserResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuitUserResponse::~QuitUserResponse() {
  // @@protoc_insertion_point(destructor:umsProtocol.QuitUserResponse)
  SharedDtor();
}

void QuitUserResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void QuitUserResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuitUserResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuitUserResponse_descriptor_;
}

const QuitUserResponse& QuitUserResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

QuitUserResponse* QuitUserResponse::default_instance_ = NULL;

QuitUserResponse* QuitUserResponse::New() const {
  return new QuitUserResponse;
}

void QuitUserResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_result()) {
      if (result_ != NULL) result_->::umsProtocol::Result::Clear();
    }
    user_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuitUserResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.QuitUserResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // required .umsProtocol.Result result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.QuitUserResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.QuitUserResponse)
  return false;
#undef DO_
}

void QuitUserResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.QuitUserResponse)
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required .umsProtocol.Result result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.QuitUserResponse)
}

::google::protobuf::uint8* QuitUserResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.QuitUserResponse)
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required .umsProtocol.Result result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.QuitUserResponse)
  return target;
}

int QuitUserResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .umsProtocol.Result result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuitUserResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuitUserResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuitUserResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuitUserResponse::MergeFrom(const QuitUserResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::umsProtocol::Result::MergeFrom(from.result());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuitUserResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuitUserResponse::CopyFrom(const QuitUserResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitUserResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void QuitUserResponse::Swap(QuitUserResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuitUserResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuitUserResponse_descriptor_;
  metadata.reflection = QuitUserResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFriendListRequest::kUserIdFieldNumber;
const int GetFriendListRequest::kVersionIdFieldNumber;
#endif  // !_MSC_VER

GetFriendListRequest::GetFriendListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.GetFriendListRequest)
}

void GetFriendListRequest::InitAsDefaultInstance() {
}

GetFriendListRequest::GetFriendListRequest(const GetFriendListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.GetFriendListRequest)
}

void GetFriendListRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  version_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFriendListRequest::~GetFriendListRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.GetFriendListRequest)
  SharedDtor();
}

void GetFriendListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetFriendListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFriendListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFriendListRequest_descriptor_;
}

const GetFriendListRequest& GetFriendListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

GetFriendListRequest* GetFriendListRequest::default_instance_ = NULL;

GetFriendListRequest* GetFriendListRequest::New() const {
  return new GetFriendListRequest;
}

void GetFriendListRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetFriendListRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, version_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFriendListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.GetFriendListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version_id;
        break;
      }

      // optional uint64 version_id = 2;
      case 2: {
        if (tag == 16) {
         parse_version_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_id_)));
          set_has_version_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.GetFriendListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.GetFriendListRequest)
  return false;
#undef DO_
}

void GetFriendListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.GetFriendListRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint64 version_id = 2;
  if (has_version_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->version_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.GetFriendListRequest)
}

::google::protobuf::uint8* GetFriendListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.GetFriendListRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint64 version_id = 2;
  if (has_version_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->version_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.GetFriendListRequest)
  return target;
}

int GetFriendListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 version_id = 2;
    if (has_version_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFriendListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFriendListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFriendListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFriendListRequest::MergeFrom(const GetFriendListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_version_id()) {
      set_version_id(from.version_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFriendListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFriendListRequest::CopyFrom(const GetFriendListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetFriendListRequest::Swap(GetFriendListRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(version_id_, other->version_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFriendListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFriendListRequest_descriptor_;
  metadata.reflection = GetFriendListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFriendListResponse::kResultFieldNumber;
const int GetFriendListResponse::kUserIdFieldNumber;
const int GetFriendListResponse::kVersionIdFieldNumber;
const int GetFriendListResponse::kFriendIdFieldNumber;
#endif  // !_MSC_VER

GetFriendListResponse::GetFriendListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.GetFriendListResponse)
}

void GetFriendListResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::umsProtocol::Result*>(&::umsProtocol::Result::default_instance());
}

GetFriendListResponse::GetFriendListResponse(const GetFriendListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.GetFriendListResponse)
}

void GetFriendListResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  user_id_ = GOOGLE_ULONGLONG(0);
  version_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFriendListResponse::~GetFriendListResponse() {
  // @@protoc_insertion_point(destructor:umsProtocol.GetFriendListResponse)
  SharedDtor();
}

void GetFriendListResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void GetFriendListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFriendListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFriendListResponse_descriptor_;
}

const GetFriendListResponse& GetFriendListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

GetFriendListResponse* GetFriendListResponse::default_instance_ = NULL;

GetFriendListResponse* GetFriendListResponse::New() const {
  return new GetFriendListResponse;
}

void GetFriendListResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetFriendListResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(user_id_, version_id_);
    if (has_result()) {
      if (result_ != NULL) result_->::umsProtocol::Result::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  friend_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFriendListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.GetFriendListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .umsProtocol.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_version_id;
        break;
      }

      // optional uint64 version_id = 3;
      case 3: {
        if (tag == 24) {
         parse_version_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_id_)));
          set_has_version_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_friend_id;
        break;
      }

      // repeated uint64 friend_id = 4;
      case 4: {
        if (tag == 32) {
         parse_friend_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_friend_id())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_friend_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_friend_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.GetFriendListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.GetFriendListResponse)
  return false;
#undef DO_
}

void GetFriendListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.GetFriendListResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional uint64 version_id = 3;
  if (has_version_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->version_id(), output);
  }

  // repeated uint64 friend_id = 4;
  for (int i = 0; i < this->friend_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->friend_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.GetFriendListResponse)
}

::google::protobuf::uint8* GetFriendListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.GetFriendListResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional uint64 version_id = 3;
  if (has_version_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->version_id(), target);
  }

  // repeated uint64 friend_id = 4;
  for (int i = 0; i < this->friend_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->friend_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.GetFriendListResponse)
  return target;
}

int GetFriendListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .umsProtocol.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 version_id = 3;
    if (has_version_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version_id());
    }

  }
  // repeated uint64 friend_id = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->friend_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->friend_id(i));
    }
    total_size += 1 * this->friend_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFriendListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFriendListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFriendListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFriendListResponse::MergeFrom(const GetFriendListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  friend_id_.MergeFrom(from.friend_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::umsProtocol::Result::MergeFrom(from.result());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_version_id()) {
      set_version_id(from.version_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFriendListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFriendListResponse::CopyFrom(const GetFriendListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void GetFriendListResponse::Swap(GetFriendListResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_id_, other->user_id_);
    std::swap(version_id_, other->version_id_);
    friend_id_.Swap(&other->friend_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFriendListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFriendListResponse_descriptor_;
  metadata.reflection = GetFriendListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserInfoRequest::kUserIdFieldNumber;
#endif  // !_MSC_VER

GetUserInfoRequest::GetUserInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.GetUserInfoRequest)
}

void GetUserInfoRequest::InitAsDefaultInstance() {
}

GetUserInfoRequest::GetUserInfoRequest(const GetUserInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.GetUserInfoRequest)
}

void GetUserInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserInfoRequest::~GetUserInfoRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.GetUserInfoRequest)
  SharedDtor();
}

void GetUserInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetUserInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUserInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUserInfoRequest_descriptor_;
}

const GetUserInfoRequest& GetUserInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

GetUserInfoRequest* GetUserInfoRequest::default_instance_ = NULL;

GetUserInfoRequest* GetUserInfoRequest::New() const {
  return new GetUserInfoRequest;
}

void GetUserInfoRequest::Clear() {
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUserInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.GetUserInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.GetUserInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.GetUserInfoRequest)
  return false;
#undef DO_
}

void GetUserInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.GetUserInfoRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.GetUserInfoRequest)
}

::google::protobuf::uint8* GetUserInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.GetUserInfoRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.GetUserInfoRequest)
  return target;
}

int GetUserInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUserInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUserInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUserInfoRequest::MergeFrom(const GetUserInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUserInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserInfoRequest::CopyFrom(const GetUserInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetUserInfoRequest::Swap(GetUserInfoRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUserInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUserInfoRequest_descriptor_;
  metadata.reflection = GetUserInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserInfoResponse::kUserIdFieldNumber;
const int GetUserInfoResponse::kTtNumberFieldNumber;
const int GetUserInfoResponse::kUserNameFieldNumber;
const int GetUserInfoResponse::kNickNameFieldNumber;
const int GetUserInfoResponse::kSexFieldNumber;
const int GetUserInfoResponse::kMobileFieldNumber;
const int GetUserInfoResponse::kBirthdayFieldNumber;
const int GetUserInfoResponse::kEmailFieldNumber;
const int GetUserInfoResponse::kUserGradeFieldNumber;
const int GetUserInfoResponse::kAgeFieldNumber;
const int GetUserInfoResponse::kConstellationFieldNumber;
const int GetUserInfoResponse::kSignFieldNumber;
const int GetUserInfoResponse::kLikeFieldNumber;
const int GetUserInfoResponse::kCityFieldNumber;
const int GetUserInfoResponse::kPersonalDescFieldNumber;
const int GetUserInfoResponse::kRealNameFieldNumber;
const int GetUserInfoResponse::kFriendIdFieldNumber;
const int GetUserInfoResponse::kResultFieldNumber;
#endif  // !_MSC_VER

GetUserInfoResponse::GetUserInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.GetUserInfoResponse)
}

void GetUserInfoResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::umsProtocol::Result*>(&::umsProtocol::Result::default_instance());
}

GetUserInfoResponse::GetUserInfoResponse(const GetUserInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.GetUserInfoResponse)
}

void GetUserInfoResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  tt_number_ = GOOGLE_ULONGLONG(0);
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 0u;
  mobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  birthday_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_grade_ = 0u;
  age_ = 0u;
  constellation_ = 0u;
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  like_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  personal_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  friend_id_ = GOOGLE_ULONGLONG(0);
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserInfoResponse::~GetUserInfoResponse() {
  // @@protoc_insertion_point(destructor:umsProtocol.GetUserInfoResponse)
  SharedDtor();
}

void GetUserInfoResponse::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_name_;
  }
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_name_;
  }
  if (mobile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_;
  }
  if (birthday_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete birthday_;
  }
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (like_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete like_;
  }
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_;
  }
  if (personal_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete personal_desc_;
  }
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (this != default_instance_) {
    delete result_;
  }
}

void GetUserInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUserInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUserInfoResponse_descriptor_;
}

const GetUserInfoResponse& GetUserInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

GetUserInfoResponse* GetUserInfoResponse::default_instance_ = NULL;

GetUserInfoResponse* GetUserInfoResponse::New() const {
  return new GetUserInfoResponse;
}

void GetUserInfoResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetUserInfoResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(user_id_, tt_number_);
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_name_->clear();
      }
    }
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nick_name_->clear();
      }
    }
    sex_ = 0u;
    if (has_mobile()) {
      if (mobile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_->clear();
      }
    }
    if (has_birthday()) {
      if (birthday_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        birthday_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        email_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(age_, constellation_);
    user_grade_ = 0u;
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_->clear();
      }
    }
    if (has_like()) {
      if (like_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        like_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        city_->clear();
      }
    }
    if (has_personal_desc()) {
      if (personal_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        personal_desc_->clear();
      }
    }
    if (has_real_name()) {
      if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        real_name_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 196608) {
    friend_id_ = GOOGLE_ULONGLONG(0);
    if (has_result()) {
      if (result_ != NULL) result_->::umsProtocol::Result::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUserInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.GetUserInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tt_number;
        break;
      }

      // optional uint64 tt_number = 2;
      case 2: {
        if (tag == 16) {
         parse_tt_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tt_number_)));
          set_has_tt_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user_name;
        break;
      }

      // optional string user_name = 3;
      case 3: {
        if (tag == 26) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 4;
      case 4: {
        if (tag == 34) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nick_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 5;
      case 5: {
        if (tag == 40) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_mobile;
        break;
      }

      // optional string mobile = 6;
      case 6: {
        if (tag == 50) {
         parse_mobile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mobile().data(), this->mobile().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mobile");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_birthday;
        break;
      }

      // optional string birthday = 7;
      case 7: {
        if (tag == 58) {
         parse_birthday:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_birthday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->birthday().data(), this->birthday().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "birthday");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_email;
        break;
      }

      // optional string email = 8;
      case 8: {
        if (tag == 66) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "email");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_user_grade;
        break;
      }

      // optional uint32 user_grade = 9;
      case 9: {
        if (tag == 72) {
         parse_user_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_grade_)));
          set_has_user_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_age;
        break;
      }

      // optional uint32 age = 10;
      case 10: {
        if (tag == 80) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &age_)));
          set_has_age();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_constellation;
        break;
      }

      // optional uint32 constellation = 11;
      case 11: {
        if (tag == 88) {
         parse_constellation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &constellation_)));
          set_has_constellation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_sign;
        break;
      }

      // optional string sign = 12;
      case 12: {
        if (tag == 98) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sign");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_like;
        break;
      }

      // optional string like = 13;
      case 13: {
        if (tag == 106) {
         parse_like:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_like()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->like().data(), this->like().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "like");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_city;
        break;
      }

      // optional string city = 14;
      case 14: {
        if (tag == 114) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "city");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_personal_desc;
        break;
      }

      // optional string personal_desc = 15;
      case 15: {
        if (tag == 122) {
         parse_personal_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_personal_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->personal_desc().data(), this->personal_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "personal_desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_real_name;
        break;
      }

      // optional string real_name = 16;
      case 16: {
        if (tag == 130) {
         parse_real_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_real_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->real_name().data(), this->real_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "real_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_friend_id;
        break;
      }

      // optional uint64 friend_id = 17;
      case 17: {
        if (tag == 136) {
         parse_friend_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend_id_)));
          set_has_friend_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_result;
        break;
      }

      // required .umsProtocol.Result result = 18;
      case 18: {
        if (tag == 146) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.GetUserInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.GetUserInfoResponse)
  return false;
#undef DO_
}

void GetUserInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.GetUserInfoResponse)
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint64 tt_number = 2;
  if (has_tt_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->tt_number(), output);
  }

  // optional string user_name = 3;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_name(), output);
  }

  // optional string nick_name = 4;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nick_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->nick_name(), output);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sex(), output);
  }

  // optional string mobile = 6;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mobile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->mobile(), output);
  }

  // optional string birthday = 7;
  if (has_birthday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->birthday().data(), this->birthday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "birthday");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->birthday(), output);
  }

  // optional string email = 8;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->email(), output);
  }

  // optional uint32 user_grade = 9;
  if (has_user_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->user_grade(), output);
  }

  // optional uint32 age = 10;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->age(), output);
  }

  // optional uint32 constellation = 11;
  if (has_constellation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->constellation(), output);
  }

  // optional string sign = 12;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->sign(), output);
  }

  // optional string like = 13;
  if (has_like()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->like().data(), this->like().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "like");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->like(), output);
  }

  // optional string city = 14;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->city(), output);
  }

  // optional string personal_desc = 15;
  if (has_personal_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->personal_desc().data(), this->personal_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "personal_desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->personal_desc(), output);
  }

  // optional string real_name = 16;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->real_name().data(), this->real_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "real_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->real_name(), output);
  }

  // optional uint64 friend_id = 17;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->friend_id(), output);
  }

  // required .umsProtocol.Result result = 18;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.GetUserInfoResponse)
}

::google::protobuf::uint8* GetUserInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.GetUserInfoResponse)
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint64 tt_number = 2;
  if (has_tt_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->tt_number(), target);
  }

  // optional string user_name = 3;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_name(), target);
  }

  // optional string nick_name = 4;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nick_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nick_name(), target);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sex(), target);
  }

  // optional string mobile = 6;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mobile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->mobile(), target);
  }

  // optional string birthday = 7;
  if (has_birthday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->birthday().data(), this->birthday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "birthday");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->birthday(), target);
  }

  // optional string email = 8;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->email(), target);
  }

  // optional uint32 user_grade = 9;
  if (has_user_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->user_grade(), target);
  }

  // optional uint32 age = 10;
  if (has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->age(), target);
  }

  // optional uint32 constellation = 11;
  if (has_constellation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->constellation(), target);
  }

  // optional string sign = 12;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->sign(), target);
  }

  // optional string like = 13;
  if (has_like()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->like().data(), this->like().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "like");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->like(), target);
  }

  // optional string city = 14;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->city(), target);
  }

  // optional string personal_desc = 15;
  if (has_personal_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->personal_desc().data(), this->personal_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "personal_desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->personal_desc(), target);
  }

  // optional string real_name = 16;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->real_name().data(), this->real_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "real_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->real_name(), target);
  }

  // optional uint64 friend_id = 17;
  if (has_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->friend_id(), target);
  }

  // required .umsProtocol.Result result = 18;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.GetUserInfoResponse)
  return target;
}

int GetUserInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 tt_number = 2;
    if (has_tt_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tt_number());
    }

    // optional string user_name = 3;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional string nick_name = 4;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

    // optional uint32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional string mobile = 6;
    if (has_mobile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobile());
    }

    // optional string birthday = 7;
    if (has_birthday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->birthday());
    }

    // optional string email = 8;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 user_grade = 9;
    if (has_user_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_grade());
    }

    // optional uint32 age = 10;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->age());
    }

    // optional uint32 constellation = 11;
    if (has_constellation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->constellation());
    }

    // optional string sign = 12;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

    // optional string like = 13;
    if (has_like()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->like());
    }

    // optional string city = 14;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // optional string personal_desc = 15;
    if (has_personal_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->personal_desc());
    }

    // optional string real_name = 16;
    if (has_real_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->real_name());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 friend_id = 17;
    if (has_friend_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friend_id());
    }

    // required .umsProtocol.Result result = 18;
    if (has_result()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUserInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUserInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUserInfoResponse::MergeFrom(const GetUserInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_tt_number()) {
      set_tt_number(from.tt_number());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_mobile()) {
      set_mobile(from.mobile());
    }
    if (from.has_birthday()) {
      set_birthday(from.birthday());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_user_grade()) {
      set_user_grade(from.user_grade());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
    if (from.has_constellation()) {
      set_constellation(from.constellation());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_like()) {
      set_like(from.like());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_personal_desc()) {
      set_personal_desc(from.personal_desc());
    }
    if (from.has_real_name()) {
      set_real_name(from.real_name());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
    if (from.has_result()) {
      mutable_result()->::umsProtocol::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUserInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserInfoResponse::CopyFrom(const GetUserInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00020000) != 0x00020000) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void GetUserInfoResponse::Swap(GetUserInfoResponse* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(tt_number_, other->tt_number_);
    std::swap(user_name_, other->user_name_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(sex_, other->sex_);
    std::swap(mobile_, other->mobile_);
    std::swap(birthday_, other->birthday_);
    std::swap(email_, other->email_);
    std::swap(user_grade_, other->user_grade_);
    std::swap(age_, other->age_);
    std::swap(constellation_, other->constellation_);
    std::swap(sign_, other->sign_);
    std::swap(like_, other->like_);
    std::swap(city_, other->city_);
    std::swap(personal_desc_, other->personal_desc_);
    std::swap(real_name_, other->real_name_);
    std::swap(friend_id_, other->friend_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUserInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUserInfoResponse_descriptor_;
  metadata.reflection = GetUserInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFriendInfoRequest::kUserIdFieldNumber;
const int GetFriendInfoRequest::kFriendIdFieldNumber;
#endif  // !_MSC_VER

GetFriendInfoRequest::GetFriendInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.GetFriendInfoRequest)
}

void GetFriendInfoRequest::InitAsDefaultInstance() {
}

GetFriendInfoRequest::GetFriendInfoRequest(const GetFriendInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.GetFriendInfoRequest)
}

void GetFriendInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  friend_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFriendInfoRequest::~GetFriendInfoRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.GetFriendInfoRequest)
  SharedDtor();
}

void GetFriendInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetFriendInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFriendInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFriendInfoRequest_descriptor_;
}

const GetFriendInfoRequest& GetFriendInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

GetFriendInfoRequest* GetFriendInfoRequest::default_instance_ = NULL;

GetFriendInfoRequest* GetFriendInfoRequest::New() const {
  return new GetFriendInfoRequest;
}

void GetFriendInfoRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetFriendInfoRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, friend_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFriendInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.GetFriendInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_friend_id;
        break;
      }

      // required uint64 friend_id = 2;
      case 2: {
        if (tag == 16) {
         parse_friend_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend_id_)));
          set_has_friend_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.GetFriendInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.GetFriendInfoRequest)
  return false;
#undef DO_
}

void GetFriendInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.GetFriendInfoRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 friend_id = 2;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->friend_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.GetFriendInfoRequest)
}

::google::protobuf::uint8* GetFriendInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.GetFriendInfoRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 friend_id = 2;
  if (has_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->friend_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.GetFriendInfoRequest)
  return target;
}

int GetFriendInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 friend_id = 2;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friend_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFriendInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFriendInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFriendInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFriendInfoRequest::MergeFrom(const GetFriendInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFriendInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFriendInfoRequest::CopyFrom(const GetFriendInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetFriendInfoRequest::Swap(GetFriendInfoRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(friend_id_, other->friend_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFriendInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFriendInfoRequest_descriptor_;
  metadata.reflection = GetFriendInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFriendInfoResponse::kUserIdFieldNumber;
const int GetFriendInfoResponse::kTtNumberFieldNumber;
const int GetFriendInfoResponse::kUserNameFieldNumber;
const int GetFriendInfoResponse::kNickNameFieldNumber;
const int GetFriendInfoResponse::kSexFieldNumber;
const int GetFriendInfoResponse::kMobileFieldNumber;
const int GetFriendInfoResponse::kBirthdayFieldNumber;
const int GetFriendInfoResponse::kEmailFieldNumber;
const int GetFriendInfoResponse::kUserGradeFieldNumber;
const int GetFriendInfoResponse::kAgeFieldNumber;
const int GetFriendInfoResponse::kConstellationFieldNumber;
const int GetFriendInfoResponse::kSignFieldNumber;
const int GetFriendInfoResponse::kLikeFieldNumber;
const int GetFriendInfoResponse::kCityFieldNumber;
const int GetFriendInfoResponse::kPersonalDescFieldNumber;
const int GetFriendInfoResponse::kRealNameFieldNumber;
const int GetFriendInfoResponse::kFriendIdFieldNumber;
const int GetFriendInfoResponse::kResultFieldNumber;
#endif  // !_MSC_VER

GetFriendInfoResponse::GetFriendInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.GetFriendInfoResponse)
}

void GetFriendInfoResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::umsProtocol::Result*>(&::umsProtocol::Result::default_instance());
}

GetFriendInfoResponse::GetFriendInfoResponse(const GetFriendInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.GetFriendInfoResponse)
}

void GetFriendInfoResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  tt_number_ = GOOGLE_ULONGLONG(0);
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 0u;
  mobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  birthday_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_grade_ = 0u;
  age_ = 0u;
  constellation_ = 0u;
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  like_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  personal_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  friend_id_ = GOOGLE_ULONGLONG(0);
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFriendInfoResponse::~GetFriendInfoResponse() {
  // @@protoc_insertion_point(destructor:umsProtocol.GetFriendInfoResponse)
  SharedDtor();
}

void GetFriendInfoResponse::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_name_;
  }
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_name_;
  }
  if (mobile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_;
  }
  if (birthday_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete birthday_;
  }
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (like_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete like_;
  }
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_;
  }
  if (personal_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete personal_desc_;
  }
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (this != default_instance_) {
    delete result_;
  }
}

void GetFriendInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFriendInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFriendInfoResponse_descriptor_;
}

const GetFriendInfoResponse& GetFriendInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

GetFriendInfoResponse* GetFriendInfoResponse::default_instance_ = NULL;

GetFriendInfoResponse* GetFriendInfoResponse::New() const {
  return new GetFriendInfoResponse;
}

void GetFriendInfoResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetFriendInfoResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(user_id_, tt_number_);
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_name_->clear();
      }
    }
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nick_name_->clear();
      }
    }
    sex_ = 0u;
    if (has_mobile()) {
      if (mobile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_->clear();
      }
    }
    if (has_birthday()) {
      if (birthday_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        birthday_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        email_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(age_, constellation_);
    user_grade_ = 0u;
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_->clear();
      }
    }
    if (has_like()) {
      if (like_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        like_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        city_->clear();
      }
    }
    if (has_personal_desc()) {
      if (personal_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        personal_desc_->clear();
      }
    }
    if (has_real_name()) {
      if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        real_name_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 196608) {
    friend_id_ = GOOGLE_ULONGLONG(0);
    if (has_result()) {
      if (result_ != NULL) result_->::umsProtocol::Result::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFriendInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.GetFriendInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tt_number;
        break;
      }

      // optional uint64 tt_number = 2;
      case 2: {
        if (tag == 16) {
         parse_tt_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tt_number_)));
          set_has_tt_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user_name;
        break;
      }

      // optional string user_name = 3;
      case 3: {
        if (tag == 26) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 4;
      case 4: {
        if (tag == 34) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nick_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 5;
      case 5: {
        if (tag == 40) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_mobile;
        break;
      }

      // optional string mobile = 6;
      case 6: {
        if (tag == 50) {
         parse_mobile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mobile().data(), this->mobile().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mobile");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_birthday;
        break;
      }

      // optional string birthday = 7;
      case 7: {
        if (tag == 58) {
         parse_birthday:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_birthday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->birthday().data(), this->birthday().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "birthday");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_email;
        break;
      }

      // optional string email = 8;
      case 8: {
        if (tag == 66) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "email");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_user_grade;
        break;
      }

      // optional uint32 user_grade = 9;
      case 9: {
        if (tag == 72) {
         parse_user_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_grade_)));
          set_has_user_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_age;
        break;
      }

      // optional uint32 age = 10;
      case 10: {
        if (tag == 80) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &age_)));
          set_has_age();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_constellation;
        break;
      }

      // optional uint32 constellation = 11;
      case 11: {
        if (tag == 88) {
         parse_constellation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &constellation_)));
          set_has_constellation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_sign;
        break;
      }

      // optional string sign = 12;
      case 12: {
        if (tag == 98) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sign");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_like;
        break;
      }

      // optional string like = 13;
      case 13: {
        if (tag == 106) {
         parse_like:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_like()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->like().data(), this->like().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "like");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_city;
        break;
      }

      // optional string city = 14;
      case 14: {
        if (tag == 114) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "city");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_personal_desc;
        break;
      }

      // optional string personal_desc = 15;
      case 15: {
        if (tag == 122) {
         parse_personal_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_personal_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->personal_desc().data(), this->personal_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "personal_desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_real_name;
        break;
      }

      // optional string real_name = 16;
      case 16: {
        if (tag == 130) {
         parse_real_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_real_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->real_name().data(), this->real_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "real_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_friend_id;
        break;
      }

      // optional uint64 friend_id = 17;
      case 17: {
        if (tag == 136) {
         parse_friend_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend_id_)));
          set_has_friend_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_result;
        break;
      }

      // required .umsProtocol.Result result = 18;
      case 18: {
        if (tag == 146) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.GetFriendInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.GetFriendInfoResponse)
  return false;
#undef DO_
}

void GetFriendInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.GetFriendInfoResponse)
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint64 tt_number = 2;
  if (has_tt_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->tt_number(), output);
  }

  // optional string user_name = 3;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_name(), output);
  }

  // optional string nick_name = 4;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nick_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->nick_name(), output);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sex(), output);
  }

  // optional string mobile = 6;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mobile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->mobile(), output);
  }

  // optional string birthday = 7;
  if (has_birthday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->birthday().data(), this->birthday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "birthday");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->birthday(), output);
  }

  // optional string email = 8;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->email(), output);
  }

  // optional uint32 user_grade = 9;
  if (has_user_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->user_grade(), output);
  }

  // optional uint32 age = 10;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->age(), output);
  }

  // optional uint32 constellation = 11;
  if (has_constellation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->constellation(), output);
  }

  // optional string sign = 12;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->sign(), output);
  }

  // optional string like = 13;
  if (has_like()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->like().data(), this->like().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "like");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->like(), output);
  }

  // optional string city = 14;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->city(), output);
  }

  // optional string personal_desc = 15;
  if (has_personal_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->personal_desc().data(), this->personal_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "personal_desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->personal_desc(), output);
  }

  // optional string real_name = 16;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->real_name().data(), this->real_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "real_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->real_name(), output);
  }

  // optional uint64 friend_id = 17;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->friend_id(), output);
  }

  // required .umsProtocol.Result result = 18;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.GetFriendInfoResponse)
}

::google::protobuf::uint8* GetFriendInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.GetFriendInfoResponse)
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint64 tt_number = 2;
  if (has_tt_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->tt_number(), target);
  }

  // optional string user_name = 3;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_name(), target);
  }

  // optional string nick_name = 4;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nick_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nick_name(), target);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sex(), target);
  }

  // optional string mobile = 6;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mobile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->mobile(), target);
  }

  // optional string birthday = 7;
  if (has_birthday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->birthday().data(), this->birthday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "birthday");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->birthday(), target);
  }

  // optional string email = 8;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->email(), target);
  }

  // optional uint32 user_grade = 9;
  if (has_user_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->user_grade(), target);
  }

  // optional uint32 age = 10;
  if (has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->age(), target);
  }

  // optional uint32 constellation = 11;
  if (has_constellation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->constellation(), target);
  }

  // optional string sign = 12;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->sign(), target);
  }

  // optional string like = 13;
  if (has_like()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->like().data(), this->like().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "like");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->like(), target);
  }

  // optional string city = 14;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->city(), target);
  }

  // optional string personal_desc = 15;
  if (has_personal_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->personal_desc().data(), this->personal_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "personal_desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->personal_desc(), target);
  }

  // optional string real_name = 16;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->real_name().data(), this->real_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "real_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->real_name(), target);
  }

  // optional uint64 friend_id = 17;
  if (has_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->friend_id(), target);
  }

  // required .umsProtocol.Result result = 18;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.GetFriendInfoResponse)
  return target;
}

int GetFriendInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 tt_number = 2;
    if (has_tt_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tt_number());
    }

    // optional string user_name = 3;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional string nick_name = 4;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

    // optional uint32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional string mobile = 6;
    if (has_mobile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobile());
    }

    // optional string birthday = 7;
    if (has_birthday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->birthday());
    }

    // optional string email = 8;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 user_grade = 9;
    if (has_user_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_grade());
    }

    // optional uint32 age = 10;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->age());
    }

    // optional uint32 constellation = 11;
    if (has_constellation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->constellation());
    }

    // optional string sign = 12;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

    // optional string like = 13;
    if (has_like()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->like());
    }

    // optional string city = 14;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // optional string personal_desc = 15;
    if (has_personal_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->personal_desc());
    }

    // optional string real_name = 16;
    if (has_real_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->real_name());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 friend_id = 17;
    if (has_friend_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friend_id());
    }

    // required .umsProtocol.Result result = 18;
    if (has_result()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFriendInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFriendInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFriendInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFriendInfoResponse::MergeFrom(const GetFriendInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_tt_number()) {
      set_tt_number(from.tt_number());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_mobile()) {
      set_mobile(from.mobile());
    }
    if (from.has_birthday()) {
      set_birthday(from.birthday());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_user_grade()) {
      set_user_grade(from.user_grade());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
    if (from.has_constellation()) {
      set_constellation(from.constellation());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_like()) {
      set_like(from.like());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_personal_desc()) {
      set_personal_desc(from.personal_desc());
    }
    if (from.has_real_name()) {
      set_real_name(from.real_name());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
    if (from.has_result()) {
      mutable_result()->::umsProtocol::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFriendInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFriendInfoResponse::CopyFrom(const GetFriendInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00020000) != 0x00020000) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void GetFriendInfoResponse::Swap(GetFriendInfoResponse* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(tt_number_, other->tt_number_);
    std::swap(user_name_, other->user_name_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(sex_, other->sex_);
    std::swap(mobile_, other->mobile_);
    std::swap(birthday_, other->birthday_);
    std::swap(email_, other->email_);
    std::swap(user_grade_, other->user_grade_);
    std::swap(age_, other->age_);
    std::swap(constellation_, other->constellation_);
    std::swap(sign_, other->sign_);
    std::swap(like_, other->like_);
    std::swap(city_, other->city_);
    std::swap(personal_desc_, other->personal_desc_);
    std::swap(real_name_, other->real_name_);
    std::swap(friend_id_, other->friend_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFriendInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFriendInfoResponse_descriptor_;
  metadata.reflection = GetFriendInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGroupListRequest::kUserIdFieldNumber;
#endif  // !_MSC_VER

GetGroupListRequest::GetGroupListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.GetGroupListRequest)
}

void GetGroupListRequest::InitAsDefaultInstance() {
}

GetGroupListRequest::GetGroupListRequest(const GetGroupListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.GetGroupListRequest)
}

void GetGroupListRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGroupListRequest::~GetGroupListRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.GetGroupListRequest)
  SharedDtor();
}

void GetGroupListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGroupListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGroupListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGroupListRequest_descriptor_;
}

const GetGroupListRequest& GetGroupListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

GetGroupListRequest* GetGroupListRequest::default_instance_ = NULL;

GetGroupListRequest* GetGroupListRequest::New() const {
  return new GetGroupListRequest;
}

void GetGroupListRequest::Clear() {
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGroupListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.GetGroupListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.GetGroupListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.GetGroupListRequest)
  return false;
#undef DO_
}

void GetGroupListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.GetGroupListRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.GetGroupListRequest)
}

::google::protobuf::uint8* GetGroupListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.GetGroupListRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.GetGroupListRequest)
  return target;
}

int GetGroupListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroupListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGroupListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGroupListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGroupListRequest::MergeFrom(const GetGroupListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGroupListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGroupListRequest::CopyFrom(const GetGroupListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetGroupListRequest::Swap(GetGroupListRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGroupListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGroupListRequest_descriptor_;
  metadata.reflection = GetGroupListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupListItem::kGroupIdFieldNumber;
const int GroupListItem::kGroupNameFieldNumber;
const int GroupListItem::kRemarkFieldNumber;
const int GroupListItem::kAvatarIdFieldNumber;
const int GroupListItem::kAvatarFieldNumber;
#endif  // !_MSC_VER

GroupListItem::GroupListItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.GroupListItem)
}

void GroupListItem::InitAsDefaultInstance() {
}

GroupListItem::GroupListItem(const GroupListItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.GroupListItem)
}

void GroupListItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  group_id_ = GOOGLE_ULONGLONG(0);
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_id_ = 0u;
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupListItem::~GroupListItem() {
  // @@protoc_insertion_point(destructor:umsProtocol.GroupListItem)
  SharedDtor();
}

void GroupListItem::SharedDtor() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete remark_;
  }
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (this != default_instance_) {
  }
}

void GroupListItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupListItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupListItem_descriptor_;
}

const GroupListItem& GroupListItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

GroupListItem* GroupListItem::default_instance_ = NULL;

GroupListItem* GroupListItem::New() const {
  return new GroupListItem;
}

void GroupListItem::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    group_id_ = GOOGLE_ULONGLONG(0);
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_name_->clear();
      }
    }
    if (has_remark()) {
      if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        remark_->clear();
      }
    }
    avatar_id_ = 0u;
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupListItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.GroupListItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_group_name;
        break;
      }

      // optional string group_name = 2;
      case 2: {
        if (tag == 18) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_name().data(), this->group_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_remark;
        break;
      }

      // optional string remark = 3;
      case 3: {
        if (tag == 26) {
         parse_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->remark().data(), this->remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "remark");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_avatar_id;
        break;
      }

      // optional uint32 avatar_id = 4;
      case 4: {
        if (tag == 32) {
         parse_avatar_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_id_)));
          set_has_avatar_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_avatar;
        break;
      }

      // optional string avatar = 5;
      case 5: {
        if (tag == 42) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->avatar().data(), this->avatar().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "avatar");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.GroupListItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.GroupListItem)
  return false;
#undef DO_
}

void GroupListItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.GroupListItem)
  // required uint64 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->group_id(), output);
  }

  // optional string group_name = 2;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->group_name(), output);
  }

  // optional string remark = 3;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->remark(), output);
  }

  // optional uint32 avatar_id = 4;
  if (has_avatar_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->avatar_id(), output);
  }

  // optional string avatar = 5;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->avatar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.GroupListItem)
}

::google::protobuf::uint8* GroupListItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.GroupListItem)
  // required uint64 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->group_id(), target);
  }

  // optional string group_name = 2;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->group_name(), target);
  }

  // optional string remark = 3;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->remark(), target);
  }

  // optional uint32 avatar_id = 4;
  if (has_avatar_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->avatar_id(), target);
  }

  // optional string avatar = 5;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->avatar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.GroupListItem)
  return target;
}

int GroupListItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional string group_name = 2;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // optional string remark = 3;
    if (has_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remark());
    }

    // optional uint32 avatar_id = 4;
    if (has_avatar_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatar_id());
    }

    // optional string avatar = 5;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupListItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupListItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupListItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupListItem::MergeFrom(const GroupListItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
    if (from.has_remark()) {
      set_remark(from.remark());
    }
    if (from.has_avatar_id()) {
      set_avatar_id(from.avatar_id());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupListItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupListItem::CopyFrom(const GroupListItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupListItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GroupListItem::Swap(GroupListItem* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(group_name_, other->group_name_);
    std::swap(remark_, other->remark_);
    std::swap(avatar_id_, other->avatar_id_);
    std::swap(avatar_, other->avatar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupListItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupListItem_descriptor_;
  metadata.reflection = GroupListItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGroupListResponse::kUserIdFieldNumber;
const int GetGroupListResponse::kGroupItemFieldNumber;
const int GetGroupListResponse::kResultFieldNumber;
#endif  // !_MSC_VER

GetGroupListResponse::GetGroupListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.GetGroupListResponse)
}

void GetGroupListResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::umsProtocol::Result*>(&::umsProtocol::Result::default_instance());
}

GetGroupListResponse::GetGroupListResponse(const GetGroupListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.GetGroupListResponse)
}

void GetGroupListResponse::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGroupListResponse::~GetGroupListResponse() {
  // @@protoc_insertion_point(destructor:umsProtocol.GetGroupListResponse)
  SharedDtor();
}

void GetGroupListResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void GetGroupListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGroupListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGroupListResponse_descriptor_;
}

const GetGroupListResponse& GetGroupListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

GetGroupListResponse* GetGroupListResponse::default_instance_ = NULL;

GetGroupListResponse* GetGroupListResponse::New() const {
  return new GetGroupListResponse;
}

void GetGroupListResponse::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_result()) {
      if (result_ != NULL) result_->::umsProtocol::Result::Clear();
    }
  }
  group_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGroupListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.GetGroupListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_group_item;
        break;
      }

      // repeated .umsProtocol.GroupListItem group_item = 2;
      case 2: {
        if (tag == 18) {
         parse_group_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_group_item;
        if (input->ExpectTag(26)) goto parse_result;
        break;
      }

      // required .umsProtocol.Result result = 3;
      case 3: {
        if (tag == 26) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.GetGroupListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.GetGroupListResponse)
  return false;
#undef DO_
}

void GetGroupListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.GetGroupListResponse)
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // repeated .umsProtocol.GroupListItem group_item = 2;
  for (int i = 0; i < this->group_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->group_item(i), output);
  }

  // required .umsProtocol.Result result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.GetGroupListResponse)
}

::google::protobuf::uint8* GetGroupListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.GetGroupListResponse)
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // repeated .umsProtocol.GroupListItem group_item = 2;
  for (int i = 0; i < this->group_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->group_item(i), target);
  }

  // required .umsProtocol.Result result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.GetGroupListResponse)
  return target;
}

int GetGroupListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required .umsProtocol.Result result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .umsProtocol.GroupListItem group_item = 2;
  total_size += 1 * this->group_item_size();
  for (int i = 0; i < this->group_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group_item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroupListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGroupListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGroupListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGroupListResponse::MergeFrom(const GetGroupListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_item_.MergeFrom(from.group_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_result()) {
      mutable_result()->::umsProtocol::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGroupListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGroupListResponse::CopyFrom(const GetGroupListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->group_item())) return false;
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void GetGroupListResponse::Swap(GetGroupListResponse* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    group_item_.Swap(&other->group_item_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGroupListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGroupListResponse_descriptor_;
  metadata.reflection = GetGroupListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateGroupRequest::kUserIdFieldNumber;
const int CreateGroupRequest::kGroupNameFieldNumber;
const int CreateGroupRequest::kGroupTypeFieldNumber;
const int CreateGroupRequest::kGroupIconFieldNumber;
const int CreateGroupRequest::kVerifyTypeFieldNumber;
const int CreateGroupRequest::kGroupIntroFieldNumber;
const int CreateGroupRequest::kGroupSignFieldNumber;
const int CreateGroupRequest::kSubTypeFieldNumber;
const int CreateGroupRequest::kAvatarIdFieldNumber;
#endif  // !_MSC_VER

CreateGroupRequest::CreateGroupRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.CreateGroupRequest)
}

void CreateGroupRequest::InitAsDefaultInstance() {
}

CreateGroupRequest::CreateGroupRequest(const CreateGroupRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.CreateGroupRequest)
}

void CreateGroupRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_type_ = 0u;
  group_icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verify_type_ = 0u;
  group_intro_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sub_type_ = 0u;
  avatar_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateGroupRequest::~CreateGroupRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.CreateGroupRequest)
  SharedDtor();
}

void CreateGroupRequest::SharedDtor() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (group_icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_icon_;
  }
  if (group_intro_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_intro_;
  }
  if (group_sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_sign_;
  }
  if (this != default_instance_) {
  }
}

void CreateGroupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateGroupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateGroupRequest_descriptor_;
}

const CreateGroupRequest& CreateGroupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

CreateGroupRequest* CreateGroupRequest::default_instance_ = NULL;

CreateGroupRequest* CreateGroupRequest::New() const {
  return new CreateGroupRequest;
}

void CreateGroupRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CreateGroupRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(group_type_, verify_type_);
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_name_->clear();
      }
    }
    if (has_group_icon()) {
      if (group_icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_icon_->clear();
      }
    }
    if (has_group_intro()) {
      if (group_intro_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_intro_->clear();
      }
    }
    if (has_group_sign()) {
      if (group_sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_sign_->clear();
      }
    }
    sub_type_ = 0u;
  }
  avatar_id_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.CreateGroupRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_group_name;
        break;
      }

      // required string group_name = 2;
      case 2: {
        if (tag == 18) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_name().data(), this->group_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_type;
        break;
      }

      // optional uint32 group_type = 3;
      case 3: {
        if (tag == 24) {
         parse_group_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_type_)));
          set_has_group_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_group_icon;
        break;
      }

      // optional string group_icon = 4;
      case 4: {
        if (tag == 34) {
         parse_group_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_icon().data(), this->group_icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group_icon");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_verify_type;
        break;
      }

      // optional uint32 verify_type = 5;
      case 5: {
        if (tag == 40) {
         parse_verify_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &verify_type_)));
          set_has_verify_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_group_intro;
        break;
      }

      // optional string group_intro = 6;
      case 6: {
        if (tag == 50) {
         parse_group_intro:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_intro()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_intro().data(), this->group_intro().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group_intro");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_group_sign;
        break;
      }

      // optional string group_sign = 7;
      case 7: {
        if (tag == 58) {
         parse_group_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_sign().data(), this->group_sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group_sign");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_sub_type;
        break;
      }

      // optional uint32 sub_type = 8;
      case 8: {
        if (tag == 64) {
         parse_sub_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sub_type_)));
          set_has_sub_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_avatar_id;
        break;
      }

      // optional uint32 avatar_id = 9;
      case 9: {
        if (tag == 72) {
         parse_avatar_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_id_)));
          set_has_avatar_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.CreateGroupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.CreateGroupRequest)
  return false;
#undef DO_
}

void CreateGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.CreateGroupRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required string group_name = 2;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->group_name(), output);
  }

  // optional uint32 group_type = 3;
  if (has_group_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->group_type(), output);
  }

  // optional string group_icon = 4;
  if (has_group_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_icon().data(), this->group_icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_icon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->group_icon(), output);
  }

  // optional uint32 verify_type = 5;
  if (has_verify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->verify_type(), output);
  }

  // optional string group_intro = 6;
  if (has_group_intro()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_intro().data(), this->group_intro().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_intro");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->group_intro(), output);
  }

  // optional string group_sign = 7;
  if (has_group_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_sign().data(), this->group_sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_sign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->group_sign(), output);
  }

  // optional uint32 sub_type = 8;
  if (has_sub_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->sub_type(), output);
  }

  // optional uint32 avatar_id = 9;
  if (has_avatar_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->avatar_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.CreateGroupRequest)
}

::google::protobuf::uint8* CreateGroupRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.CreateGroupRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required string group_name = 2;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->group_name(), target);
  }

  // optional uint32 group_type = 3;
  if (has_group_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->group_type(), target);
  }

  // optional string group_icon = 4;
  if (has_group_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_icon().data(), this->group_icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_icon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->group_icon(), target);
  }

  // optional uint32 verify_type = 5;
  if (has_verify_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->verify_type(), target);
  }

  // optional string group_intro = 6;
  if (has_group_intro()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_intro().data(), this->group_intro().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_intro");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->group_intro(), target);
  }

  // optional string group_sign = 7;
  if (has_group_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_sign().data(), this->group_sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_sign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->group_sign(), target);
  }

  // optional uint32 sub_type = 8;
  if (has_sub_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->sub_type(), target);
  }

  // optional uint32 avatar_id = 9;
  if (has_avatar_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->avatar_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.CreateGroupRequest)
  return target;
}

int CreateGroupRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required string group_name = 2;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // optional uint32 group_type = 3;
    if (has_group_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_type());
    }

    // optional string group_icon = 4;
    if (has_group_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_icon());
    }

    // optional uint32 verify_type = 5;
    if (has_verify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->verify_type());
    }

    // optional string group_intro = 6;
    if (has_group_intro()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_intro());
    }

    // optional string group_sign = 7;
    if (has_group_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_sign());
    }

    // optional uint32 sub_type = 8;
    if (has_sub_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sub_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 avatar_id = 9;
    if (has_avatar_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatar_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateGroupRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateGroupRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateGroupRequest::MergeFrom(const CreateGroupRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
    if (from.has_group_type()) {
      set_group_type(from.group_type());
    }
    if (from.has_group_icon()) {
      set_group_icon(from.group_icon());
    }
    if (from.has_verify_type()) {
      set_verify_type(from.verify_type());
    }
    if (from.has_group_intro()) {
      set_group_intro(from.group_intro());
    }
    if (from.has_group_sign()) {
      set_group_sign(from.group_sign());
    }
    if (from.has_sub_type()) {
      set_sub_type(from.sub_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_avatar_id()) {
      set_avatar_id(from.avatar_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateGroupRequest::CopyFrom(const CreateGroupRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGroupRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CreateGroupRequest::Swap(CreateGroupRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_name_, other->group_name_);
    std::swap(group_type_, other->group_type_);
    std::swap(group_icon_, other->group_icon_);
    std::swap(verify_type_, other->verify_type_);
    std::swap(group_intro_, other->group_intro_);
    std::swap(group_sign_, other->group_sign_);
    std::swap(sub_type_, other->sub_type_);
    std::swap(avatar_id_, other->avatar_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateGroupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateGroupRequest_descriptor_;
  metadata.reflection = CreateGroupRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateGroupResponse::kResultFieldNumber;
const int CreateGroupResponse::kUserIdFieldNumber;
const int CreateGroupResponse::kGroupIdFieldNumber;
const int CreateGroupResponse::kGorupNumberFieldNumber;
#endif  // !_MSC_VER

CreateGroupResponse::CreateGroupResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.CreateGroupResponse)
}

void CreateGroupResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::umsProtocol::Result*>(&::umsProtocol::Result::default_instance());
}

CreateGroupResponse::CreateGroupResponse(const CreateGroupResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.CreateGroupResponse)
}

void CreateGroupResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  gorup_number_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateGroupResponse::~CreateGroupResponse() {
  // @@protoc_insertion_point(destructor:umsProtocol.CreateGroupResponse)
  SharedDtor();
}

void CreateGroupResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void CreateGroupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateGroupResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateGroupResponse_descriptor_;
}

const CreateGroupResponse& CreateGroupResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

CreateGroupResponse* CreateGroupResponse::default_instance_ = NULL;

CreateGroupResponse* CreateGroupResponse::New() const {
  return new CreateGroupResponse;
}

void CreateGroupResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CreateGroupResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(user_id_, gorup_number_);
    if (has_result()) {
      if (result_ != NULL) result_->::umsProtocol::Result::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.CreateGroupResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .umsProtocol.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_id;
        break;
      }

      // optional uint64 group_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gorup_number;
        break;
      }

      // optional uint32 gorup_number = 4;
      case 4: {
        if (tag == 32) {
         parse_gorup_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gorup_number_)));
          set_has_gorup_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.CreateGroupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.CreateGroupResponse)
  return false;
#undef DO_
}

void CreateGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.CreateGroupResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional uint64 group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->group_id(), output);
  }

  // optional uint32 gorup_number = 4;
  if (has_gorup_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gorup_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.CreateGroupResponse)
}

::google::protobuf::uint8* CreateGroupResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.CreateGroupResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional uint64 group_id = 3;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->group_id(), target);
  }

  // optional uint32 gorup_number = 4;
  if (has_gorup_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gorup_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.CreateGroupResponse)
  return target;
}

int CreateGroupResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .umsProtocol.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 group_id = 3;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional uint32 gorup_number = 4;
    if (has_gorup_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gorup_number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateGroupResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateGroupResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateGroupResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateGroupResponse::MergeFrom(const CreateGroupResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::umsProtocol::Result::MergeFrom(from.result());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_gorup_number()) {
      set_gorup_number(from.gorup_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateGroupResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateGroupResponse::CopyFrom(const CreateGroupResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGroupResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void CreateGroupResponse::Swap(CreateGroupResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(gorup_number_, other->gorup_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateGroupResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateGroupResponse_descriptor_;
  metadata.reflection = CreateGroupResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinGroupRequest::kUserIdFieldNumber;
const int JoinGroupRequest::kGroupIdFieldNumber;
#endif  // !_MSC_VER

JoinGroupRequest::JoinGroupRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.JoinGroupRequest)
}

void JoinGroupRequest::InitAsDefaultInstance() {
}

JoinGroupRequest::JoinGroupRequest(const JoinGroupRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.JoinGroupRequest)
}

void JoinGroupRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinGroupRequest::~JoinGroupRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.JoinGroupRequest)
  SharedDtor();
}

void JoinGroupRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JoinGroupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinGroupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinGroupRequest_descriptor_;
}

const JoinGroupRequest& JoinGroupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

JoinGroupRequest* JoinGroupRequest::default_instance_ = NULL;

JoinGroupRequest* JoinGroupRequest::New() const {
  return new JoinGroupRequest;
}

void JoinGroupRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<JoinGroupRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, group_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.JoinGroupRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.JoinGroupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.JoinGroupRequest)
  return false;
#undef DO_
}

void JoinGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.JoinGroupRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.JoinGroupRequest)
}

::google::protobuf::uint8* JoinGroupRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.JoinGroupRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.JoinGroupRequest)
  return target;
}

int JoinGroupRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinGroupRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinGroupRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinGroupRequest::MergeFrom(const JoinGroupRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinGroupRequest::CopyFrom(const JoinGroupRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGroupRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void JoinGroupRequest::Swap(JoinGroupRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinGroupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinGroupRequest_descriptor_;
  metadata.reflection = JoinGroupRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinGroupResponse::kUserIdFieldNumber;
const int JoinGroupResponse::kGroupIdFieldNumber;
const int JoinGroupResponse::kResultFieldNumber;
#endif  // !_MSC_VER

JoinGroupResponse::JoinGroupResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.JoinGroupResponse)
}

void JoinGroupResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::umsProtocol::Result*>(&::umsProtocol::Result::default_instance());
}

JoinGroupResponse::JoinGroupResponse(const JoinGroupResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.JoinGroupResponse)
}

void JoinGroupResponse::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinGroupResponse::~JoinGroupResponse() {
  // @@protoc_insertion_point(destructor:umsProtocol.JoinGroupResponse)
  SharedDtor();
}

void JoinGroupResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void JoinGroupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinGroupResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinGroupResponse_descriptor_;
}

const JoinGroupResponse& JoinGroupResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

JoinGroupResponse* JoinGroupResponse::default_instance_ = NULL;

JoinGroupResponse* JoinGroupResponse::New() const {
  return new JoinGroupResponse;
}

void JoinGroupResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<JoinGroupResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(user_id_, group_id_);
    if (has_result()) {
      if (result_ != NULL) result_->::umsProtocol::Result::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.JoinGroupResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // optional uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_result;
        break;
      }

      // required .umsProtocol.Result result = 4;
      case 4: {
        if (tag == 34) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.JoinGroupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.JoinGroupResponse)
  return false;
#undef DO_
}

void JoinGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.JoinGroupResponse)
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  // required .umsProtocol.Result result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.JoinGroupResponse)
}

::google::protobuf::uint8* JoinGroupResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.JoinGroupResponse)
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  // required .umsProtocol.Result result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.JoinGroupResponse)
  return target;
}

int JoinGroupResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // required .umsProtocol.Result result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinGroupResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinGroupResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinGroupResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinGroupResponse::MergeFrom(const JoinGroupResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_result()) {
      mutable_result()->::umsProtocol::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinGroupResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinGroupResponse::CopyFrom(const JoinGroupResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGroupResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void JoinGroupResponse::Swap(JoinGroupResponse* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinGroupResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinGroupResponse_descriptor_;
  metadata.reflection = JoinGroupResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExitGroupRequest::kUserIdFieldNumber;
const int ExitGroupRequest::kGroupIdFieldNumber;
#endif  // !_MSC_VER

ExitGroupRequest::ExitGroupRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.ExitGroupRequest)
}

void ExitGroupRequest::InitAsDefaultInstance() {
}

ExitGroupRequest::ExitGroupRequest(const ExitGroupRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.ExitGroupRequest)
}

void ExitGroupRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExitGroupRequest::~ExitGroupRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.ExitGroupRequest)
  SharedDtor();
}

void ExitGroupRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExitGroupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExitGroupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExitGroupRequest_descriptor_;
}

const ExitGroupRequest& ExitGroupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

ExitGroupRequest* ExitGroupRequest::default_instance_ = NULL;

ExitGroupRequest* ExitGroupRequest::New() const {
  return new ExitGroupRequest;
}

void ExitGroupRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ExitGroupRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, group_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExitGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.ExitGroupRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.ExitGroupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.ExitGroupRequest)
  return false;
#undef DO_
}

void ExitGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.ExitGroupRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.ExitGroupRequest)
}

::google::protobuf::uint8* ExitGroupRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.ExitGroupRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.ExitGroupRequest)
  return target;
}

int ExitGroupRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExitGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExitGroupRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExitGroupRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExitGroupRequest::MergeFrom(const ExitGroupRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExitGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExitGroupRequest::CopyFrom(const ExitGroupRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExitGroupRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ExitGroupRequest::Swap(ExitGroupRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExitGroupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExitGroupRequest_descriptor_;
  metadata.reflection = ExitGroupRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExitGroupResponse::kResultFieldNumber;
#endif  // !_MSC_VER

ExitGroupResponse::ExitGroupResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.ExitGroupResponse)
}

void ExitGroupResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::umsProtocol::Result*>(&::umsProtocol::Result::default_instance());
}

ExitGroupResponse::ExitGroupResponse(const ExitGroupResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.ExitGroupResponse)
}

void ExitGroupResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExitGroupResponse::~ExitGroupResponse() {
  // @@protoc_insertion_point(destructor:umsProtocol.ExitGroupResponse)
  SharedDtor();
}

void ExitGroupResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void ExitGroupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExitGroupResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExitGroupResponse_descriptor_;
}

const ExitGroupResponse& ExitGroupResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

ExitGroupResponse* ExitGroupResponse::default_instance_ = NULL;

ExitGroupResponse* ExitGroupResponse::New() const {
  return new ExitGroupResponse;
}

void ExitGroupResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::umsProtocol::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExitGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.ExitGroupResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .umsProtocol.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.ExitGroupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.ExitGroupResponse)
  return false;
#undef DO_
}

void ExitGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.ExitGroupResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.ExitGroupResponse)
}

::google::protobuf::uint8* ExitGroupResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.ExitGroupResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.ExitGroupResponse)
  return target;
}

int ExitGroupResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .umsProtocol.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExitGroupResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExitGroupResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExitGroupResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExitGroupResponse::MergeFrom(const ExitGroupResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::umsProtocol::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExitGroupResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExitGroupResponse::CopyFrom(const ExitGroupResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExitGroupResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void ExitGroupResponse::Swap(ExitGroupResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExitGroupResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExitGroupResponse_descriptor_;
  metadata.reflection = ExitGroupResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGroupUserListRequest::kUserIdFieldNumber;
const int GetGroupUserListRequest::kGroupIdFieldNumber;
#endif  // !_MSC_VER

GetGroupUserListRequest::GetGroupUserListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.GetGroupUserListRequest)
}

void GetGroupUserListRequest::InitAsDefaultInstance() {
}

GetGroupUserListRequest::GetGroupUserListRequest(const GetGroupUserListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.GetGroupUserListRequest)
}

void GetGroupUserListRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGroupUserListRequest::~GetGroupUserListRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.GetGroupUserListRequest)
  SharedDtor();
}

void GetGroupUserListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGroupUserListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGroupUserListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGroupUserListRequest_descriptor_;
}

const GetGroupUserListRequest& GetGroupUserListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

GetGroupUserListRequest* GetGroupUserListRequest::default_instance_ = NULL;

GetGroupUserListRequest* GetGroupUserListRequest::New() const {
  return new GetGroupUserListRequest;
}

void GetGroupUserListRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetGroupUserListRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, group_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGroupUserListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.GetGroupUserListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.GetGroupUserListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.GetGroupUserListRequest)
  return false;
#undef DO_
}

void GetGroupUserListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.GetGroupUserListRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.GetGroupUserListRequest)
}

::google::protobuf::uint8* GetGroupUserListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.GetGroupUserListRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.GetGroupUserListRequest)
  return target;
}

int GetGroupUserListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroupUserListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGroupUserListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGroupUserListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGroupUserListRequest::MergeFrom(const GetGroupUserListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGroupUserListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGroupUserListRequest::CopyFrom(const GetGroupUserListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupUserListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetGroupUserListRequest::Swap(GetGroupUserListRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGroupUserListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGroupUserListRequest_descriptor_;
  metadata.reflection = GetGroupUserListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGroupUserListResponse::kGroupIdFieldNumber;
const int GetGroupUserListResponse::kSumNumFieldNumber;
const int GetGroupUserListResponse::kGroupUserIdFieldNumber;
const int GetGroupUserListResponse::kResultFieldNumber;
#endif  // !_MSC_VER

GetGroupUserListResponse::GetGroupUserListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.GetGroupUserListResponse)
}

void GetGroupUserListResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::umsProtocol::Result*>(&::umsProtocol::Result::default_instance());
}

GetGroupUserListResponse::GetGroupUserListResponse(const GetGroupUserListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.GetGroupUserListResponse)
}

void GetGroupUserListResponse::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = GOOGLE_ULONGLONG(0);
  sum_num_ = 0u;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGroupUserListResponse::~GetGroupUserListResponse() {
  // @@protoc_insertion_point(destructor:umsProtocol.GetGroupUserListResponse)
  SharedDtor();
}

void GetGroupUserListResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void GetGroupUserListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGroupUserListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGroupUserListResponse_descriptor_;
}

const GetGroupUserListResponse& GetGroupUserListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

GetGroupUserListResponse* GetGroupUserListResponse::default_instance_ = NULL;

GetGroupUserListResponse* GetGroupUserListResponse::New() const {
  return new GetGroupUserListResponse;
}

void GetGroupUserListResponse::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    group_id_ = GOOGLE_ULONGLONG(0);
    sum_num_ = 0u;
    if (has_result()) {
      if (result_ != NULL) result_->::umsProtocol::Result::Clear();
    }
  }
  group_user_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGroupUserListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.GetGroupUserListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sum_num;
        break;
      }

      // optional uint32 sum_num = 2;
      case 2: {
        if (tag == 16) {
         parse_sum_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sum_num_)));
          set_has_sum_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_user_id;
        break;
      }

      // repeated uint64 group_user_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_group_user_id())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_group_user_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_user_id;
        if (input->ExpectTag(34)) goto parse_result;
        break;
      }

      // required .umsProtocol.Result result = 4;
      case 4: {
        if (tag == 34) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.GetGroupUserListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.GetGroupUserListResponse)
  return false;
#undef DO_
}

void GetGroupUserListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.GetGroupUserListResponse)
  // optional uint64 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->group_id(), output);
  }

  // optional uint32 sum_num = 2;
  if (has_sum_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sum_num(), output);
  }

  // repeated uint64 group_user_id = 3;
  for (int i = 0; i < this->group_user_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->group_user_id(i), output);
  }

  // required .umsProtocol.Result result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.GetGroupUserListResponse)
}

::google::protobuf::uint8* GetGroupUserListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.GetGroupUserListResponse)
  // optional uint64 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->group_id(), target);
  }

  // optional uint32 sum_num = 2;
  if (has_sum_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sum_num(), target);
  }

  // repeated uint64 group_user_id = 3;
  for (int i = 0; i < this->group_user_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->group_user_id(i), target);
  }

  // required .umsProtocol.Result result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.GetGroupUserListResponse)
  return target;
}

int GetGroupUserListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional uint32 sum_num = 2;
    if (has_sum_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sum_num());
    }

    // required .umsProtocol.Result result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated uint64 group_user_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->group_user_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->group_user_id(i));
    }
    total_size += 1 * this->group_user_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroupUserListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGroupUserListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGroupUserListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGroupUserListResponse::MergeFrom(const GetGroupUserListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_user_id_.MergeFrom(from.group_user_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_sum_num()) {
      set_sum_num(from.sum_num());
    }
    if (from.has_result()) {
      mutable_result()->::umsProtocol::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGroupUserListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGroupUserListResponse::CopyFrom(const GetGroupUserListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupUserListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void GetGroupUserListResponse::Swap(GetGroupUserListResponse* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(sum_num_, other->sum_num_);
    group_user_id_.Swap(&other->group_user_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGroupUserListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGroupUserListResponse_descriptor_;
  metadata.reflection = GetGroupUserListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchGroupUserListRequest::kGroupIdFieldNumber;
const int SearchGroupUserListRequest::kSearchStringFieldNumber;
#endif  // !_MSC_VER

SearchGroupUserListRequest::SearchGroupUserListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.SearchGroupUserListRequest)
}

void SearchGroupUserListRequest::InitAsDefaultInstance() {
}

SearchGroupUserListRequest::SearchGroupUserListRequest(const SearchGroupUserListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.SearchGroupUserListRequest)
}

void SearchGroupUserListRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  group_id_ = GOOGLE_ULONGLONG(0);
  search_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchGroupUserListRequest::~SearchGroupUserListRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.SearchGroupUserListRequest)
  SharedDtor();
}

void SearchGroupUserListRequest::SharedDtor() {
  if (search_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete search_string_;
  }
  if (this != default_instance_) {
  }
}

void SearchGroupUserListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchGroupUserListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchGroupUserListRequest_descriptor_;
}

const SearchGroupUserListRequest& SearchGroupUserListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

SearchGroupUserListRequest* SearchGroupUserListRequest::default_instance_ = NULL;

SearchGroupUserListRequest* SearchGroupUserListRequest::New() const {
  return new SearchGroupUserListRequest;
}

void SearchGroupUserListRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    group_id_ = GOOGLE_ULONGLONG(0);
    if (has_search_string()) {
      if (search_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        search_string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchGroupUserListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.SearchGroupUserListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_search_string;
        break;
      }

      // required string search_string = 2;
      case 2: {
        if (tag == 18) {
         parse_search_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->search_string().data(), this->search_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "search_string");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.SearchGroupUserListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.SearchGroupUserListRequest)
  return false;
#undef DO_
}

void SearchGroupUserListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.SearchGroupUserListRequest)
  // required uint64 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->group_id(), output);
  }

  // required string search_string = 2;
  if (has_search_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_string().data(), this->search_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "search_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->search_string(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.SearchGroupUserListRequest)
}

::google::protobuf::uint8* SearchGroupUserListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.SearchGroupUserListRequest)
  // required uint64 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->group_id(), target);
  }

  // required string search_string = 2;
  if (has_search_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_string().data(), this->search_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "search_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->search_string(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.SearchGroupUserListRequest)
  return target;
}

int SearchGroupUserListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // required string search_string = 2;
    if (has_search_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search_string());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchGroupUserListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchGroupUserListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchGroupUserListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchGroupUserListRequest::MergeFrom(const SearchGroupUserListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_search_string()) {
      set_search_string(from.search_string());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchGroupUserListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchGroupUserListRequest::CopyFrom(const SearchGroupUserListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchGroupUserListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SearchGroupUserListRequest::Swap(SearchGroupUserListRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(search_string_, other->search_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchGroupUserListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchGroupUserListRequest_descriptor_;
  metadata.reflection = SearchGroupUserListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupUserListItem::kUserIdFieldNumber;
const int GroupUserListItem::kNickNameFieldNumber;
const int GroupUserListItem::kAvatarIdFieldNumber;
const int GroupUserListItem::kAvatarFieldNumber;
const int GroupUserListItem::kRoleFieldNumber;
#endif  // !_MSC_VER

GroupUserListItem::GroupUserListItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.GroupUserListItem)
}

void GroupUserListItem::InitAsDefaultInstance() {
}

GroupUserListItem::GroupUserListItem(const GroupUserListItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.GroupUserListItem)
}

void GroupUserListItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_id_ = 0u;
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupUserListItem::~GroupUserListItem() {
  // @@protoc_insertion_point(destructor:umsProtocol.GroupUserListItem)
  SharedDtor();
}

void GroupUserListItem::SharedDtor() {
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_name_;
  }
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (this != default_instance_) {
  }
}

void GroupUserListItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupUserListItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupUserListItem_descriptor_;
}

const GroupUserListItem& GroupUserListItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

GroupUserListItem* GroupUserListItem::default_instance_ = NULL;

GroupUserListItem* GroupUserListItem::New() const {
  return new GroupUserListItem;
}

void GroupUserListItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GroupUserListItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(avatar_id_, role_);
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nick_name_->clear();
      }
    }
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupUserListItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.GroupUserListItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 2;
      case 2: {
        if (tag == 18) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nick_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_avatar_id;
        break;
      }

      // optional uint32 avatar_id = 3;
      case 3: {
        if (tag == 24) {
         parse_avatar_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_id_)));
          set_has_avatar_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_avatar;
        break;
      }

      // optional string avatar = 4;
      case 4: {
        if (tag == 34) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->avatar().data(), this->avatar().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "avatar");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_role;
        break;
      }

      // optional uint32 role = 5;
      case 5: {
        if (tag == 40) {
         parse_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_)));
          set_has_role();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.GroupUserListItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.GroupUserListItem)
  return false;
#undef DO_
}

void GroupUserListItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.GroupUserListItem)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nick_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nick_name(), output);
  }

  // optional uint32 avatar_id = 3;
  if (has_avatar_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->avatar_id(), output);
  }

  // optional string avatar = 4;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->avatar(), output);
  }

  // optional uint32 role = 5;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->role(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.GroupUserListItem)
}

::google::protobuf::uint8* GroupUserListItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.GroupUserListItem)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nick_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nick_name(), target);
  }

  // optional uint32 avatar_id = 3;
  if (has_avatar_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->avatar_id(), target);
  }

  // optional string avatar = 4;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->avatar(), target);
  }

  // optional uint32 role = 5;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->role(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.GroupUserListItem)
  return target;
}

int GroupUserListItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string nick_name = 2;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

    // optional uint32 avatar_id = 3;
    if (has_avatar_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatar_id());
    }

    // optional string avatar = 4;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar());
    }

    // optional uint32 role = 5;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupUserListItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupUserListItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupUserListItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupUserListItem::MergeFrom(const GroupUserListItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_avatar_id()) {
      set_avatar_id(from.avatar_id());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupUserListItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupUserListItem::CopyFrom(const GroupUserListItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupUserListItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GroupUserListItem::Swap(GroupUserListItem* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(avatar_id_, other->avatar_id_);
    std::swap(avatar_, other->avatar_);
    std::swap(role_, other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupUserListItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupUserListItem_descriptor_;
  metadata.reflection = GroupUserListItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchGroupUserListResponse::kGroupIdFieldNumber;
const int SearchGroupUserListResponse::kListItemFieldNumber;
const int SearchGroupUserListResponse::kResultFieldNumber;
#endif  // !_MSC_VER

SearchGroupUserListResponse::SearchGroupUserListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.SearchGroupUserListResponse)
}

void SearchGroupUserListResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::umsProtocol::Result*>(&::umsProtocol::Result::default_instance());
}

SearchGroupUserListResponse::SearchGroupUserListResponse(const SearchGroupUserListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.SearchGroupUserListResponse)
}

void SearchGroupUserListResponse::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = GOOGLE_ULONGLONG(0);
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchGroupUserListResponse::~SearchGroupUserListResponse() {
  // @@protoc_insertion_point(destructor:umsProtocol.SearchGroupUserListResponse)
  SharedDtor();
}

void SearchGroupUserListResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void SearchGroupUserListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchGroupUserListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchGroupUserListResponse_descriptor_;
}

const SearchGroupUserListResponse& SearchGroupUserListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

SearchGroupUserListResponse* SearchGroupUserListResponse::default_instance_ = NULL;

SearchGroupUserListResponse* SearchGroupUserListResponse::New() const {
  return new SearchGroupUserListResponse;
}

void SearchGroupUserListResponse::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    group_id_ = GOOGLE_ULONGLONG(0);
    if (has_result()) {
      if (result_ != NULL) result_->::umsProtocol::Result::Clear();
    }
  }
  list_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchGroupUserListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.SearchGroupUserListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_list_item;
        break;
      }

      // repeated .umsProtocol.GroupUserListItem list_item = 2;
      case 2: {
        if (tag == 18) {
         parse_list_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_list_item;
        if (input->ExpectTag(26)) goto parse_result;
        break;
      }

      // required .umsProtocol.Result result = 3;
      case 3: {
        if (tag == 26) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.SearchGroupUserListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.SearchGroupUserListResponse)
  return false;
#undef DO_
}

void SearchGroupUserListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.SearchGroupUserListResponse)
  // optional uint64 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->group_id(), output);
  }

  // repeated .umsProtocol.GroupUserListItem list_item = 2;
  for (int i = 0; i < this->list_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list_item(i), output);
  }

  // required .umsProtocol.Result result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.SearchGroupUserListResponse)
}

::google::protobuf::uint8* SearchGroupUserListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.SearchGroupUserListResponse)
  // optional uint64 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->group_id(), target);
  }

  // repeated .umsProtocol.GroupUserListItem list_item = 2;
  for (int i = 0; i < this->list_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list_item(i), target);
  }

  // required .umsProtocol.Result result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.SearchGroupUserListResponse)
  return target;
}

int SearchGroupUserListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // required .umsProtocol.Result result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .umsProtocol.GroupUserListItem list_item = 2;
  total_size += 1 * this->list_item_size();
  for (int i = 0; i < this->list_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchGroupUserListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchGroupUserListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchGroupUserListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchGroupUserListResponse::MergeFrom(const SearchGroupUserListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_item_.MergeFrom(from.list_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_result()) {
      mutable_result()->::umsProtocol::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchGroupUserListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchGroupUserListResponse::CopyFrom(const SearchGroupUserListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchGroupUserListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->list_item())) return false;
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void SearchGroupUserListResponse::Swap(SearchGroupUserListResponse* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    list_item_.Swap(&other->list_item_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchGroupUserListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchGroupUserListResponse_descriptor_;
  metadata.reflection = SearchGroupUserListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddFriendRequest::kUserIdFieldNumber;
const int AddFriendRequest::kFriendIdFieldNumber;
#endif  // !_MSC_VER

AddFriendRequest::AddFriendRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.AddFriendRequest)
}

void AddFriendRequest::InitAsDefaultInstance() {
}

AddFriendRequest::AddFriendRequest(const AddFriendRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.AddFriendRequest)
}

void AddFriendRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  friend_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddFriendRequest::~AddFriendRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.AddFriendRequest)
  SharedDtor();
}

void AddFriendRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddFriendRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddFriendRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddFriendRequest_descriptor_;
}

const AddFriendRequest& AddFriendRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

AddFriendRequest* AddFriendRequest::default_instance_ = NULL;

AddFriendRequest* AddFriendRequest::New() const {
  return new AddFriendRequest;
}

void AddFriendRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AddFriendRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, friend_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddFriendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.AddFriendRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_friend_id;
        break;
      }

      // required uint64 friend_id = 2;
      case 2: {
        if (tag == 16) {
         parse_friend_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend_id_)));
          set_has_friend_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.AddFriendRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.AddFriendRequest)
  return false;
#undef DO_
}

void AddFriendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.AddFriendRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 friend_id = 2;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->friend_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.AddFriendRequest)
}

::google::protobuf::uint8* AddFriendRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.AddFriendRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 friend_id = 2;
  if (has_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->friend_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.AddFriendRequest)
  return target;
}

int AddFriendRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 friend_id = 2;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friend_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFriendRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddFriendRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddFriendRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddFriendRequest::MergeFrom(const AddFriendRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddFriendRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFriendRequest::CopyFrom(const AddFriendRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFriendRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AddFriendRequest::Swap(AddFriendRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(friend_id_, other->friend_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddFriendRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddFriendRequest_descriptor_;
  metadata.reflection = AddFriendRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddFriendResponse::kResultFieldNumber;
#endif  // !_MSC_VER

AddFriendResponse::AddFriendResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.AddFriendResponse)
}

void AddFriendResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::umsProtocol::Result*>(&::umsProtocol::Result::default_instance());
}

AddFriendResponse::AddFriendResponse(const AddFriendResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.AddFriendResponse)
}

void AddFriendResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddFriendResponse::~AddFriendResponse() {
  // @@protoc_insertion_point(destructor:umsProtocol.AddFriendResponse)
  SharedDtor();
}

void AddFriendResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void AddFriendResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddFriendResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddFriendResponse_descriptor_;
}

const AddFriendResponse& AddFriendResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

AddFriendResponse* AddFriendResponse::default_instance_ = NULL;

AddFriendResponse* AddFriendResponse::New() const {
  return new AddFriendResponse;
}

void AddFriendResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::umsProtocol::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddFriendResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.AddFriendResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .umsProtocol.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.AddFriendResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.AddFriendResponse)
  return false;
#undef DO_
}

void AddFriendResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.AddFriendResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.AddFriendResponse)
}

::google::protobuf::uint8* AddFriendResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.AddFriendResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.AddFriendResponse)
  return target;
}

int AddFriendResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .umsProtocol.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFriendResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddFriendResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddFriendResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddFriendResponse::MergeFrom(const AddFriendResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::umsProtocol::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddFriendResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFriendResponse::CopyFrom(const AddFriendResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFriendResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void AddFriendResponse::Swap(AddFriendResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddFriendResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddFriendResponse_descriptor_;
  metadata.reflection = AddFriendResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFriendVerifyInfoRequest::kUserIdFieldNumber;
#endif  // !_MSC_VER

GetFriendVerifyInfoRequest::GetFriendVerifyInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.GetFriendVerifyInfoRequest)
}

void GetFriendVerifyInfoRequest::InitAsDefaultInstance() {
}

GetFriendVerifyInfoRequest::GetFriendVerifyInfoRequest(const GetFriendVerifyInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.GetFriendVerifyInfoRequest)
}

void GetFriendVerifyInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFriendVerifyInfoRequest::~GetFriendVerifyInfoRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.GetFriendVerifyInfoRequest)
  SharedDtor();
}

void GetFriendVerifyInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetFriendVerifyInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFriendVerifyInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFriendVerifyInfoRequest_descriptor_;
}

const GetFriendVerifyInfoRequest& GetFriendVerifyInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

GetFriendVerifyInfoRequest* GetFriendVerifyInfoRequest::default_instance_ = NULL;

GetFriendVerifyInfoRequest* GetFriendVerifyInfoRequest::New() const {
  return new GetFriendVerifyInfoRequest;
}

void GetFriendVerifyInfoRequest::Clear() {
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFriendVerifyInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.GetFriendVerifyInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.GetFriendVerifyInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.GetFriendVerifyInfoRequest)
  return false;
#undef DO_
}

void GetFriendVerifyInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.GetFriendVerifyInfoRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.GetFriendVerifyInfoRequest)
}

::google::protobuf::uint8* GetFriendVerifyInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.GetFriendVerifyInfoRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.GetFriendVerifyInfoRequest)
  return target;
}

int GetFriendVerifyInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFriendVerifyInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFriendVerifyInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFriendVerifyInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFriendVerifyInfoRequest::MergeFrom(const GetFriendVerifyInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFriendVerifyInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFriendVerifyInfoRequest::CopyFrom(const GetFriendVerifyInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendVerifyInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetFriendVerifyInfoRequest::Swap(GetFriendVerifyInfoRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFriendVerifyInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFriendVerifyInfoRequest_descriptor_;
  metadata.reflection = GetFriendVerifyInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFriendVerifyInfoResponse::kVerifyTypeFieldNumber;
const int GetFriendVerifyInfoResponse::kQuestionTypeFieldNumber;
const int GetFriendVerifyInfoResponse::kAnswerFieldNumber;
const int GetFriendVerifyInfoResponse::kResultFieldNumber;
#endif  // !_MSC_VER

GetFriendVerifyInfoResponse::GetFriendVerifyInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.GetFriendVerifyInfoResponse)
}

void GetFriendVerifyInfoResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::umsProtocol::Result*>(&::umsProtocol::Result::default_instance());
}

GetFriendVerifyInfoResponse::GetFriendVerifyInfoResponse(const GetFriendVerifyInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.GetFriendVerifyInfoResponse)
}

void GetFriendVerifyInfoResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  verify_type_ = 0u;
  question_type_ = 0u;
  answer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFriendVerifyInfoResponse::~GetFriendVerifyInfoResponse() {
  // @@protoc_insertion_point(destructor:umsProtocol.GetFriendVerifyInfoResponse)
  SharedDtor();
}

void GetFriendVerifyInfoResponse::SharedDtor() {
  if (answer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete answer_;
  }
  if (this != default_instance_) {
    delete result_;
  }
}

void GetFriendVerifyInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFriendVerifyInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFriendVerifyInfoResponse_descriptor_;
}

const GetFriendVerifyInfoResponse& GetFriendVerifyInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

GetFriendVerifyInfoResponse* GetFriendVerifyInfoResponse::default_instance_ = NULL;

GetFriendVerifyInfoResponse* GetFriendVerifyInfoResponse::New() const {
  return new GetFriendVerifyInfoResponse;
}

void GetFriendVerifyInfoResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetFriendVerifyInfoResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(verify_type_, question_type_);
    if (has_answer()) {
      if (answer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        answer_->clear();
      }
    }
    if (has_result()) {
      if (result_ != NULL) result_->::umsProtocol::Result::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFriendVerifyInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.GetFriendVerifyInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 verify_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &verify_type_)));
          set_has_verify_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_question_type;
        break;
      }

      // optional uint32 question_type = 2;
      case 2: {
        if (tag == 16) {
         parse_question_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &question_type_)));
          set_has_question_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_answer;
        break;
      }

      // optional string answer = 3;
      case 3: {
        if (tag == 26) {
         parse_answer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_answer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->answer().data(), this->answer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "answer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_result;
        break;
      }

      // required .umsProtocol.Result result = 4;
      case 4: {
        if (tag == 34) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.GetFriendVerifyInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.GetFriendVerifyInfoResponse)
  return false;
#undef DO_
}

void GetFriendVerifyInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.GetFriendVerifyInfoResponse)
  // optional uint32 verify_type = 1;
  if (has_verify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->verify_type(), output);
  }

  // optional uint32 question_type = 2;
  if (has_question_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->question_type(), output);
  }

  // optional string answer = 3;
  if (has_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "answer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->answer(), output);
  }

  // required .umsProtocol.Result result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.GetFriendVerifyInfoResponse)
}

::google::protobuf::uint8* GetFriendVerifyInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.GetFriendVerifyInfoResponse)
  // optional uint32 verify_type = 1;
  if (has_verify_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->verify_type(), target);
  }

  // optional uint32 question_type = 2;
  if (has_question_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->question_type(), target);
  }

  // optional string answer = 3;
  if (has_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "answer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->answer(), target);
  }

  // required .umsProtocol.Result result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.GetFriendVerifyInfoResponse)
  return target;
}

int GetFriendVerifyInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 verify_type = 1;
    if (has_verify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->verify_type());
    }

    // optional uint32 question_type = 2;
    if (has_question_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->question_type());
    }

    // optional string answer = 3;
    if (has_answer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->answer());
    }

    // required .umsProtocol.Result result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFriendVerifyInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFriendVerifyInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFriendVerifyInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFriendVerifyInfoResponse::MergeFrom(const GetFriendVerifyInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_verify_type()) {
      set_verify_type(from.verify_type());
    }
    if (from.has_question_type()) {
      set_question_type(from.question_type());
    }
    if (from.has_answer()) {
      set_answer(from.answer());
    }
    if (from.has_result()) {
      mutable_result()->::umsProtocol::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFriendVerifyInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFriendVerifyInfoResponse::CopyFrom(const GetFriendVerifyInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendVerifyInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void GetFriendVerifyInfoResponse::Swap(GetFriendVerifyInfoResponse* other) {
  if (other != this) {
    std::swap(verify_type_, other->verify_type_);
    std::swap(question_type_, other->question_type_);
    std::swap(answer_, other->answer_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFriendVerifyInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFriendVerifyInfoResponse_descriptor_;
  metadata.reflection = GetFriendVerifyInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteFriendRequest::kUserIdFieldNumber;
const int DeleteFriendRequest::kFriendIdFieldNumber;
#endif  // !_MSC_VER

DeleteFriendRequest::DeleteFriendRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.DeleteFriendRequest)
}

void DeleteFriendRequest::InitAsDefaultInstance() {
}

DeleteFriendRequest::DeleteFriendRequest(const DeleteFriendRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.DeleteFriendRequest)
}

void DeleteFriendRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  friend_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteFriendRequest::~DeleteFriendRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.DeleteFriendRequest)
  SharedDtor();
}

void DeleteFriendRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteFriendRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteFriendRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteFriendRequest_descriptor_;
}

const DeleteFriendRequest& DeleteFriendRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

DeleteFriendRequest* DeleteFriendRequest::default_instance_ = NULL;

DeleteFriendRequest* DeleteFriendRequest::New() const {
  return new DeleteFriendRequest;
}

void DeleteFriendRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DeleteFriendRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, friend_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteFriendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.DeleteFriendRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_friend_id;
        break;
      }

      // required uint64 friend_id = 2;
      case 2: {
        if (tag == 16) {
         parse_friend_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend_id_)));
          set_has_friend_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.DeleteFriendRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.DeleteFriendRequest)
  return false;
#undef DO_
}

void DeleteFriendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.DeleteFriendRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 friend_id = 2;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->friend_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.DeleteFriendRequest)
}

::google::protobuf::uint8* DeleteFriendRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.DeleteFriendRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 friend_id = 2;
  if (has_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->friend_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.DeleteFriendRequest)
  return target;
}

int DeleteFriendRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 friend_id = 2;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friend_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteFriendRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteFriendRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteFriendRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteFriendRequest::MergeFrom(const DeleteFriendRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteFriendRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteFriendRequest::CopyFrom(const DeleteFriendRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteFriendRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DeleteFriendRequest::Swap(DeleteFriendRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(friend_id_, other->friend_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteFriendRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteFriendRequest_descriptor_;
  metadata.reflection = DeleteFriendRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteFriendResponse::kResultFieldNumber;
#endif  // !_MSC_VER

DeleteFriendResponse::DeleteFriendResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.DeleteFriendResponse)
}

void DeleteFriendResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::umsProtocol::Result*>(&::umsProtocol::Result::default_instance());
}

DeleteFriendResponse::DeleteFriendResponse(const DeleteFriendResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.DeleteFriendResponse)
}

void DeleteFriendResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteFriendResponse::~DeleteFriendResponse() {
  // @@protoc_insertion_point(destructor:umsProtocol.DeleteFriendResponse)
  SharedDtor();
}

void DeleteFriendResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void DeleteFriendResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteFriendResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteFriendResponse_descriptor_;
}

const DeleteFriendResponse& DeleteFriendResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

DeleteFriendResponse* DeleteFriendResponse::default_instance_ = NULL;

DeleteFriendResponse* DeleteFriendResponse::New() const {
  return new DeleteFriendResponse;
}

void DeleteFriendResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::umsProtocol::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteFriendResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.DeleteFriendResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .umsProtocol.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.DeleteFriendResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.DeleteFriendResponse)
  return false;
#undef DO_
}

void DeleteFriendResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.DeleteFriendResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.DeleteFriendResponse)
}

::google::protobuf::uint8* DeleteFriendResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.DeleteFriendResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.DeleteFriendResponse)
  return target;
}

int DeleteFriendResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .umsProtocol.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteFriendResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteFriendResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteFriendResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteFriendResponse::MergeFrom(const DeleteFriendResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::umsProtocol::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteFriendResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteFriendResponse::CopyFrom(const DeleteFriendResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteFriendResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void DeleteFriendResponse::Swap(DeleteFriendResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteFriendResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteFriendResponse_descriptor_;
  metadata.reflection = DeleteFriendResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateFriendBranchRequest::kUserIdFieldNumber;
const int UpdateFriendBranchRequest::kFriendIdFieldNumber;
const int UpdateFriendBranchRequest::kBranchIdFieldNumber;
#endif  // !_MSC_VER

UpdateFriendBranchRequest::UpdateFriendBranchRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.UpdateFriendBranchRequest)
}

void UpdateFriendBranchRequest::InitAsDefaultInstance() {
}

UpdateFriendBranchRequest::UpdateFriendBranchRequest(const UpdateFriendBranchRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.UpdateFriendBranchRequest)
}

void UpdateFriendBranchRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  friend_id_ = GOOGLE_ULONGLONG(0);
  branch_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateFriendBranchRequest::~UpdateFriendBranchRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.UpdateFriendBranchRequest)
  SharedDtor();
}

void UpdateFriendBranchRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateFriendBranchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateFriendBranchRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateFriendBranchRequest_descriptor_;
}

const UpdateFriendBranchRequest& UpdateFriendBranchRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

UpdateFriendBranchRequest* UpdateFriendBranchRequest::default_instance_ = NULL;

UpdateFriendBranchRequest* UpdateFriendBranchRequest::New() const {
  return new UpdateFriendBranchRequest;
}

void UpdateFriendBranchRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UpdateFriendBranchRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, branch_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateFriendBranchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.UpdateFriendBranchRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_friend_id;
        break;
      }

      // required uint64 friend_id = 2;
      case 2: {
        if (tag == 16) {
         parse_friend_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend_id_)));
          set_has_friend_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_branch_id;
        break;
      }

      // required uint64 branch_id = 3;
      case 3: {
        if (tag == 24) {
         parse_branch_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &branch_id_)));
          set_has_branch_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.UpdateFriendBranchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.UpdateFriendBranchRequest)
  return false;
#undef DO_
}

void UpdateFriendBranchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.UpdateFriendBranchRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 friend_id = 2;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->friend_id(), output);
  }

  // required uint64 branch_id = 3;
  if (has_branch_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->branch_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.UpdateFriendBranchRequest)
}

::google::protobuf::uint8* UpdateFriendBranchRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.UpdateFriendBranchRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 friend_id = 2;
  if (has_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->friend_id(), target);
  }

  // required uint64 branch_id = 3;
  if (has_branch_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->branch_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.UpdateFriendBranchRequest)
  return target;
}

int UpdateFriendBranchRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 friend_id = 2;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friend_id());
    }

    // required uint64 branch_id = 3;
    if (has_branch_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->branch_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateFriendBranchRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateFriendBranchRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateFriendBranchRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateFriendBranchRequest::MergeFrom(const UpdateFriendBranchRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
    if (from.has_branch_id()) {
      set_branch_id(from.branch_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateFriendBranchRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateFriendBranchRequest::CopyFrom(const UpdateFriendBranchRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateFriendBranchRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UpdateFriendBranchRequest::Swap(UpdateFriendBranchRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(friend_id_, other->friend_id_);
    std::swap(branch_id_, other->branch_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateFriendBranchRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateFriendBranchRequest_descriptor_;
  metadata.reflection = UpdateFriendBranchRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateFriendBranchResponse::kResultFieldNumber;
#endif  // !_MSC_VER

UpdateFriendBranchResponse::UpdateFriendBranchResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.UpdateFriendBranchResponse)
}

void UpdateFriendBranchResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::umsProtocol::Result*>(&::umsProtocol::Result::default_instance());
}

UpdateFriendBranchResponse::UpdateFriendBranchResponse(const UpdateFriendBranchResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.UpdateFriendBranchResponse)
}

void UpdateFriendBranchResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateFriendBranchResponse::~UpdateFriendBranchResponse() {
  // @@protoc_insertion_point(destructor:umsProtocol.UpdateFriendBranchResponse)
  SharedDtor();
}

void UpdateFriendBranchResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void UpdateFriendBranchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateFriendBranchResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateFriendBranchResponse_descriptor_;
}

const UpdateFriendBranchResponse& UpdateFriendBranchResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

UpdateFriendBranchResponse* UpdateFriendBranchResponse::default_instance_ = NULL;

UpdateFriendBranchResponse* UpdateFriendBranchResponse::New() const {
  return new UpdateFriendBranchResponse;
}

void UpdateFriendBranchResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::umsProtocol::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateFriendBranchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.UpdateFriendBranchResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .umsProtocol.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.UpdateFriendBranchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.UpdateFriendBranchResponse)
  return false;
#undef DO_
}

void UpdateFriendBranchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.UpdateFriendBranchResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.UpdateFriendBranchResponse)
}

::google::protobuf::uint8* UpdateFriendBranchResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.UpdateFriendBranchResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.UpdateFriendBranchResponse)
  return target;
}

int UpdateFriendBranchResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .umsProtocol.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateFriendBranchResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateFriendBranchResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateFriendBranchResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateFriendBranchResponse::MergeFrom(const UpdateFriendBranchResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::umsProtocol::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateFriendBranchResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateFriendBranchResponse::CopyFrom(const UpdateFriendBranchResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateFriendBranchResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void UpdateFriendBranchResponse::Swap(UpdateFriendBranchResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateFriendBranchResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateFriendBranchResponse_descriptor_;
  metadata.reflection = UpdateFriendBranchResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddBranchRequest::kUserIdFieldNumber;
const int AddBranchRequest::kBranchNameFieldNumber;
const int AddBranchRequest::kBranchSortFieldNumber;
#endif  // !_MSC_VER

AddBranchRequest::AddBranchRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.AddBranchRequest)
}

void AddBranchRequest::InitAsDefaultInstance() {
}

AddBranchRequest::AddBranchRequest(const AddBranchRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.AddBranchRequest)
}

void AddBranchRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  branch_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  branch_sort_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddBranchRequest::~AddBranchRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.AddBranchRequest)
  SharedDtor();
}

void AddBranchRequest::SharedDtor() {
  if (branch_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete branch_name_;
  }
  if (this != default_instance_) {
  }
}

void AddBranchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddBranchRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddBranchRequest_descriptor_;
}

const AddBranchRequest& AddBranchRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

AddBranchRequest* AddBranchRequest::default_instance_ = NULL;

AddBranchRequest* AddBranchRequest::New() const {
  return new AddBranchRequest;
}

void AddBranchRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_branch_name()) {
      if (branch_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        branch_name_->clear();
      }
    }
    branch_sort_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddBranchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.AddBranchRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_branch_name;
        break;
      }

      // optional string branch_name = 2;
      case 2: {
        if (tag == 18) {
         parse_branch_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_branch_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->branch_name().data(), this->branch_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "branch_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_branch_sort;
        break;
      }

      // optional uint32 branch_sort = 3;
      case 3: {
        if (tag == 24) {
         parse_branch_sort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &branch_sort_)));
          set_has_branch_sort();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.AddBranchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.AddBranchRequest)
  return false;
#undef DO_
}

void AddBranchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.AddBranchRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional string branch_name = 2;
  if (has_branch_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->branch_name().data(), this->branch_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "branch_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->branch_name(), output);
  }

  // optional uint32 branch_sort = 3;
  if (has_branch_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->branch_sort(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.AddBranchRequest)
}

::google::protobuf::uint8* AddBranchRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.AddBranchRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional string branch_name = 2;
  if (has_branch_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->branch_name().data(), this->branch_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "branch_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->branch_name(), target);
  }

  // optional uint32 branch_sort = 3;
  if (has_branch_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->branch_sort(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.AddBranchRequest)
  return target;
}

int AddBranchRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string branch_name = 2;
    if (has_branch_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->branch_name());
    }

    // optional uint32 branch_sort = 3;
    if (has_branch_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->branch_sort());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddBranchRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddBranchRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddBranchRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddBranchRequest::MergeFrom(const AddBranchRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_branch_name()) {
      set_branch_name(from.branch_name());
    }
    if (from.has_branch_sort()) {
      set_branch_sort(from.branch_sort());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddBranchRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddBranchRequest::CopyFrom(const AddBranchRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddBranchRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AddBranchRequest::Swap(AddBranchRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(branch_name_, other->branch_name_);
    std::swap(branch_sort_, other->branch_sort_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddBranchRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddBranchRequest_descriptor_;
  metadata.reflection = AddBranchRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddBranchResponse::kUserIdFieldNumber;
const int AddBranchResponse::kBranchIdFieldNumber;
const int AddBranchResponse::kBranchNameFieldNumber;
const int AddBranchResponse::kBranchSortFieldNumber;
const int AddBranchResponse::kResultFieldNumber;
#endif  // !_MSC_VER

AddBranchResponse::AddBranchResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.AddBranchResponse)
}

void AddBranchResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::umsProtocol::Result*>(&::umsProtocol::Result::default_instance());
}

AddBranchResponse::AddBranchResponse(const AddBranchResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.AddBranchResponse)
}

void AddBranchResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  branch_id_ = GOOGLE_ULONGLONG(0);
  branch_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  branch_sort_ = 0u;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddBranchResponse::~AddBranchResponse() {
  // @@protoc_insertion_point(destructor:umsProtocol.AddBranchResponse)
  SharedDtor();
}

void AddBranchResponse::SharedDtor() {
  if (branch_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete branch_name_;
  }
  if (this != default_instance_) {
    delete result_;
  }
}

void AddBranchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddBranchResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddBranchResponse_descriptor_;
}

const AddBranchResponse& AddBranchResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

AddBranchResponse* AddBranchResponse::default_instance_ = NULL;

AddBranchResponse* AddBranchResponse::New() const {
  return new AddBranchResponse;
}

void AddBranchResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AddBranchResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(user_id_, branch_id_);
    if (has_branch_name()) {
      if (branch_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        branch_name_->clear();
      }
    }
    branch_sort_ = 0u;
    if (has_result()) {
      if (result_ != NULL) result_->::umsProtocol::Result::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddBranchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.AddBranchResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_branch_id;
        break;
      }

      // optional uint64 branch_id = 2;
      case 2: {
        if (tag == 16) {
         parse_branch_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &branch_id_)));
          set_has_branch_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_branch_name;
        break;
      }

      // optional string branch_name = 3;
      case 3: {
        if (tag == 26) {
         parse_branch_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_branch_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->branch_name().data(), this->branch_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "branch_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_branch_sort;
        break;
      }

      // optional uint32 branch_sort = 4;
      case 4: {
        if (tag == 32) {
         parse_branch_sort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &branch_sort_)));
          set_has_branch_sort();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_result;
        break;
      }

      // required .umsProtocol.Result result = 5;
      case 5: {
        if (tag == 42) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.AddBranchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.AddBranchResponse)
  return false;
#undef DO_
}

void AddBranchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.AddBranchResponse)
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint64 branch_id = 2;
  if (has_branch_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->branch_id(), output);
  }

  // optional string branch_name = 3;
  if (has_branch_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->branch_name().data(), this->branch_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "branch_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->branch_name(), output);
  }

  // optional uint32 branch_sort = 4;
  if (has_branch_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->branch_sort(), output);
  }

  // required .umsProtocol.Result result = 5;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.AddBranchResponse)
}

::google::protobuf::uint8* AddBranchResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.AddBranchResponse)
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint64 branch_id = 2;
  if (has_branch_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->branch_id(), target);
  }

  // optional string branch_name = 3;
  if (has_branch_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->branch_name().data(), this->branch_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "branch_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->branch_name(), target);
  }

  // optional uint32 branch_sort = 4;
  if (has_branch_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->branch_sort(), target);
  }

  // required .umsProtocol.Result result = 5;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.AddBranchResponse)
  return target;
}

int AddBranchResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 branch_id = 2;
    if (has_branch_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->branch_id());
    }

    // optional string branch_name = 3;
    if (has_branch_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->branch_name());
    }

    // optional uint32 branch_sort = 4;
    if (has_branch_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->branch_sort());
    }

    // required .umsProtocol.Result result = 5;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddBranchResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddBranchResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddBranchResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddBranchResponse::MergeFrom(const AddBranchResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_branch_id()) {
      set_branch_id(from.branch_id());
    }
    if (from.has_branch_name()) {
      set_branch_name(from.branch_name());
    }
    if (from.has_branch_sort()) {
      set_branch_sort(from.branch_sort());
    }
    if (from.has_result()) {
      mutable_result()->::umsProtocol::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddBranchResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddBranchResponse::CopyFrom(const AddBranchResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddBranchResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void AddBranchResponse::Swap(AddBranchResponse* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(branch_id_, other->branch_id_);
    std::swap(branch_name_, other->branch_name_);
    std::swap(branch_sort_, other->branch_sort_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddBranchResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddBranchResponse_descriptor_;
  metadata.reflection = AddBranchResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteBranchRequest::kUserIdFieldNumber;
const int DeleteBranchRequest::kBranchIdFieldNumber;
#endif  // !_MSC_VER

DeleteBranchRequest::DeleteBranchRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.DeleteBranchRequest)
}

void DeleteBranchRequest::InitAsDefaultInstance() {
}

DeleteBranchRequest::DeleteBranchRequest(const DeleteBranchRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.DeleteBranchRequest)
}

void DeleteBranchRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  branch_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteBranchRequest::~DeleteBranchRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.DeleteBranchRequest)
  SharedDtor();
}

void DeleteBranchRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteBranchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteBranchRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteBranchRequest_descriptor_;
}

const DeleteBranchRequest& DeleteBranchRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

DeleteBranchRequest* DeleteBranchRequest::default_instance_ = NULL;

DeleteBranchRequest* DeleteBranchRequest::New() const {
  return new DeleteBranchRequest;
}

void DeleteBranchRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DeleteBranchRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, branch_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteBranchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.DeleteBranchRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_branch_id;
        break;
      }

      // required uint64 branch_id = 2;
      case 2: {
        if (tag == 16) {
         parse_branch_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &branch_id_)));
          set_has_branch_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.DeleteBranchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.DeleteBranchRequest)
  return false;
#undef DO_
}

void DeleteBranchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.DeleteBranchRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 branch_id = 2;
  if (has_branch_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->branch_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.DeleteBranchRequest)
}

::google::protobuf::uint8* DeleteBranchRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.DeleteBranchRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 branch_id = 2;
  if (has_branch_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->branch_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.DeleteBranchRequest)
  return target;
}

int DeleteBranchRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 branch_id = 2;
    if (has_branch_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->branch_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteBranchRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteBranchRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteBranchRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteBranchRequest::MergeFrom(const DeleteBranchRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_branch_id()) {
      set_branch_id(from.branch_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteBranchRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteBranchRequest::CopyFrom(const DeleteBranchRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteBranchRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DeleteBranchRequest::Swap(DeleteBranchRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(branch_id_, other->branch_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteBranchRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteBranchRequest_descriptor_;
  metadata.reflection = DeleteBranchRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteBranchResponse::kResultFieldNumber;
#endif  // !_MSC_VER

DeleteBranchResponse::DeleteBranchResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.DeleteBranchResponse)
}

void DeleteBranchResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::umsProtocol::Result*>(&::umsProtocol::Result::default_instance());
}

DeleteBranchResponse::DeleteBranchResponse(const DeleteBranchResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.DeleteBranchResponse)
}

void DeleteBranchResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteBranchResponse::~DeleteBranchResponse() {
  // @@protoc_insertion_point(destructor:umsProtocol.DeleteBranchResponse)
  SharedDtor();
}

void DeleteBranchResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void DeleteBranchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteBranchResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteBranchResponse_descriptor_;
}

const DeleteBranchResponse& DeleteBranchResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

DeleteBranchResponse* DeleteBranchResponse::default_instance_ = NULL;

DeleteBranchResponse* DeleteBranchResponse::New() const {
  return new DeleteBranchResponse;
}

void DeleteBranchResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::umsProtocol::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteBranchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.DeleteBranchResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .umsProtocol.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.DeleteBranchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.DeleteBranchResponse)
  return false;
#undef DO_
}

void DeleteBranchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.DeleteBranchResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.DeleteBranchResponse)
}

::google::protobuf::uint8* DeleteBranchResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.DeleteBranchResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.DeleteBranchResponse)
  return target;
}

int DeleteBranchResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .umsProtocol.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteBranchResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteBranchResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteBranchResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteBranchResponse::MergeFrom(const DeleteBranchResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::umsProtocol::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteBranchResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteBranchResponse::CopyFrom(const DeleteBranchResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteBranchResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void DeleteBranchResponse::Swap(DeleteBranchResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteBranchResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteBranchResponse_descriptor_;
  metadata.reflection = DeleteBranchResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateBranchInfoRequest::kUserIdFieldNumber;
const int UpdateBranchInfoRequest::kBranchIdFieldNumber;
const int UpdateBranchInfoRequest::kBranchNameFieldNumber;
const int UpdateBranchInfoRequest::kBranchSortFieldNumber;
#endif  // !_MSC_VER

UpdateBranchInfoRequest::UpdateBranchInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.UpdateBranchInfoRequest)
}

void UpdateBranchInfoRequest::InitAsDefaultInstance() {
}

UpdateBranchInfoRequest::UpdateBranchInfoRequest(const UpdateBranchInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.UpdateBranchInfoRequest)
}

void UpdateBranchInfoRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  branch_id_ = GOOGLE_ULONGLONG(0);
  branch_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  branch_sort_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateBranchInfoRequest::~UpdateBranchInfoRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.UpdateBranchInfoRequest)
  SharedDtor();
}

void UpdateBranchInfoRequest::SharedDtor() {
  if (branch_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete branch_name_;
  }
  if (this != default_instance_) {
  }
}

void UpdateBranchInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateBranchInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateBranchInfoRequest_descriptor_;
}

const UpdateBranchInfoRequest& UpdateBranchInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

UpdateBranchInfoRequest* UpdateBranchInfoRequest::default_instance_ = NULL;

UpdateBranchInfoRequest* UpdateBranchInfoRequest::New() const {
  return new UpdateBranchInfoRequest;
}

void UpdateBranchInfoRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UpdateBranchInfoRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(user_id_, branch_id_);
    if (has_branch_name()) {
      if (branch_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        branch_name_->clear();
      }
    }
    branch_sort_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateBranchInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.UpdateBranchInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_branch_id;
        break;
      }

      // optional uint64 branch_id = 2;
      case 2: {
        if (tag == 16) {
         parse_branch_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &branch_id_)));
          set_has_branch_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_branch_name;
        break;
      }

      // optional string branch_name = 3;
      case 3: {
        if (tag == 26) {
         parse_branch_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_branch_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->branch_name().data(), this->branch_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "branch_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_branch_sort;
        break;
      }

      // optional uint32 branch_sort = 4;
      case 4: {
        if (tag == 32) {
         parse_branch_sort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &branch_sort_)));
          set_has_branch_sort();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.UpdateBranchInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.UpdateBranchInfoRequest)
  return false;
#undef DO_
}

void UpdateBranchInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.UpdateBranchInfoRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint64 branch_id = 2;
  if (has_branch_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->branch_id(), output);
  }

  // optional string branch_name = 3;
  if (has_branch_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->branch_name().data(), this->branch_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "branch_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->branch_name(), output);
  }

  // optional uint32 branch_sort = 4;
  if (has_branch_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->branch_sort(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.UpdateBranchInfoRequest)
}

::google::protobuf::uint8* UpdateBranchInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.UpdateBranchInfoRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint64 branch_id = 2;
  if (has_branch_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->branch_id(), target);
  }

  // optional string branch_name = 3;
  if (has_branch_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->branch_name().data(), this->branch_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "branch_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->branch_name(), target);
  }

  // optional uint32 branch_sort = 4;
  if (has_branch_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->branch_sort(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.UpdateBranchInfoRequest)
  return target;
}

int UpdateBranchInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 branch_id = 2;
    if (has_branch_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->branch_id());
    }

    // optional string branch_name = 3;
    if (has_branch_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->branch_name());
    }

    // optional uint32 branch_sort = 4;
    if (has_branch_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->branch_sort());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateBranchInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateBranchInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateBranchInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateBranchInfoRequest::MergeFrom(const UpdateBranchInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_branch_id()) {
      set_branch_id(from.branch_id());
    }
    if (from.has_branch_name()) {
      set_branch_name(from.branch_name());
    }
    if (from.has_branch_sort()) {
      set_branch_sort(from.branch_sort());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateBranchInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateBranchInfoRequest::CopyFrom(const UpdateBranchInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateBranchInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UpdateBranchInfoRequest::Swap(UpdateBranchInfoRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(branch_id_, other->branch_id_);
    std::swap(branch_name_, other->branch_name_);
    std::swap(branch_sort_, other->branch_sort_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateBranchInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateBranchInfoRequest_descriptor_;
  metadata.reflection = UpdateBranchInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateBranchInfoResponse::kResultFieldNumber;
#endif  // !_MSC_VER

UpdateBranchInfoResponse::UpdateBranchInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.UpdateBranchInfoResponse)
}

void UpdateBranchInfoResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::umsProtocol::Result*>(&::umsProtocol::Result::default_instance());
}

UpdateBranchInfoResponse::UpdateBranchInfoResponse(const UpdateBranchInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.UpdateBranchInfoResponse)
}

void UpdateBranchInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateBranchInfoResponse::~UpdateBranchInfoResponse() {
  // @@protoc_insertion_point(destructor:umsProtocol.UpdateBranchInfoResponse)
  SharedDtor();
}

void UpdateBranchInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void UpdateBranchInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateBranchInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateBranchInfoResponse_descriptor_;
}

const UpdateBranchInfoResponse& UpdateBranchInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

UpdateBranchInfoResponse* UpdateBranchInfoResponse::default_instance_ = NULL;

UpdateBranchInfoResponse* UpdateBranchInfoResponse::New() const {
  return new UpdateBranchInfoResponse;
}

void UpdateBranchInfoResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::umsProtocol::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateBranchInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.UpdateBranchInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .umsProtocol.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.UpdateBranchInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.UpdateBranchInfoResponse)
  return false;
#undef DO_
}

void UpdateBranchInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.UpdateBranchInfoResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.UpdateBranchInfoResponse)
}

::google::protobuf::uint8* UpdateBranchInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.UpdateBranchInfoResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.UpdateBranchInfoResponse)
  return target;
}

int UpdateBranchInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .umsProtocol.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateBranchInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateBranchInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateBranchInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateBranchInfoResponse::MergeFrom(const UpdateBranchInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::umsProtocol::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateBranchInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateBranchInfoResponse::CopyFrom(const UpdateBranchInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateBranchInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void UpdateBranchInfoResponse::Swap(UpdateBranchInfoResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateBranchInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateBranchInfoResponse_descriptor_;
  metadata.reflection = UpdateBranchInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KickoutGroupUserRequest::kUserIdFieldNumber;
const int KickoutGroupUserRequest::kGroupIdFieldNumber;
const int KickoutGroupUserRequest::kGroupUserIdFieldNumber;
#endif  // !_MSC_VER

KickoutGroupUserRequest::KickoutGroupUserRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.KickoutGroupUserRequest)
}

void KickoutGroupUserRequest::InitAsDefaultInstance() {
}

KickoutGroupUserRequest::KickoutGroupUserRequest(const KickoutGroupUserRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.KickoutGroupUserRequest)
}

void KickoutGroupUserRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  group_user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickoutGroupUserRequest::~KickoutGroupUserRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.KickoutGroupUserRequest)
  SharedDtor();
}

void KickoutGroupUserRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KickoutGroupUserRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickoutGroupUserRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickoutGroupUserRequest_descriptor_;
}

const KickoutGroupUserRequest& KickoutGroupUserRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

KickoutGroupUserRequest* KickoutGroupUserRequest::default_instance_ = NULL;

KickoutGroupUserRequest* KickoutGroupUserRequest::New() const {
  return new KickoutGroupUserRequest;
}

void KickoutGroupUserRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<KickoutGroupUserRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, group_user_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KickoutGroupUserRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.KickoutGroupUserRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_user_id;
        break;
      }

      // optional uint64 group_user_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_user_id_)));
          set_has_group_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.KickoutGroupUserRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.KickoutGroupUserRequest)
  return false;
#undef DO_
}

void KickoutGroupUserRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.KickoutGroupUserRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  // optional uint64 group_user_id = 3;
  if (has_group_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->group_user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.KickoutGroupUserRequest)
}

::google::protobuf::uint8* KickoutGroupUserRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.KickoutGroupUserRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  // optional uint64 group_user_id = 3;
  if (has_group_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->group_user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.KickoutGroupUserRequest)
  return target;
}

int KickoutGroupUserRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional uint64 group_user_id = 3;
    if (has_group_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickoutGroupUserRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KickoutGroupUserRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KickoutGroupUserRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KickoutGroupUserRequest::MergeFrom(const KickoutGroupUserRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_user_id()) {
      set_group_user_id(from.group_user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KickoutGroupUserRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickoutGroupUserRequest::CopyFrom(const KickoutGroupUserRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickoutGroupUserRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void KickoutGroupUserRequest::Swap(KickoutGroupUserRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(group_user_id_, other->group_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KickoutGroupUserRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KickoutGroupUserRequest_descriptor_;
  metadata.reflection = KickoutGroupUserRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KickoutGroupUserResponse::kResultFieldNumber;
#endif  // !_MSC_VER

KickoutGroupUserResponse::KickoutGroupUserResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.KickoutGroupUserResponse)
}

void KickoutGroupUserResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::umsProtocol::Result*>(&::umsProtocol::Result::default_instance());
}

KickoutGroupUserResponse::KickoutGroupUserResponse(const KickoutGroupUserResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.KickoutGroupUserResponse)
}

void KickoutGroupUserResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickoutGroupUserResponse::~KickoutGroupUserResponse() {
  // @@protoc_insertion_point(destructor:umsProtocol.KickoutGroupUserResponse)
  SharedDtor();
}

void KickoutGroupUserResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void KickoutGroupUserResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickoutGroupUserResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickoutGroupUserResponse_descriptor_;
}

const KickoutGroupUserResponse& KickoutGroupUserResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

KickoutGroupUserResponse* KickoutGroupUserResponse::default_instance_ = NULL;

KickoutGroupUserResponse* KickoutGroupUserResponse::New() const {
  return new KickoutGroupUserResponse;
}

void KickoutGroupUserResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::umsProtocol::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KickoutGroupUserResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.KickoutGroupUserResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .umsProtocol.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.KickoutGroupUserResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.KickoutGroupUserResponse)
  return false;
#undef DO_
}

void KickoutGroupUserResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.KickoutGroupUserResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.KickoutGroupUserResponse)
}

::google::protobuf::uint8* KickoutGroupUserResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.KickoutGroupUserResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.KickoutGroupUserResponse)
  return target;
}

int KickoutGroupUserResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .umsProtocol.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickoutGroupUserResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KickoutGroupUserResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KickoutGroupUserResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KickoutGroupUserResponse::MergeFrom(const KickoutGroupUserResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::umsProtocol::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KickoutGroupUserResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickoutGroupUserResponse::CopyFrom(const KickoutGroupUserResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickoutGroupUserResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void KickoutGroupUserResponse::Swap(KickoutGroupUserResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KickoutGroupUserResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KickoutGroupUserResponse_descriptor_;
  metadata.reflection = KickoutGroupUserResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetGroupManagerRequest::kUserIdFieldNumber;
const int SetGroupManagerRequest::kGroupIdFieldNumber;
const int SetGroupManagerRequest::kGroupUserIdFieldNumber;
const int SetGroupManagerRequest::kControlValueFieldNumber;
#endif  // !_MSC_VER

SetGroupManagerRequest::SetGroupManagerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.SetGroupManagerRequest)
}

void SetGroupManagerRequest::InitAsDefaultInstance() {
}

SetGroupManagerRequest::SetGroupManagerRequest(const SetGroupManagerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.SetGroupManagerRequest)
}

void SetGroupManagerRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  group_user_id_ = GOOGLE_ULONGLONG(0);
  control_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetGroupManagerRequest::~SetGroupManagerRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.SetGroupManagerRequest)
  SharedDtor();
}

void SetGroupManagerRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetGroupManagerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetGroupManagerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetGroupManagerRequest_descriptor_;
}

const SetGroupManagerRequest& SetGroupManagerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

SetGroupManagerRequest* SetGroupManagerRequest::default_instance_ = NULL;

SetGroupManagerRequest* SetGroupManagerRequest::New() const {
  return new SetGroupManagerRequest;
}

void SetGroupManagerRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SetGroupManagerRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, control_value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetGroupManagerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.SetGroupManagerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // optional uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_user_id;
        break;
      }

      // optional uint64 group_user_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_user_id_)));
          set_has_group_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_control_value;
        break;
      }

      // optional uint32 control_value = 4;
      case 4: {
        if (tag == 32) {
         parse_control_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &control_value_)));
          set_has_control_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.SetGroupManagerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.SetGroupManagerRequest)
  return false;
#undef DO_
}

void SetGroupManagerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.SetGroupManagerRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  // optional uint64 group_user_id = 3;
  if (has_group_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->group_user_id(), output);
  }

  // optional uint32 control_value = 4;
  if (has_control_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->control_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.SetGroupManagerRequest)
}

::google::protobuf::uint8* SetGroupManagerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.SetGroupManagerRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  // optional uint64 group_user_id = 3;
  if (has_group_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->group_user_id(), target);
  }

  // optional uint32 control_value = 4;
  if (has_control_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->control_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.SetGroupManagerRequest)
  return target;
}

int SetGroupManagerRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional uint64 group_user_id = 3;
    if (has_group_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_user_id());
    }

    // optional uint32 control_value = 4;
    if (has_control_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->control_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetGroupManagerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetGroupManagerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetGroupManagerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetGroupManagerRequest::MergeFrom(const SetGroupManagerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_user_id()) {
      set_group_user_id(from.group_user_id());
    }
    if (from.has_control_value()) {
      set_control_value(from.control_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetGroupManagerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetGroupManagerRequest::CopyFrom(const SetGroupManagerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetGroupManagerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetGroupManagerRequest::Swap(SetGroupManagerRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(group_user_id_, other->group_user_id_);
    std::swap(control_value_, other->control_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetGroupManagerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetGroupManagerRequest_descriptor_;
  metadata.reflection = SetGroupManagerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetGroupManagerResponse::kResultFieldNumber;
#endif  // !_MSC_VER

SetGroupManagerResponse::SetGroupManagerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.SetGroupManagerResponse)
}

void SetGroupManagerResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::umsProtocol::Result*>(&::umsProtocol::Result::default_instance());
}

SetGroupManagerResponse::SetGroupManagerResponse(const SetGroupManagerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.SetGroupManagerResponse)
}

void SetGroupManagerResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetGroupManagerResponse::~SetGroupManagerResponse() {
  // @@protoc_insertion_point(destructor:umsProtocol.SetGroupManagerResponse)
  SharedDtor();
}

void SetGroupManagerResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void SetGroupManagerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetGroupManagerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetGroupManagerResponse_descriptor_;
}

const SetGroupManagerResponse& SetGroupManagerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

SetGroupManagerResponse* SetGroupManagerResponse::default_instance_ = NULL;

SetGroupManagerResponse* SetGroupManagerResponse::New() const {
  return new SetGroupManagerResponse;
}

void SetGroupManagerResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::umsProtocol::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetGroupManagerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.SetGroupManagerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .umsProtocol.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.SetGroupManagerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.SetGroupManagerResponse)
  return false;
#undef DO_
}

void SetGroupManagerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.SetGroupManagerResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.SetGroupManagerResponse)
}

::google::protobuf::uint8* SetGroupManagerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.SetGroupManagerResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.SetGroupManagerResponse)
  return target;
}

int SetGroupManagerResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .umsProtocol.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetGroupManagerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetGroupManagerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetGroupManagerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetGroupManagerResponse::MergeFrom(const SetGroupManagerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::umsProtocol::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetGroupManagerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetGroupManagerResponse::CopyFrom(const SetGroupManagerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetGroupManagerResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void SetGroupManagerResponse::Swap(SetGroupManagerResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetGroupManagerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetGroupManagerResponse_descriptor_;
  metadata.reflection = SetGroupManagerResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateFriendRemarkRequest::kUserIdFieldNumber;
const int UpdateFriendRemarkRequest::kFriendIdFieldNumber;
const int UpdateFriendRemarkRequest::kRemarkFieldNumber;
#endif  // !_MSC_VER

UpdateFriendRemarkRequest::UpdateFriendRemarkRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.UpdateFriendRemarkRequest)
}

void UpdateFriendRemarkRequest::InitAsDefaultInstance() {
}

UpdateFriendRemarkRequest::UpdateFriendRemarkRequest(const UpdateFriendRemarkRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.UpdateFriendRemarkRequest)
}

void UpdateFriendRemarkRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  friend_id_ = GOOGLE_ULONGLONG(0);
  remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateFriendRemarkRequest::~UpdateFriendRemarkRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.UpdateFriendRemarkRequest)
  SharedDtor();
}

void UpdateFriendRemarkRequest::SharedDtor() {
  if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete remark_;
  }
  if (this != default_instance_) {
  }
}

void UpdateFriendRemarkRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateFriendRemarkRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateFriendRemarkRequest_descriptor_;
}

const UpdateFriendRemarkRequest& UpdateFriendRemarkRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

UpdateFriendRemarkRequest* UpdateFriendRemarkRequest::default_instance_ = NULL;

UpdateFriendRemarkRequest* UpdateFriendRemarkRequest::New() const {
  return new UpdateFriendRemarkRequest;
}

void UpdateFriendRemarkRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UpdateFriendRemarkRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(user_id_, friend_id_);
    if (has_remark()) {
      if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        remark_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateFriendRemarkRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.UpdateFriendRemarkRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_friend_id;
        break;
      }

      // optional uint64 friend_id = 2;
      case 2: {
        if (tag == 16) {
         parse_friend_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend_id_)));
          set_has_friend_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_remark;
        break;
      }

      // optional string remark = 3;
      case 3: {
        if (tag == 26) {
         parse_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->remark().data(), this->remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "remark");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.UpdateFriendRemarkRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.UpdateFriendRemarkRequest)
  return false;
#undef DO_
}

void UpdateFriendRemarkRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.UpdateFriendRemarkRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint64 friend_id = 2;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->friend_id(), output);
  }

  // optional string remark = 3;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->remark(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.UpdateFriendRemarkRequest)
}

::google::protobuf::uint8* UpdateFriendRemarkRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.UpdateFriendRemarkRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint64 friend_id = 2;
  if (has_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->friend_id(), target);
  }

  // optional string remark = 3;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->remark(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.UpdateFriendRemarkRequest)
  return target;
}

int UpdateFriendRemarkRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 friend_id = 2;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friend_id());
    }

    // optional string remark = 3;
    if (has_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remark());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateFriendRemarkRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateFriendRemarkRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateFriendRemarkRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateFriendRemarkRequest::MergeFrom(const UpdateFriendRemarkRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
    if (from.has_remark()) {
      set_remark(from.remark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateFriendRemarkRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateFriendRemarkRequest::CopyFrom(const UpdateFriendRemarkRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateFriendRemarkRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UpdateFriendRemarkRequest::Swap(UpdateFriendRemarkRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(friend_id_, other->friend_id_);
    std::swap(remark_, other->remark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateFriendRemarkRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateFriendRemarkRequest_descriptor_;
  metadata.reflection = UpdateFriendRemarkRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateFriendRemarkResponse::kResultFieldNumber;
#endif  // !_MSC_VER

UpdateFriendRemarkResponse::UpdateFriendRemarkResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.UpdateFriendRemarkResponse)
}

void UpdateFriendRemarkResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::umsProtocol::Result*>(&::umsProtocol::Result::default_instance());
}

UpdateFriendRemarkResponse::UpdateFriendRemarkResponse(const UpdateFriendRemarkResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.UpdateFriendRemarkResponse)
}

void UpdateFriendRemarkResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateFriendRemarkResponse::~UpdateFriendRemarkResponse() {
  // @@protoc_insertion_point(destructor:umsProtocol.UpdateFriendRemarkResponse)
  SharedDtor();
}

void UpdateFriendRemarkResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void UpdateFriendRemarkResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateFriendRemarkResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateFriendRemarkResponse_descriptor_;
}

const UpdateFriendRemarkResponse& UpdateFriendRemarkResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

UpdateFriendRemarkResponse* UpdateFriendRemarkResponse::default_instance_ = NULL;

UpdateFriendRemarkResponse* UpdateFriendRemarkResponse::New() const {
  return new UpdateFriendRemarkResponse;
}

void UpdateFriendRemarkResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::umsProtocol::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateFriendRemarkResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.UpdateFriendRemarkResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .umsProtocol.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.UpdateFriendRemarkResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.UpdateFriendRemarkResponse)
  return false;
#undef DO_
}

void UpdateFriendRemarkResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.UpdateFriendRemarkResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.UpdateFriendRemarkResponse)
}

::google::protobuf::uint8* UpdateFriendRemarkResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.UpdateFriendRemarkResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.UpdateFriendRemarkResponse)
  return target;
}

int UpdateFriendRemarkResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .umsProtocol.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateFriendRemarkResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateFriendRemarkResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateFriendRemarkResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateFriendRemarkResponse::MergeFrom(const UpdateFriendRemarkResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::umsProtocol::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateFriendRemarkResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateFriendRemarkResponse::CopyFrom(const UpdateFriendRemarkResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateFriendRemarkResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void UpdateFriendRemarkResponse::Swap(UpdateFriendRemarkResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateFriendRemarkResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateFriendRemarkResponse_descriptor_;
  metadata.reflection = UpdateFriendRemarkResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetBranchListRequest::kUserIdFieldNumber;
const int GetBranchListRequest::kVersionIdFieldNumber;
#endif  // !_MSC_VER

GetBranchListRequest::GetBranchListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.GetBranchListRequest)
}

void GetBranchListRequest::InitAsDefaultInstance() {
}

GetBranchListRequest::GetBranchListRequest(const GetBranchListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.GetBranchListRequest)
}

void GetBranchListRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  version_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBranchListRequest::~GetBranchListRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.GetBranchListRequest)
  SharedDtor();
}

void GetBranchListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetBranchListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBranchListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBranchListRequest_descriptor_;
}

const GetBranchListRequest& GetBranchListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

GetBranchListRequest* GetBranchListRequest::default_instance_ = NULL;

GetBranchListRequest* GetBranchListRequest::New() const {
  return new GetBranchListRequest;
}

void GetBranchListRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetBranchListRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, version_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBranchListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.GetBranchListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version_id;
        break;
      }

      // optional uint64 version_id = 2;
      case 2: {
        if (tag == 16) {
         parse_version_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_id_)));
          set_has_version_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.GetBranchListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.GetBranchListRequest)
  return false;
#undef DO_
}

void GetBranchListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.GetBranchListRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint64 version_id = 2;
  if (has_version_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->version_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.GetBranchListRequest)
}

::google::protobuf::uint8* GetBranchListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.GetBranchListRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint64 version_id = 2;
  if (has_version_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->version_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.GetBranchListRequest)
  return target;
}

int GetBranchListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 version_id = 2;
    if (has_version_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBranchListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBranchListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBranchListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBranchListRequest::MergeFrom(const GetBranchListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_version_id()) {
      set_version_id(from.version_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBranchListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBranchListRequest::CopyFrom(const GetBranchListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBranchListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetBranchListRequest::Swap(GetBranchListRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(version_id_, other->version_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBranchListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBranchListRequest_descriptor_;
  metadata.reflection = GetBranchListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserIdRemarkItem::kUserIdFieldNumber;
const int UserIdRemarkItem::kUserRemarkFieldNumber;
#endif  // !_MSC_VER

UserIdRemarkItem::UserIdRemarkItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.UserIdRemarkItem)
}

void UserIdRemarkItem::InitAsDefaultInstance() {
}

UserIdRemarkItem::UserIdRemarkItem(const UserIdRemarkItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.UserIdRemarkItem)
}

void UserIdRemarkItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  user_remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserIdRemarkItem::~UserIdRemarkItem() {
  // @@protoc_insertion_point(destructor:umsProtocol.UserIdRemarkItem)
  SharedDtor();
}

void UserIdRemarkItem::SharedDtor() {
  if (user_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_remark_;
  }
  if (this != default_instance_) {
  }
}

void UserIdRemarkItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserIdRemarkItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserIdRemarkItem_descriptor_;
}

const UserIdRemarkItem& UserIdRemarkItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

UserIdRemarkItem* UserIdRemarkItem::default_instance_ = NULL;

UserIdRemarkItem* UserIdRemarkItem::New() const {
  return new UserIdRemarkItem;
}

void UserIdRemarkItem::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_user_remark()) {
      if (user_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_remark_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserIdRemarkItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.UserIdRemarkItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_remark;
        break;
      }

      // optional string user_remark = 2;
      case 2: {
        if (tag == 18) {
         parse_user_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_remark().data(), this->user_remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user_remark");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.UserIdRemarkItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.UserIdRemarkItem)
  return false;
#undef DO_
}

void UserIdRemarkItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.UserIdRemarkItem)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional string user_remark = 2;
  if (has_user_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_remark().data(), this->user_remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_remark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_remark(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.UserIdRemarkItem)
}

::google::protobuf::uint8* UserIdRemarkItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.UserIdRemarkItem)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional string user_remark = 2;
  if (has_user_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_remark().data(), this->user_remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_remark");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_remark(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.UserIdRemarkItem)
  return target;
}

int UserIdRemarkItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string user_remark = 2;
    if (has_user_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_remark());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserIdRemarkItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserIdRemarkItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserIdRemarkItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserIdRemarkItem::MergeFrom(const UserIdRemarkItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_remark()) {
      set_user_remark(from.user_remark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserIdRemarkItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserIdRemarkItem::CopyFrom(const UserIdRemarkItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserIdRemarkItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UserIdRemarkItem::Swap(UserIdRemarkItem* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(user_remark_, other->user_remark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserIdRemarkItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserIdRemarkItem_descriptor_;
  metadata.reflection = UserIdRemarkItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BranchListItem::kBranchIdFieldNumber;
const int BranchListItem::kBranchNameFieldNumber;
const int BranchListItem::kBranchSortFieldNumber;
const int BranchListItem::kUsersFieldNumber;
#endif  // !_MSC_VER

BranchListItem::BranchListItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.BranchListItem)
}

void BranchListItem::InitAsDefaultInstance() {
}

BranchListItem::BranchListItem(const BranchListItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.BranchListItem)
}

void BranchListItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  branch_id_ = GOOGLE_ULONGLONG(0);
  branch_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  branch_sort_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BranchListItem::~BranchListItem() {
  // @@protoc_insertion_point(destructor:umsProtocol.BranchListItem)
  SharedDtor();
}

void BranchListItem::SharedDtor() {
  if (branch_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete branch_name_;
  }
  if (this != default_instance_) {
  }
}

void BranchListItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BranchListItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BranchListItem_descriptor_;
}

const BranchListItem& BranchListItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

BranchListItem* BranchListItem::default_instance_ = NULL;

BranchListItem* BranchListItem::New() const {
  return new BranchListItem;
}

void BranchListItem::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    branch_id_ = GOOGLE_ULONGLONG(0);
    if (has_branch_name()) {
      if (branch_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        branch_name_->clear();
      }
    }
    branch_sort_ = 0u;
  }
  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BranchListItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.BranchListItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 branch_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &branch_id_)));
          set_has_branch_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_branch_name;
        break;
      }

      // optional string branch_name = 2;
      case 2: {
        if (tag == 18) {
         parse_branch_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_branch_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->branch_name().data(), this->branch_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "branch_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_branch_sort;
        break;
      }

      // optional uint32 branch_sort = 3;
      case 3: {
        if (tag == 24) {
         parse_branch_sort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &branch_sort_)));
          set_has_branch_sort();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_users;
        break;
      }

      // repeated .umsProtocol.UserIdRemarkItem users = 4;
      case 4: {
        if (tag == 34) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_users;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.BranchListItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.BranchListItem)
  return false;
#undef DO_
}

void BranchListItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.BranchListItem)
  // optional uint64 branch_id = 1;
  if (has_branch_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->branch_id(), output);
  }

  // optional string branch_name = 2;
  if (has_branch_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->branch_name().data(), this->branch_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "branch_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->branch_name(), output);
  }

  // optional uint32 branch_sort = 3;
  if (has_branch_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->branch_sort(), output);
  }

  // repeated .umsProtocol.UserIdRemarkItem users = 4;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->users(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.BranchListItem)
}

::google::protobuf::uint8* BranchListItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.BranchListItem)
  // optional uint64 branch_id = 1;
  if (has_branch_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->branch_id(), target);
  }

  // optional string branch_name = 2;
  if (has_branch_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->branch_name().data(), this->branch_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "branch_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->branch_name(), target);
  }

  // optional uint32 branch_sort = 3;
  if (has_branch_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->branch_sort(), target);
  }

  // repeated .umsProtocol.UserIdRemarkItem users = 4;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->users(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.BranchListItem)
  return target;
}

int BranchListItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 branch_id = 1;
    if (has_branch_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->branch_id());
    }

    // optional string branch_name = 2;
    if (has_branch_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->branch_name());
    }

    // optional uint32 branch_sort = 3;
    if (has_branch_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->branch_sort());
    }

  }
  // repeated .umsProtocol.UserIdRemarkItem users = 4;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BranchListItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BranchListItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BranchListItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BranchListItem::MergeFrom(const BranchListItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_branch_id()) {
      set_branch_id(from.branch_id());
    }
    if (from.has_branch_name()) {
      set_branch_name(from.branch_name());
    }
    if (from.has_branch_sort()) {
      set_branch_sort(from.branch_sort());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BranchListItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BranchListItem::CopyFrom(const BranchListItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BranchListItem::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->users())) return false;
  return true;
}

void BranchListItem::Swap(BranchListItem* other) {
  if (other != this) {
    std::swap(branch_id_, other->branch_id_);
    std::swap(branch_name_, other->branch_name_);
    std::swap(branch_sort_, other->branch_sort_);
    users_.Swap(&other->users_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BranchListItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BranchListItem_descriptor_;
  metadata.reflection = BranchListItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetBranchListResponse::kResultFieldNumber;
const int GetBranchListResponse::kUserIdFieldNumber;
const int GetBranchListResponse::kVersionIdFieldNumber;
const int GetBranchListResponse::kBranchItemFieldNumber;
#endif  // !_MSC_VER

GetBranchListResponse::GetBranchListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.GetBranchListResponse)
}

void GetBranchListResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::umsProtocol::Result*>(&::umsProtocol::Result::default_instance());
}

GetBranchListResponse::GetBranchListResponse(const GetBranchListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.GetBranchListResponse)
}

void GetBranchListResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  user_id_ = GOOGLE_ULONGLONG(0);
  version_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBranchListResponse::~GetBranchListResponse() {
  // @@protoc_insertion_point(destructor:umsProtocol.GetBranchListResponse)
  SharedDtor();
}

void GetBranchListResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void GetBranchListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBranchListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBranchListResponse_descriptor_;
}

const GetBranchListResponse& GetBranchListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

GetBranchListResponse* GetBranchListResponse::default_instance_ = NULL;

GetBranchListResponse* GetBranchListResponse::New() const {
  return new GetBranchListResponse;
}

void GetBranchListResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetBranchListResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(user_id_, version_id_);
    if (has_result()) {
      if (result_ != NULL) result_->::umsProtocol::Result::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  branch_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBranchListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.GetBranchListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .umsProtocol.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_version_id;
        break;
      }

      // optional uint64 version_id = 3;
      case 3: {
        if (tag == 24) {
         parse_version_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_id_)));
          set_has_version_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_branch_item;
        break;
      }

      // repeated .umsProtocol.BranchListItem branch_item = 4;
      case 4: {
        if (tag == 34) {
         parse_branch_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_branch_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_branch_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.GetBranchListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.GetBranchListResponse)
  return false;
#undef DO_
}

void GetBranchListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.GetBranchListResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional uint64 version_id = 3;
  if (has_version_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->version_id(), output);
  }

  // repeated .umsProtocol.BranchListItem branch_item = 4;
  for (int i = 0; i < this->branch_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->branch_item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.GetBranchListResponse)
}

::google::protobuf::uint8* GetBranchListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.GetBranchListResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional uint64 version_id = 3;
  if (has_version_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->version_id(), target);
  }

  // repeated .umsProtocol.BranchListItem branch_item = 4;
  for (int i = 0; i < this->branch_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->branch_item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.GetBranchListResponse)
  return target;
}

int GetBranchListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .umsProtocol.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 version_id = 3;
    if (has_version_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version_id());
    }

  }
  // repeated .umsProtocol.BranchListItem branch_item = 4;
  total_size += 1 * this->branch_item_size();
  for (int i = 0; i < this->branch_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->branch_item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBranchListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBranchListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBranchListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBranchListResponse::MergeFrom(const GetBranchListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  branch_item_.MergeFrom(from.branch_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::umsProtocol::Result::MergeFrom(from.result());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_version_id()) {
      set_version_id(from.version_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBranchListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBranchListResponse::CopyFrom(const GetBranchListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBranchListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->branch_item())) return false;
  return true;
}

void GetBranchListResponse::Swap(GetBranchListResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_id_, other->user_id_);
    std::swap(version_id_, other->version_id_);
    branch_item_.Swap(&other->branch_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBranchListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBranchListResponse_descriptor_;
  metadata.reflection = GetBranchListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetFriendOptionRequest::kUserIdFieldNumber;
const int SetFriendOptionRequest::kVerifyTypeFieldNumber;
const int SetFriendOptionRequest::kQuestionTypeFieldNumber;
const int SetFriendOptionRequest::kAnswerFieldNumber;
#endif  // !_MSC_VER

SetFriendOptionRequest::SetFriendOptionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.SetFriendOptionRequest)
}

void SetFriendOptionRequest::InitAsDefaultInstance() {
}

SetFriendOptionRequest::SetFriendOptionRequest(const SetFriendOptionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.SetFriendOptionRequest)
}

void SetFriendOptionRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  verify_type_ = 0u;
  question_type_ = 0u;
  answer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetFriendOptionRequest::~SetFriendOptionRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.SetFriendOptionRequest)
  SharedDtor();
}

void SetFriendOptionRequest::SharedDtor() {
  if (answer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete answer_;
  }
  if (this != default_instance_) {
  }
}

void SetFriendOptionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetFriendOptionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetFriendOptionRequest_descriptor_;
}

const SetFriendOptionRequest& SetFriendOptionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

SetFriendOptionRequest* SetFriendOptionRequest::default_instance_ = NULL;

SetFriendOptionRequest* SetFriendOptionRequest::New() const {
  return new SetFriendOptionRequest;
}

void SetFriendOptionRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SetFriendOptionRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(user_id_, question_type_);
    if (has_answer()) {
      if (answer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        answer_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetFriendOptionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.SetFriendOptionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_verify_type;
        break;
      }

      // optional uint32 verify_type = 2;
      case 2: {
        if (tag == 16) {
         parse_verify_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &verify_type_)));
          set_has_verify_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_question_type;
        break;
      }

      // optional uint32 question_type = 3;
      case 3: {
        if (tag == 24) {
         parse_question_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &question_type_)));
          set_has_question_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_answer;
        break;
      }

      // optional string answer = 4;
      case 4: {
        if (tag == 34) {
         parse_answer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_answer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->answer().data(), this->answer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "answer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.SetFriendOptionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.SetFriendOptionRequest)
  return false;
#undef DO_
}

void SetFriendOptionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.SetFriendOptionRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint32 verify_type = 2;
  if (has_verify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->verify_type(), output);
  }

  // optional uint32 question_type = 3;
  if (has_question_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->question_type(), output);
  }

  // optional string answer = 4;
  if (has_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "answer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->answer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.SetFriendOptionRequest)
}

::google::protobuf::uint8* SetFriendOptionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.SetFriendOptionRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint32 verify_type = 2;
  if (has_verify_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->verify_type(), target);
  }

  // optional uint32 question_type = 3;
  if (has_question_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->question_type(), target);
  }

  // optional string answer = 4;
  if (has_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "answer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->answer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.SetFriendOptionRequest)
  return target;
}

int SetFriendOptionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint32 verify_type = 2;
    if (has_verify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->verify_type());
    }

    // optional uint32 question_type = 3;
    if (has_question_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->question_type());
    }

    // optional string answer = 4;
    if (has_answer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->answer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetFriendOptionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetFriendOptionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetFriendOptionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetFriendOptionRequest::MergeFrom(const SetFriendOptionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_verify_type()) {
      set_verify_type(from.verify_type());
    }
    if (from.has_question_type()) {
      set_question_type(from.question_type());
    }
    if (from.has_answer()) {
      set_answer(from.answer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetFriendOptionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetFriendOptionRequest::CopyFrom(const SetFriendOptionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetFriendOptionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetFriendOptionRequest::Swap(SetFriendOptionRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(verify_type_, other->verify_type_);
    std::swap(question_type_, other->question_type_);
    std::swap(answer_, other->answer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetFriendOptionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetFriendOptionRequest_descriptor_;
  metadata.reflection = SetFriendOptionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetFriendOptionResponse::kResultFieldNumber;
#endif  // !_MSC_VER

SetFriendOptionResponse::SetFriendOptionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.SetFriendOptionResponse)
}

void SetFriendOptionResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::umsProtocol::Result*>(&::umsProtocol::Result::default_instance());
}

SetFriendOptionResponse::SetFriendOptionResponse(const SetFriendOptionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.SetFriendOptionResponse)
}

void SetFriendOptionResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetFriendOptionResponse::~SetFriendOptionResponse() {
  // @@protoc_insertion_point(destructor:umsProtocol.SetFriendOptionResponse)
  SharedDtor();
}

void SetFriendOptionResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void SetFriendOptionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetFriendOptionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetFriendOptionResponse_descriptor_;
}

const SetFriendOptionResponse& SetFriendOptionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

SetFriendOptionResponse* SetFriendOptionResponse::default_instance_ = NULL;

SetFriendOptionResponse* SetFriendOptionResponse::New() const {
  return new SetFriendOptionResponse;
}

void SetFriendOptionResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::umsProtocol::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetFriendOptionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.SetFriendOptionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .umsProtocol.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.SetFriendOptionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.SetFriendOptionResponse)
  return false;
#undef DO_
}

void SetFriendOptionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.SetFriendOptionResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.SetFriendOptionResponse)
}

::google::protobuf::uint8* SetFriendOptionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.SetFriendOptionResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.SetFriendOptionResponse)
  return target;
}

int SetFriendOptionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .umsProtocol.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetFriendOptionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetFriendOptionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetFriendOptionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetFriendOptionResponse::MergeFrom(const SetFriendOptionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::umsProtocol::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetFriendOptionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetFriendOptionResponse::CopyFrom(const SetFriendOptionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetFriendOptionResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void SetFriendOptionResponse::Swap(SetFriendOptionResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetFriendOptionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetFriendOptionResponse_descriptor_;
  metadata.reflection = SetFriendOptionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteGroupRequest::kUserIdFieldNumber;
const int DeleteGroupRequest::kGroupIdFieldNumber;
#endif  // !_MSC_VER

DeleteGroupRequest::DeleteGroupRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.DeleteGroupRequest)
}

void DeleteGroupRequest::InitAsDefaultInstance() {
}

DeleteGroupRequest::DeleteGroupRequest(const DeleteGroupRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.DeleteGroupRequest)
}

void DeleteGroupRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteGroupRequest::~DeleteGroupRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.DeleteGroupRequest)
  SharedDtor();
}

void DeleteGroupRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteGroupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteGroupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteGroupRequest_descriptor_;
}

const DeleteGroupRequest& DeleteGroupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

DeleteGroupRequest* DeleteGroupRequest::default_instance_ = NULL;

DeleteGroupRequest* DeleteGroupRequest::New() const {
  return new DeleteGroupRequest;
}

void DeleteGroupRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DeleteGroupRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, group_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.DeleteGroupRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // optional uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.DeleteGroupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.DeleteGroupRequest)
  return false;
#undef DO_
}

void DeleteGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.DeleteGroupRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.DeleteGroupRequest)
}

::google::protobuf::uint8* DeleteGroupRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.DeleteGroupRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.DeleteGroupRequest)
  return target;
}

int DeleteGroupRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteGroupRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteGroupRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteGroupRequest::MergeFrom(const DeleteGroupRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteGroupRequest::CopyFrom(const DeleteGroupRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteGroupRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DeleteGroupRequest::Swap(DeleteGroupRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteGroupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteGroupRequest_descriptor_;
  metadata.reflection = DeleteGroupRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteGroupResponse::kResultFieldNumber;
#endif  // !_MSC_VER

DeleteGroupResponse::DeleteGroupResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.DeleteGroupResponse)
}

void DeleteGroupResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::umsProtocol::Result*>(&::umsProtocol::Result::default_instance());
}

DeleteGroupResponse::DeleteGroupResponse(const DeleteGroupResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.DeleteGroupResponse)
}

void DeleteGroupResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteGroupResponse::~DeleteGroupResponse() {
  // @@protoc_insertion_point(destructor:umsProtocol.DeleteGroupResponse)
  SharedDtor();
}

void DeleteGroupResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void DeleteGroupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteGroupResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteGroupResponse_descriptor_;
}

const DeleteGroupResponse& DeleteGroupResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

DeleteGroupResponse* DeleteGroupResponse::default_instance_ = NULL;

DeleteGroupResponse* DeleteGroupResponse::New() const {
  return new DeleteGroupResponse;
}

void DeleteGroupResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::umsProtocol::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.DeleteGroupResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .umsProtocol.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.DeleteGroupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.DeleteGroupResponse)
  return false;
#undef DO_
}

void DeleteGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.DeleteGroupResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.DeleteGroupResponse)
}

::google::protobuf::uint8* DeleteGroupResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.DeleteGroupResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.DeleteGroupResponse)
  return target;
}

int DeleteGroupResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .umsProtocol.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteGroupResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteGroupResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteGroupResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteGroupResponse::MergeFrom(const DeleteGroupResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::umsProtocol::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteGroupResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteGroupResponse::CopyFrom(const DeleteGroupResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteGroupResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void DeleteGroupResponse::Swap(DeleteGroupResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteGroupResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteGroupResponse_descriptor_;
  metadata.reflection = DeleteGroupResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateGroupUserInfoRequest::kUserIdFieldNumber;
const int UpdateGroupUserInfoRequest::kGroupIdFieldNumber;
const int UpdateGroupUserInfoRequest::kGroupUserIdFieldNumber;
const int UpdateGroupUserInfoRequest::kRemarkFieldNumber;
const int UpdateGroupUserInfoRequest::kGroupCardFieldNumber;
const int UpdateGroupUserInfoRequest::kEmailFieldNumber;
const int UpdateGroupUserInfoRequest::kTelFieldNumber;
#endif  // !_MSC_VER

UpdateGroupUserInfoRequest::UpdateGroupUserInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.UpdateGroupUserInfoRequest)
}

void UpdateGroupUserInfoRequest::InitAsDefaultInstance() {
}

UpdateGroupUserInfoRequest::UpdateGroupUserInfoRequest(const UpdateGroupUserInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.UpdateGroupUserInfoRequest)
}

void UpdateGroupUserInfoRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  group_user_id_ = GOOGLE_ULONGLONG(0);
  remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateGroupUserInfoRequest::~UpdateGroupUserInfoRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.UpdateGroupUserInfoRequest)
  SharedDtor();
}

void UpdateGroupUserInfoRequest::SharedDtor() {
  if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete remark_;
  }
  if (group_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_card_;
  }
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (tel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tel_;
  }
  if (this != default_instance_) {
  }
}

void UpdateGroupUserInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateGroupUserInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateGroupUserInfoRequest_descriptor_;
}

const UpdateGroupUserInfoRequest& UpdateGroupUserInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

UpdateGroupUserInfoRequest* UpdateGroupUserInfoRequest::default_instance_ = NULL;

UpdateGroupUserInfoRequest* UpdateGroupUserInfoRequest::New() const {
  return new UpdateGroupUserInfoRequest;
}

void UpdateGroupUserInfoRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UpdateGroupUserInfoRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(user_id_, group_user_id_);
    if (has_remark()) {
      if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        remark_->clear();
      }
    }
    if (has_group_card()) {
      if (group_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_card_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        email_->clear();
      }
    }
    if (has_tel()) {
      if (tel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tel_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateGroupUserInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.UpdateGroupUserInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_user_id;
        break;
      }

      // required uint64 group_user_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_user_id_)));
          set_has_group_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_remark;
        break;
      }

      // optional string remark = 4;
      case 4: {
        if (tag == 34) {
         parse_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->remark().data(), this->remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "remark");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_group_card;
        break;
      }

      // optional string group_card = 5;
      case 5: {
        if (tag == 42) {
         parse_group_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_card()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_card().data(), this->group_card().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group_card");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_email;
        break;
      }

      // optional string email = 6;
      case 6: {
        if (tag == 50) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "email");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_tel;
        break;
      }

      // optional string tel = 7;
      case 7: {
        if (tag == 58) {
         parse_tel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tel().data(), this->tel().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tel");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.UpdateGroupUserInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.UpdateGroupUserInfoRequest)
  return false;
#undef DO_
}

void UpdateGroupUserInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.UpdateGroupUserInfoRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  // required uint64 group_user_id = 3;
  if (has_group_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->group_user_id(), output);
  }

  // optional string remark = 4;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->remark(), output);
  }

  // optional string group_card = 5;
  if (has_group_card()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_card().data(), this->group_card().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_card");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->group_card(), output);
  }

  // optional string email = 6;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->email(), output);
  }

  // optional string tel = 7;
  if (has_tel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tel().data(), this->tel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->tel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.UpdateGroupUserInfoRequest)
}

::google::protobuf::uint8* UpdateGroupUserInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.UpdateGroupUserInfoRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  // required uint64 group_user_id = 3;
  if (has_group_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->group_user_id(), target);
  }

  // optional string remark = 4;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->remark(), target);
  }

  // optional string group_card = 5;
  if (has_group_card()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_card().data(), this->group_card().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_card");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->group_card(), target);
  }

  // optional string email = 6;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->email(), target);
  }

  // optional string tel = 7;
  if (has_tel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tel().data(), this->tel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->tel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.UpdateGroupUserInfoRequest)
  return target;
}

int UpdateGroupUserInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // required uint64 group_user_id = 3;
    if (has_group_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_user_id());
    }

    // optional string remark = 4;
    if (has_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remark());
    }

    // optional string group_card = 5;
    if (has_group_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_card());
    }

    // optional string email = 6;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional string tel = 7;
    if (has_tel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateGroupUserInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateGroupUserInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateGroupUserInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateGroupUserInfoRequest::MergeFrom(const UpdateGroupUserInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_user_id()) {
      set_group_user_id(from.group_user_id());
    }
    if (from.has_remark()) {
      set_remark(from.remark());
    }
    if (from.has_group_card()) {
      set_group_card(from.group_card());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_tel()) {
      set_tel(from.tel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateGroupUserInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateGroupUserInfoRequest::CopyFrom(const UpdateGroupUserInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateGroupUserInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UpdateGroupUserInfoRequest::Swap(UpdateGroupUserInfoRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(group_user_id_, other->group_user_id_);
    std::swap(remark_, other->remark_);
    std::swap(group_card_, other->group_card_);
    std::swap(email_, other->email_);
    std::swap(tel_, other->tel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateGroupUserInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateGroupUserInfoRequest_descriptor_;
  metadata.reflection = UpdateGroupUserInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateGroupUserInfoResponse::kResultFieldNumber;
#endif  // !_MSC_VER

UpdateGroupUserInfoResponse::UpdateGroupUserInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.UpdateGroupUserInfoResponse)
}

void UpdateGroupUserInfoResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::umsProtocol::Result*>(&::umsProtocol::Result::default_instance());
}

UpdateGroupUserInfoResponse::UpdateGroupUserInfoResponse(const UpdateGroupUserInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.UpdateGroupUserInfoResponse)
}

void UpdateGroupUserInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateGroupUserInfoResponse::~UpdateGroupUserInfoResponse() {
  // @@protoc_insertion_point(destructor:umsProtocol.UpdateGroupUserInfoResponse)
  SharedDtor();
}

void UpdateGroupUserInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void UpdateGroupUserInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateGroupUserInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateGroupUserInfoResponse_descriptor_;
}

const UpdateGroupUserInfoResponse& UpdateGroupUserInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

UpdateGroupUserInfoResponse* UpdateGroupUserInfoResponse::default_instance_ = NULL;

UpdateGroupUserInfoResponse* UpdateGroupUserInfoResponse::New() const {
  return new UpdateGroupUserInfoResponse;
}

void UpdateGroupUserInfoResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::umsProtocol::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateGroupUserInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.UpdateGroupUserInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .umsProtocol.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.UpdateGroupUserInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.UpdateGroupUserInfoResponse)
  return false;
#undef DO_
}

void UpdateGroupUserInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.UpdateGroupUserInfoResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.UpdateGroupUserInfoResponse)
}

::google::protobuf::uint8* UpdateGroupUserInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.UpdateGroupUserInfoResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.UpdateGroupUserInfoResponse)
  return target;
}

int UpdateGroupUserInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .umsProtocol.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateGroupUserInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateGroupUserInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateGroupUserInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateGroupUserInfoResponse::MergeFrom(const UpdateGroupUserInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::umsProtocol::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateGroupUserInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateGroupUserInfoResponse::CopyFrom(const UpdateGroupUserInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateGroupUserInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void UpdateGroupUserInfoResponse::Swap(UpdateGroupUserInfoResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateGroupUserInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateGroupUserInfoResponse_descriptor_;
  metadata.reflection = UpdateGroupUserInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateGroupInfoRequest::kUserIdFieldNumber;
const int UpdateGroupInfoRequest::kGroupIdFieldNumber;
const int UpdateGroupInfoRequest::kGroupNameFieldNumber;
const int UpdateGroupInfoRequest::kRemarkFieldNumber;
const int UpdateGroupInfoRequest::kTypeFieldNumber;
const int UpdateGroupInfoRequest::kGroupIntroFieldNumber;
const int UpdateGroupInfoRequest::kGroupNoticeFieldNumber;
const int UpdateGroupInfoRequest::kAvatarFieldNumber;
const int UpdateGroupInfoRequest::kSubTypeFieldNumber;
const int UpdateGroupInfoRequest::kAvatarIdFieldNumber;
#endif  // !_MSC_VER

UpdateGroupInfoRequest::UpdateGroupInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.UpdateGroupInfoRequest)
}

void UpdateGroupInfoRequest::InitAsDefaultInstance() {
}

UpdateGroupInfoRequest::UpdateGroupInfoRequest(const UpdateGroupInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.UpdateGroupInfoRequest)
}

void UpdateGroupInfoRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
  group_intro_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sub_type_ = 0u;
  avatar_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateGroupInfoRequest::~UpdateGroupInfoRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.UpdateGroupInfoRequest)
  SharedDtor();
}

void UpdateGroupInfoRequest::SharedDtor() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete remark_;
  }
  if (group_intro_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_intro_;
  }
  if (group_notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_notice_;
  }
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (this != default_instance_) {
  }
}

void UpdateGroupInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateGroupInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateGroupInfoRequest_descriptor_;
}

const UpdateGroupInfoRequest& UpdateGroupInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

UpdateGroupInfoRequest* UpdateGroupInfoRequest::default_instance_ = NULL;

UpdateGroupInfoRequest* UpdateGroupInfoRequest::New() const {
  return new UpdateGroupInfoRequest;
}

void UpdateGroupInfoRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UpdateGroupInfoRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(user_id_, group_id_);
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_name_->clear();
      }
    }
    if (has_remark()) {
      if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        remark_->clear();
      }
    }
    type_ = 0u;
    if (has_group_intro()) {
      if (group_intro_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_intro_->clear();
      }
    }
    if (has_group_notice()) {
      if (group_notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_notice_->clear();
      }
    }
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    sub_type_ = 0u;
    avatar_id_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateGroupInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.UpdateGroupInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_group_name;
        break;
      }

      // optional string group_name = 3;
      case 3: {
        if (tag == 26) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_name().data(), this->group_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_remark;
        break;
      }

      // optional string remark = 4;
      case 4: {
        if (tag == 34) {
         parse_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->remark().data(), this->remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "remark");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional uint32 type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_group_intro;
        break;
      }

      // optional string group_intro = 6;
      case 6: {
        if (tag == 50) {
         parse_group_intro:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_intro()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_intro().data(), this->group_intro().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group_intro");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_group_notice;
        break;
      }

      // optional string group_notice = 7;
      case 7: {
        if (tag == 58) {
         parse_group_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_notice().data(), this->group_notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group_notice");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_avatar;
        break;
      }

      // optional string avatar = 8;
      case 8: {
        if (tag == 66) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->avatar().data(), this->avatar().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "avatar");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_sub_type;
        break;
      }

      // optional uint32 sub_type = 9;
      case 9: {
        if (tag == 72) {
         parse_sub_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sub_type_)));
          set_has_sub_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_avatar_id;
        break;
      }

      // optional uint32 avatar_id = 10;
      case 10: {
        if (tag == 80) {
         parse_avatar_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_id_)));
          set_has_avatar_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.UpdateGroupInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.UpdateGroupInfoRequest)
  return false;
#undef DO_
}

void UpdateGroupInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.UpdateGroupInfoRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  // optional string group_name = 3;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->group_name(), output);
  }

  // optional string remark = 4;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->remark(), output);
  }

  // optional uint32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->type(), output);
  }

  // optional string group_intro = 6;
  if (has_group_intro()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_intro().data(), this->group_intro().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_intro");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->group_intro(), output);
  }

  // optional string group_notice = 7;
  if (has_group_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_notice().data(), this->group_notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_notice");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->group_notice(), output);
  }

  // optional string avatar = 8;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->avatar(), output);
  }

  // optional uint32 sub_type = 9;
  if (has_sub_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->sub_type(), output);
  }

  // optional uint32 avatar_id = 10;
  if (has_avatar_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->avatar_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.UpdateGroupInfoRequest)
}

::google::protobuf::uint8* UpdateGroupInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.UpdateGroupInfoRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  // optional string group_name = 3;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->group_name(), target);
  }

  // optional string remark = 4;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->remark(), target);
  }

  // optional uint32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->type(), target);
  }

  // optional string group_intro = 6;
  if (has_group_intro()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_intro().data(), this->group_intro().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_intro");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->group_intro(), target);
  }

  // optional string group_notice = 7;
  if (has_group_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_notice().data(), this->group_notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_notice");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->group_notice(), target);
  }

  // optional string avatar = 8;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->avatar(), target);
  }

  // optional uint32 sub_type = 9;
  if (has_sub_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->sub_type(), target);
  }

  // optional uint32 avatar_id = 10;
  if (has_avatar_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->avatar_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.UpdateGroupInfoRequest)
  return target;
}

int UpdateGroupInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional string group_name = 3;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // optional string remark = 4;
    if (has_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remark());
    }

    // optional uint32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional string group_intro = 6;
    if (has_group_intro()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_intro());
    }

    // optional string group_notice = 7;
    if (has_group_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_notice());
    }

    // optional string avatar = 8;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 sub_type = 9;
    if (has_sub_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sub_type());
    }

    // optional uint32 avatar_id = 10;
    if (has_avatar_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatar_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateGroupInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateGroupInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateGroupInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateGroupInfoRequest::MergeFrom(const UpdateGroupInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
    if (from.has_remark()) {
      set_remark(from.remark());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_group_intro()) {
      set_group_intro(from.group_intro());
    }
    if (from.has_group_notice()) {
      set_group_notice(from.group_notice());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sub_type()) {
      set_sub_type(from.sub_type());
    }
    if (from.has_avatar_id()) {
      set_avatar_id(from.avatar_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateGroupInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateGroupInfoRequest::CopyFrom(const UpdateGroupInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateGroupInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UpdateGroupInfoRequest::Swap(UpdateGroupInfoRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(group_name_, other->group_name_);
    std::swap(remark_, other->remark_);
    std::swap(type_, other->type_);
    std::swap(group_intro_, other->group_intro_);
    std::swap(group_notice_, other->group_notice_);
    std::swap(avatar_, other->avatar_);
    std::swap(sub_type_, other->sub_type_);
    std::swap(avatar_id_, other->avatar_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateGroupInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateGroupInfoRequest_descriptor_;
  metadata.reflection = UpdateGroupInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateGroupInfoResponse::kResultFieldNumber;
#endif  // !_MSC_VER

UpdateGroupInfoResponse::UpdateGroupInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.UpdateGroupInfoResponse)
}

void UpdateGroupInfoResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::umsProtocol::Result*>(&::umsProtocol::Result::default_instance());
}

UpdateGroupInfoResponse::UpdateGroupInfoResponse(const UpdateGroupInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.UpdateGroupInfoResponse)
}

void UpdateGroupInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateGroupInfoResponse::~UpdateGroupInfoResponse() {
  // @@protoc_insertion_point(destructor:umsProtocol.UpdateGroupInfoResponse)
  SharedDtor();
}

void UpdateGroupInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void UpdateGroupInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateGroupInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateGroupInfoResponse_descriptor_;
}

const UpdateGroupInfoResponse& UpdateGroupInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

UpdateGroupInfoResponse* UpdateGroupInfoResponse::default_instance_ = NULL;

UpdateGroupInfoResponse* UpdateGroupInfoResponse::New() const {
  return new UpdateGroupInfoResponse;
}

void UpdateGroupInfoResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::umsProtocol::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateGroupInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.UpdateGroupInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .umsProtocol.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.UpdateGroupInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.UpdateGroupInfoResponse)
  return false;
#undef DO_
}

void UpdateGroupInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.UpdateGroupInfoResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.UpdateGroupInfoResponse)
}

::google::protobuf::uint8* UpdateGroupInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.UpdateGroupInfoResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.UpdateGroupInfoResponse)
  return target;
}

int UpdateGroupInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .umsProtocol.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateGroupInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateGroupInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateGroupInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateGroupInfoResponse::MergeFrom(const UpdateGroupInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::umsProtocol::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateGroupInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateGroupInfoResponse::CopyFrom(const UpdateGroupInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateGroupInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void UpdateGroupInfoResponse::Swap(UpdateGroupInfoResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateGroupInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateGroupInfoResponse_descriptor_;
  metadata.reflection = UpdateGroupInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateGroupOptionRequest::kUserIdFieldNumber;
const int UpdateGroupOptionRequest::kGroupIdFieldNumber;
const int UpdateGroupOptionRequest::kVerifyTypeFieldNumber;
const int UpdateGroupOptionRequest::kChannelIdFieldNumber;
#endif  // !_MSC_VER

UpdateGroupOptionRequest::UpdateGroupOptionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.UpdateGroupOptionRequest)
}

void UpdateGroupOptionRequest::InitAsDefaultInstance() {
}

UpdateGroupOptionRequest::UpdateGroupOptionRequest(const UpdateGroupOptionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.UpdateGroupOptionRequest)
}

void UpdateGroupOptionRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  verify_type_ = 0u;
  channel_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateGroupOptionRequest::~UpdateGroupOptionRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.UpdateGroupOptionRequest)
  SharedDtor();
}

void UpdateGroupOptionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateGroupOptionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateGroupOptionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateGroupOptionRequest_descriptor_;
}

const UpdateGroupOptionRequest& UpdateGroupOptionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

UpdateGroupOptionRequest* UpdateGroupOptionRequest::default_instance_ = NULL;

UpdateGroupOptionRequest* UpdateGroupOptionRequest::New() const {
  return new UpdateGroupOptionRequest;
}

void UpdateGroupOptionRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UpdateGroupOptionRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, verify_type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateGroupOptionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.UpdateGroupOptionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_verify_type;
        break;
      }

      // optional uint32 verify_type = 3;
      case 3: {
        if (tag == 24) {
         parse_verify_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &verify_type_)));
          set_has_verify_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_channel_id;
        break;
      }

      // optional uint64 channel_id = 4;
      case 4: {
        if (tag == 32) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.UpdateGroupOptionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.UpdateGroupOptionRequest)
  return false;
#undef DO_
}

void UpdateGroupOptionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.UpdateGroupOptionRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  // optional uint32 verify_type = 3;
  if (has_verify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->verify_type(), output);
  }

  // optional uint64 channel_id = 4;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->channel_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.UpdateGroupOptionRequest)
}

::google::protobuf::uint8* UpdateGroupOptionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.UpdateGroupOptionRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  // optional uint32 verify_type = 3;
  if (has_verify_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->verify_type(), target);
  }

  // optional uint64 channel_id = 4;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->channel_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.UpdateGroupOptionRequest)
  return target;
}

int UpdateGroupOptionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional uint32 verify_type = 3;
    if (has_verify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->verify_type());
    }

    // optional uint64 channel_id = 4;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->channel_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateGroupOptionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateGroupOptionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateGroupOptionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateGroupOptionRequest::MergeFrom(const UpdateGroupOptionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_verify_type()) {
      set_verify_type(from.verify_type());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateGroupOptionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateGroupOptionRequest::CopyFrom(const UpdateGroupOptionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateGroupOptionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UpdateGroupOptionRequest::Swap(UpdateGroupOptionRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(verify_type_, other->verify_type_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateGroupOptionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateGroupOptionRequest_descriptor_;
  metadata.reflection = UpdateGroupOptionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateGroupOptionResponse::kResultFieldNumber;
#endif  // !_MSC_VER

UpdateGroupOptionResponse::UpdateGroupOptionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.UpdateGroupOptionResponse)
}

void UpdateGroupOptionResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::umsProtocol::Result*>(&::umsProtocol::Result::default_instance());
}

UpdateGroupOptionResponse::UpdateGroupOptionResponse(const UpdateGroupOptionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.UpdateGroupOptionResponse)
}

void UpdateGroupOptionResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateGroupOptionResponse::~UpdateGroupOptionResponse() {
  // @@protoc_insertion_point(destructor:umsProtocol.UpdateGroupOptionResponse)
  SharedDtor();
}

void UpdateGroupOptionResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void UpdateGroupOptionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateGroupOptionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateGroupOptionResponse_descriptor_;
}

const UpdateGroupOptionResponse& UpdateGroupOptionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

UpdateGroupOptionResponse* UpdateGroupOptionResponse::default_instance_ = NULL;

UpdateGroupOptionResponse* UpdateGroupOptionResponse::New() const {
  return new UpdateGroupOptionResponse;
}

void UpdateGroupOptionResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::umsProtocol::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateGroupOptionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.UpdateGroupOptionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .umsProtocol.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.UpdateGroupOptionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.UpdateGroupOptionResponse)
  return false;
#undef DO_
}

void UpdateGroupOptionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.UpdateGroupOptionResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.UpdateGroupOptionResponse)
}

::google::protobuf::uint8* UpdateGroupOptionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.UpdateGroupOptionResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.UpdateGroupOptionResponse)
  return target;
}

int UpdateGroupOptionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .umsProtocol.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateGroupOptionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateGroupOptionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateGroupOptionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateGroupOptionResponse::MergeFrom(const UpdateGroupOptionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::umsProtocol::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateGroupOptionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateGroupOptionResponse::CopyFrom(const UpdateGroupOptionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateGroupOptionResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void UpdateGroupOptionResponse::Swap(UpdateGroupOptionResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateGroupOptionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateGroupOptionResponse_descriptor_;
  metadata.reflection = UpdateGroupOptionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateGroupNoticeRequest::kUserIdFieldNumber;
const int UpdateGroupNoticeRequest::kGroupIdFieldNumber;
const int UpdateGroupNoticeRequest::kNoticeFieldNumber;
#endif  // !_MSC_VER

UpdateGroupNoticeRequest::UpdateGroupNoticeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.UpdateGroupNoticeRequest)
}

void UpdateGroupNoticeRequest::InitAsDefaultInstance() {
}

UpdateGroupNoticeRequest::UpdateGroupNoticeRequest(const UpdateGroupNoticeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.UpdateGroupNoticeRequest)
}

void UpdateGroupNoticeRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateGroupNoticeRequest::~UpdateGroupNoticeRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.UpdateGroupNoticeRequest)
  SharedDtor();
}

void UpdateGroupNoticeRequest::SharedDtor() {
  if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

void UpdateGroupNoticeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateGroupNoticeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateGroupNoticeRequest_descriptor_;
}

const UpdateGroupNoticeRequest& UpdateGroupNoticeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

UpdateGroupNoticeRequest* UpdateGroupNoticeRequest::default_instance_ = NULL;

UpdateGroupNoticeRequest* UpdateGroupNoticeRequest::New() const {
  return new UpdateGroupNoticeRequest;
}

void UpdateGroupNoticeRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UpdateGroupNoticeRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(user_id_, group_id_);
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        notice_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateGroupNoticeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.UpdateGroupNoticeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_notice;
        break;
      }

      // optional string notice = 3;
      case 3: {
        if (tag == 26) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "notice");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.UpdateGroupNoticeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.UpdateGroupNoticeRequest)
  return false;
#undef DO_
}

void UpdateGroupNoticeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.UpdateGroupNoticeRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  // optional string notice = 3;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "notice");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->notice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.UpdateGroupNoticeRequest)
}

::google::protobuf::uint8* UpdateGroupNoticeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.UpdateGroupNoticeRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  // optional string notice = 3;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "notice");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->notice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.UpdateGroupNoticeRequest)
  return target;
}

int UpdateGroupNoticeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional string notice = 3;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateGroupNoticeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateGroupNoticeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateGroupNoticeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateGroupNoticeRequest::MergeFrom(const UpdateGroupNoticeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateGroupNoticeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateGroupNoticeRequest::CopyFrom(const UpdateGroupNoticeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateGroupNoticeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UpdateGroupNoticeRequest::Swap(UpdateGroupNoticeRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(notice_, other->notice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateGroupNoticeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateGroupNoticeRequest_descriptor_;
  metadata.reflection = UpdateGroupNoticeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateGroupNoticeResponse::kResultFieldNumber;
#endif  // !_MSC_VER

UpdateGroupNoticeResponse::UpdateGroupNoticeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.UpdateGroupNoticeResponse)
}

void UpdateGroupNoticeResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::umsProtocol::Result*>(&::umsProtocol::Result::default_instance());
}

UpdateGroupNoticeResponse::UpdateGroupNoticeResponse(const UpdateGroupNoticeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.UpdateGroupNoticeResponse)
}

void UpdateGroupNoticeResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateGroupNoticeResponse::~UpdateGroupNoticeResponse() {
  // @@protoc_insertion_point(destructor:umsProtocol.UpdateGroupNoticeResponse)
  SharedDtor();
}

void UpdateGroupNoticeResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void UpdateGroupNoticeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateGroupNoticeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateGroupNoticeResponse_descriptor_;
}

const UpdateGroupNoticeResponse& UpdateGroupNoticeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

UpdateGroupNoticeResponse* UpdateGroupNoticeResponse::default_instance_ = NULL;

UpdateGroupNoticeResponse* UpdateGroupNoticeResponse::New() const {
  return new UpdateGroupNoticeResponse;
}

void UpdateGroupNoticeResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::umsProtocol::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateGroupNoticeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.UpdateGroupNoticeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .umsProtocol.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.UpdateGroupNoticeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.UpdateGroupNoticeResponse)
  return false;
#undef DO_
}

void UpdateGroupNoticeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.UpdateGroupNoticeResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.UpdateGroupNoticeResponse)
}

::google::protobuf::uint8* UpdateGroupNoticeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.UpdateGroupNoticeResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.UpdateGroupNoticeResponse)
  return target;
}

int UpdateGroupNoticeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .umsProtocol.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateGroupNoticeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateGroupNoticeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateGroupNoticeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateGroupNoticeResponse::MergeFrom(const UpdateGroupNoticeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::umsProtocol::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateGroupNoticeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateGroupNoticeResponse::CopyFrom(const UpdateGroupNoticeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateGroupNoticeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void UpdateGroupNoticeResponse::Swap(UpdateGroupNoticeResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateGroupNoticeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateGroupNoticeResponse_descriptor_;
  metadata.reflection = UpdateGroupNoticeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGroupInfoRequest::kUserIdFieldNumber;
const int GetGroupInfoRequest::kGroupIdFieldNumber;
#endif  // !_MSC_VER

GetGroupInfoRequest::GetGroupInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.GetGroupInfoRequest)
}

void GetGroupInfoRequest::InitAsDefaultInstance() {
}

GetGroupInfoRequest::GetGroupInfoRequest(const GetGroupInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.GetGroupInfoRequest)
}

void GetGroupInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGroupInfoRequest::~GetGroupInfoRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.GetGroupInfoRequest)
  SharedDtor();
}

void GetGroupInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGroupInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGroupInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGroupInfoRequest_descriptor_;
}

const GetGroupInfoRequest& GetGroupInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

GetGroupInfoRequest* GetGroupInfoRequest::default_instance_ = NULL;

GetGroupInfoRequest* GetGroupInfoRequest::New() const {
  return new GetGroupInfoRequest;
}

void GetGroupInfoRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetGroupInfoRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, group_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGroupInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.GetGroupInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.GetGroupInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.GetGroupInfoRequest)
  return false;
#undef DO_
}

void GetGroupInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.GetGroupInfoRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.GetGroupInfoRequest)
}

::google::protobuf::uint8* GetGroupInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.GetGroupInfoRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.GetGroupInfoRequest)
  return target;
}

int GetGroupInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroupInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGroupInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGroupInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGroupInfoRequest::MergeFrom(const GetGroupInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGroupInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGroupInfoRequest::CopyFrom(const GetGroupInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetGroupInfoRequest::Swap(GetGroupInfoRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGroupInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGroupInfoRequest_descriptor_;
  metadata.reflection = GetGroupInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGroupInfoResponse::kUserIdFieldNumber;
const int GetGroupInfoResponse::kGroupIdFieldNumber;
const int GetGroupInfoResponse::kGroupNameFieldNumber;
const int GetGroupInfoResponse::kRemarkFieldNumber;
const int GetGroupInfoResponse::kTypeFieldNumber;
const int GetGroupInfoResponse::kGroupIntroFieldNumber;
const int GetGroupInfoResponse::kGroupNoticeFieldNumber;
const int GetGroupInfoResponse::kAvatarFieldNumber;
const int GetGroupInfoResponse::kResultFieldNumber;
const int GetGroupInfoResponse::kSubTypeFieldNumber;
const int GetGroupInfoResponse::kGroupNumberFieldNumber;
const int GetGroupInfoResponse::kAvatarIdFieldNumber;
const int GetGroupInfoResponse::kOwnerIdFieldNumber;
#endif  // !_MSC_VER

GetGroupInfoResponse::GetGroupInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.GetGroupInfoResponse)
}

void GetGroupInfoResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::umsProtocol::Result*>(&::umsProtocol::Result::default_instance());
}

GetGroupInfoResponse::GetGroupInfoResponse(const GetGroupInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.GetGroupInfoResponse)
}

void GetGroupInfoResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
  group_intro_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = NULL;
  sub_type_ = 0u;
  group_number_ = GOOGLE_ULONGLONG(0);
  avatar_id_ = 0u;
  owner_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGroupInfoResponse::~GetGroupInfoResponse() {
  // @@protoc_insertion_point(destructor:umsProtocol.GetGroupInfoResponse)
  SharedDtor();
}

void GetGroupInfoResponse::SharedDtor() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete remark_;
  }
  if (group_intro_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_intro_;
  }
  if (group_notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_notice_;
  }
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (this != default_instance_) {
    delete result_;
  }
}

void GetGroupInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGroupInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGroupInfoResponse_descriptor_;
}

const GetGroupInfoResponse& GetGroupInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

GetGroupInfoResponse* GetGroupInfoResponse::default_instance_ = NULL;

GetGroupInfoResponse* GetGroupInfoResponse::New() const {
  return new GetGroupInfoResponse;
}

void GetGroupInfoResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetGroupInfoResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(user_id_, group_id_);
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_name_->clear();
      }
    }
    if (has_remark()) {
      if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        remark_->clear();
      }
    }
    type_ = 0u;
    if (has_group_intro()) {
      if (group_intro_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_intro_->clear();
      }
    }
    if (has_group_notice()) {
      if (group_notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_notice_->clear();
      }
    }
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(group_number_, avatar_id_);
    if (has_result()) {
      if (result_ != NULL) result_->::umsProtocol::Result::Clear();
    }
    sub_type_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGroupInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.GetGroupInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // optional uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_group_name;
        break;
      }

      // optional string group_name = 3;
      case 3: {
        if (tag == 26) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_name().data(), this->group_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_remark;
        break;
      }

      // optional string remark = 4;
      case 4: {
        if (tag == 34) {
         parse_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->remark().data(), this->remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "remark");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional uint32 type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_group_intro;
        break;
      }

      // optional string group_intro = 6;
      case 6: {
        if (tag == 50) {
         parse_group_intro:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_intro()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_intro().data(), this->group_intro().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group_intro");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_group_notice;
        break;
      }

      // optional string group_notice = 7;
      case 7: {
        if (tag == 58) {
         parse_group_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_notice().data(), this->group_notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group_notice");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_avatar;
        break;
      }

      // optional string avatar = 8;
      case 8: {
        if (tag == 66) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->avatar().data(), this->avatar().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "avatar");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_result;
        break;
      }

      // required .umsProtocol.Result result = 9;
      case 9: {
        if (tag == 74) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_sub_type;
        break;
      }

      // optional uint32 sub_type = 10;
      case 10: {
        if (tag == 80) {
         parse_sub_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sub_type_)));
          set_has_sub_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_group_number;
        break;
      }

      // optional uint64 group_number = 11;
      case 11: {
        if (tag == 88) {
         parse_group_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_number_)));
          set_has_group_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_avatar_id;
        break;
      }

      // optional uint32 avatar_id = 12;
      case 12: {
        if (tag == 96) {
         parse_avatar_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_id_)));
          set_has_avatar_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_owner_id;
        break;
      }

      // optional uint64 owner_id = 13;
      case 13: {
        if (tag == 104) {
         parse_owner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &owner_id_)));
          set_has_owner_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.GetGroupInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.GetGroupInfoResponse)
  return false;
#undef DO_
}

void GetGroupInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.GetGroupInfoResponse)
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  // optional string group_name = 3;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->group_name(), output);
  }

  // optional string remark = 4;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->remark(), output);
  }

  // optional uint32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->type(), output);
  }

  // optional string group_intro = 6;
  if (has_group_intro()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_intro().data(), this->group_intro().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_intro");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->group_intro(), output);
  }

  // optional string group_notice = 7;
  if (has_group_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_notice().data(), this->group_notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_notice");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->group_notice(), output);
  }

  // optional string avatar = 8;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->avatar(), output);
  }

  // required .umsProtocol.Result result = 9;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->result(), output);
  }

  // optional uint32 sub_type = 10;
  if (has_sub_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->sub_type(), output);
  }

  // optional uint64 group_number = 11;
  if (has_group_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->group_number(), output);
  }

  // optional uint32 avatar_id = 12;
  if (has_avatar_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->avatar_id(), output);
  }

  // optional uint64 owner_id = 13;
  if (has_owner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->owner_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.GetGroupInfoResponse)
}

::google::protobuf::uint8* GetGroupInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.GetGroupInfoResponse)
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  // optional string group_name = 3;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->group_name(), target);
  }

  // optional string remark = 4;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->remark(), target);
  }

  // optional uint32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->type(), target);
  }

  // optional string group_intro = 6;
  if (has_group_intro()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_intro().data(), this->group_intro().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_intro");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->group_intro(), target);
  }

  // optional string group_notice = 7;
  if (has_group_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_notice().data(), this->group_notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_notice");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->group_notice(), target);
  }

  // optional string avatar = 8;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->avatar(), target);
  }

  // required .umsProtocol.Result result = 9;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->result(), target);
  }

  // optional uint32 sub_type = 10;
  if (has_sub_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->sub_type(), target);
  }

  // optional uint64 group_number = 11;
  if (has_group_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->group_number(), target);
  }

  // optional uint32 avatar_id = 12;
  if (has_avatar_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->avatar_id(), target);
  }

  // optional uint64 owner_id = 13;
  if (has_owner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->owner_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.GetGroupInfoResponse)
  return target;
}

int GetGroupInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional string group_name = 3;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // optional string remark = 4;
    if (has_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remark());
    }

    // optional uint32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional string group_intro = 6;
    if (has_group_intro()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_intro());
    }

    // optional string group_notice = 7;
    if (has_group_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_notice());
    }

    // optional string avatar = 8;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .umsProtocol.Result result = 9;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional uint32 sub_type = 10;
    if (has_sub_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sub_type());
    }

    // optional uint64 group_number = 11;
    if (has_group_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_number());
    }

    // optional uint32 avatar_id = 12;
    if (has_avatar_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatar_id());
    }

    // optional uint64 owner_id = 13;
    if (has_owner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->owner_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroupInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGroupInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGroupInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGroupInfoResponse::MergeFrom(const GetGroupInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
    if (from.has_remark()) {
      set_remark(from.remark());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_group_intro()) {
      set_group_intro(from.group_intro());
    }
    if (from.has_group_notice()) {
      set_group_notice(from.group_notice());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_result()) {
      mutable_result()->::umsProtocol::Result::MergeFrom(from.result());
    }
    if (from.has_sub_type()) {
      set_sub_type(from.sub_type());
    }
    if (from.has_group_number()) {
      set_group_number(from.group_number());
    }
    if (from.has_avatar_id()) {
      set_avatar_id(from.avatar_id());
    }
    if (from.has_owner_id()) {
      set_owner_id(from.owner_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGroupInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGroupInfoResponse::CopyFrom(const GetGroupInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000100) != 0x00000100) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void GetGroupInfoResponse::Swap(GetGroupInfoResponse* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(group_name_, other->group_name_);
    std::swap(remark_, other->remark_);
    std::swap(type_, other->type_);
    std::swap(group_intro_, other->group_intro_);
    std::swap(group_notice_, other->group_notice_);
    std::swap(avatar_, other->avatar_);
    std::swap(result_, other->result_);
    std::swap(sub_type_, other->sub_type_);
    std::swap(group_number_, other->group_number_);
    std::swap(avatar_id_, other->avatar_id_);
    std::swap(owner_id_, other->owner_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGroupInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGroupInfoResponse_descriptor_;
  metadata.reflection = GetGroupInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateUserInfoRequest::kUserIdFieldNumber;
const int UpdateUserInfoRequest::kNickNameFieldNumber;
const int UpdateUserInfoRequest::kSexFieldNumber;
const int UpdateUserInfoRequest::kMobileFieldNumber;
const int UpdateUserInfoRequest::kBirthdayFieldNumber;
const int UpdateUserInfoRequest::kEmailFieldNumber;
const int UpdateUserInfoRequest::kAgeFieldNumber;
const int UpdateUserInfoRequest::kConstellationFieldNumber;
const int UpdateUserInfoRequest::kSignFieldNumber;
const int UpdateUserInfoRequest::kLikeFieldNumber;
const int UpdateUserInfoRequest::kCityFieldNumber;
const int UpdateUserInfoRequest::kPersonalDescFieldNumber;
const int UpdateUserInfoRequest::kRealNameFieldNumber;
const int UpdateUserInfoRequest::kTokenFieldNumber;
#endif  // !_MSC_VER

UpdateUserInfoRequest::UpdateUserInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.UpdateUserInfoRequest)
}

void UpdateUserInfoRequest::InitAsDefaultInstance() {
}

UpdateUserInfoRequest::UpdateUserInfoRequest(const UpdateUserInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.UpdateUserInfoRequest)
}

void UpdateUserInfoRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 0u;
  mobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  birthday_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  age_ = 0u;
  constellation_ = 0u;
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  like_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  personal_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateUserInfoRequest::~UpdateUserInfoRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.UpdateUserInfoRequest)
  SharedDtor();
}

void UpdateUserInfoRequest::SharedDtor() {
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_name_;
  }
  if (mobile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_;
  }
  if (birthday_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete birthday_;
  }
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (like_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete like_;
  }
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_;
  }
  if (personal_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete personal_desc_;
  }
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void UpdateUserInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateUserInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateUserInfoRequest_descriptor_;
}

const UpdateUserInfoRequest& UpdateUserInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

UpdateUserInfoRequest* UpdateUserInfoRequest::default_instance_ = NULL;

UpdateUserInfoRequest* UpdateUserInfoRequest::New() const {
  return new UpdateUserInfoRequest;
}

void UpdateUserInfoRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UpdateUserInfoRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(sex_, age_);
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nick_name_->clear();
      }
    }
    if (has_mobile()) {
      if (mobile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_->clear();
      }
    }
    if (has_birthday()) {
      if (birthday_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        birthday_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        email_->clear();
      }
    }
    constellation_ = 0u;
  }
  if (_has_bits_[8 / 32] & 16128) {
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_->clear();
      }
    }
    if (has_like()) {
      if (like_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        like_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        city_->clear();
      }
    }
    if (has_personal_desc()) {
      if (personal_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        personal_desc_->clear();
      }
    }
    if (has_real_name()) {
      if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        real_name_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateUserInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.UpdateUserInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 2;
      case 2: {
        if (tag == 18) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nick_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 3;
      case 3: {
        if (tag == 24) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mobile;
        break;
      }

      // optional string mobile = 4;
      case 4: {
        if (tag == 34) {
         parse_mobile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mobile().data(), this->mobile().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mobile");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_birthday;
        break;
      }

      // optional string birthday = 5;
      case 5: {
        if (tag == 42) {
         parse_birthday:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_birthday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->birthday().data(), this->birthday().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "birthday");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_email;
        break;
      }

      // optional string email = 6;
      case 6: {
        if (tag == 50) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "email");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_age;
        break;
      }

      // optional uint32 age = 7;
      case 7: {
        if (tag == 56) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &age_)));
          set_has_age();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_constellation;
        break;
      }

      // optional uint32 constellation = 8;
      case 8: {
        if (tag == 64) {
         parse_constellation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &constellation_)));
          set_has_constellation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_sign;
        break;
      }

      // optional string sign = 9;
      case 9: {
        if (tag == 74) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sign");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_like;
        break;
      }

      // optional string like = 10;
      case 10: {
        if (tag == 82) {
         parse_like:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_like()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->like().data(), this->like().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "like");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_city;
        break;
      }

      // optional string city = 11;
      case 11: {
        if (tag == 90) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "city");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_personal_desc;
        break;
      }

      // optional string personal_desc = 12;
      case 12: {
        if (tag == 98) {
         parse_personal_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_personal_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->personal_desc().data(), this->personal_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "personal_desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_real_name;
        break;
      }

      // optional string real_name = 13;
      case 13: {
        if (tag == 106) {
         parse_real_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_real_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->real_name().data(), this->real_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "real_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_token;
        break;
      }

      // optional string token = 14;
      case 14: {
        if (tag == 114) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.UpdateUserInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.UpdateUserInfoRequest)
  return false;
#undef DO_
}

void UpdateUserInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.UpdateUserInfoRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nick_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nick_name(), output);
  }

  // optional uint32 sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sex(), output);
  }

  // optional string mobile = 4;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mobile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->mobile(), output);
  }

  // optional string birthday = 5;
  if (has_birthday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->birthday().data(), this->birthday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "birthday");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->birthday(), output);
  }

  // optional string email = 6;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->email(), output);
  }

  // optional uint32 age = 7;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->age(), output);
  }

  // optional uint32 constellation = 8;
  if (has_constellation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->constellation(), output);
  }

  // optional string sign = 9;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->sign(), output);
  }

  // optional string like = 10;
  if (has_like()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->like().data(), this->like().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "like");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->like(), output);
  }

  // optional string city = 11;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->city(), output);
  }

  // optional string personal_desc = 12;
  if (has_personal_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->personal_desc().data(), this->personal_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "personal_desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->personal_desc(), output);
  }

  // optional string real_name = 13;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->real_name().data(), this->real_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "real_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->real_name(), output);
  }

  // optional string token = 14;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.UpdateUserInfoRequest)
}

::google::protobuf::uint8* UpdateUserInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.UpdateUserInfoRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nick_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nick_name(), target);
  }

  // optional uint32 sex = 3;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sex(), target);
  }

  // optional string mobile = 4;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mobile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mobile(), target);
  }

  // optional string birthday = 5;
  if (has_birthday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->birthday().data(), this->birthday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "birthday");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->birthday(), target);
  }

  // optional string email = 6;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->email(), target);
  }

  // optional uint32 age = 7;
  if (has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->age(), target);
  }

  // optional uint32 constellation = 8;
  if (has_constellation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->constellation(), target);
  }

  // optional string sign = 9;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->sign(), target);
  }

  // optional string like = 10;
  if (has_like()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->like().data(), this->like().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "like");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->like(), target);
  }

  // optional string city = 11;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->city(), target);
  }

  // optional string personal_desc = 12;
  if (has_personal_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->personal_desc().data(), this->personal_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "personal_desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->personal_desc(), target);
  }

  // optional string real_name = 13;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->real_name().data(), this->real_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "real_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->real_name(), target);
  }

  // optional string token = 14;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.UpdateUserInfoRequest)
  return target;
}

int UpdateUserInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string nick_name = 2;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

    // optional uint32 sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional string mobile = 4;
    if (has_mobile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobile());
    }

    // optional string birthday = 5;
    if (has_birthday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->birthday());
    }

    // optional string email = 6;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional uint32 age = 7;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->age());
    }

    // optional uint32 constellation = 8;
    if (has_constellation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->constellation());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string sign = 9;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

    // optional string like = 10;
    if (has_like()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->like());
    }

    // optional string city = 11;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // optional string personal_desc = 12;
    if (has_personal_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->personal_desc());
    }

    // optional string real_name = 13;
    if (has_real_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->real_name());
    }

    // optional string token = 14;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateUserInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateUserInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateUserInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateUserInfoRequest::MergeFrom(const UpdateUserInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_mobile()) {
      set_mobile(from.mobile());
    }
    if (from.has_birthday()) {
      set_birthday(from.birthday());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
    if (from.has_constellation()) {
      set_constellation(from.constellation());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_like()) {
      set_like(from.like());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_personal_desc()) {
      set_personal_desc(from.personal_desc());
    }
    if (from.has_real_name()) {
      set_real_name(from.real_name());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateUserInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateUserInfoRequest::CopyFrom(const UpdateUserInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UpdateUserInfoRequest::Swap(UpdateUserInfoRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(sex_, other->sex_);
    std::swap(mobile_, other->mobile_);
    std::swap(birthday_, other->birthday_);
    std::swap(email_, other->email_);
    std::swap(age_, other->age_);
    std::swap(constellation_, other->constellation_);
    std::swap(sign_, other->sign_);
    std::swap(like_, other->like_);
    std::swap(city_, other->city_);
    std::swap(personal_desc_, other->personal_desc_);
    std::swap(real_name_, other->real_name_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateUserInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateUserInfoRequest_descriptor_;
  metadata.reflection = UpdateUserInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateUserInfoResponse::kResultFieldNumber;
#endif  // !_MSC_VER

UpdateUserInfoResponse::UpdateUserInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.UpdateUserInfoResponse)
}

void UpdateUserInfoResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::umsProtocol::Result*>(&::umsProtocol::Result::default_instance());
}

UpdateUserInfoResponse::UpdateUserInfoResponse(const UpdateUserInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.UpdateUserInfoResponse)
}

void UpdateUserInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateUserInfoResponse::~UpdateUserInfoResponse() {
  // @@protoc_insertion_point(destructor:umsProtocol.UpdateUserInfoResponse)
  SharedDtor();
}

void UpdateUserInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void UpdateUserInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateUserInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateUserInfoResponse_descriptor_;
}

const UpdateUserInfoResponse& UpdateUserInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

UpdateUserInfoResponse* UpdateUserInfoResponse::default_instance_ = NULL;

UpdateUserInfoResponse* UpdateUserInfoResponse::New() const {
  return new UpdateUserInfoResponse;
}

void UpdateUserInfoResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::umsProtocol::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateUserInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.UpdateUserInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .umsProtocol.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.UpdateUserInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.UpdateUserInfoResponse)
  return false;
#undef DO_
}

void UpdateUserInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.UpdateUserInfoResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.UpdateUserInfoResponse)
}

::google::protobuf::uint8* UpdateUserInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.UpdateUserInfoResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.UpdateUserInfoResponse)
  return target;
}

int UpdateUserInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .umsProtocol.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateUserInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateUserInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateUserInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateUserInfoResponse::MergeFrom(const UpdateUserInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::umsProtocol::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateUserInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateUserInfoResponse::CopyFrom(const UpdateUserInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void UpdateUserInfoResponse::Swap(UpdateUserInfoResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateUserInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateUserInfoResponse_descriptor_;
  metadata.reflection = UpdateUserInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateUserMoodRequest::kUserIdFieldNumber;
const int UpdateUserMoodRequest::kMoodFieldNumber;
#endif  // !_MSC_VER

UpdateUserMoodRequest::UpdateUserMoodRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.UpdateUserMoodRequest)
}

void UpdateUserMoodRequest::InitAsDefaultInstance() {
}

UpdateUserMoodRequest::UpdateUserMoodRequest(const UpdateUserMoodRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.UpdateUserMoodRequest)
}

void UpdateUserMoodRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  mood_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateUserMoodRequest::~UpdateUserMoodRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.UpdateUserMoodRequest)
  SharedDtor();
}

void UpdateUserMoodRequest::SharedDtor() {
  if (mood_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mood_;
  }
  if (this != default_instance_) {
  }
}

void UpdateUserMoodRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateUserMoodRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateUserMoodRequest_descriptor_;
}

const UpdateUserMoodRequest& UpdateUserMoodRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

UpdateUserMoodRequest* UpdateUserMoodRequest::default_instance_ = NULL;

UpdateUserMoodRequest* UpdateUserMoodRequest::New() const {
  return new UpdateUserMoodRequest;
}

void UpdateUserMoodRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_mood()) {
      if (mood_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mood_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateUserMoodRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.UpdateUserMoodRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mood;
        break;
      }

      // optional string mood = 2;
      case 2: {
        if (tag == 18) {
         parse_mood:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mood()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mood().data(), this->mood().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mood");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.UpdateUserMoodRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.UpdateUserMoodRequest)
  return false;
#undef DO_
}

void UpdateUserMoodRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.UpdateUserMoodRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional string mood = 2;
  if (has_mood()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mood().data(), this->mood().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mood");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mood(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.UpdateUserMoodRequest)
}

::google::protobuf::uint8* UpdateUserMoodRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.UpdateUserMoodRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional string mood = 2;
  if (has_mood()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mood().data(), this->mood().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mood");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mood(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.UpdateUserMoodRequest)
  return target;
}

int UpdateUserMoodRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string mood = 2;
    if (has_mood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mood());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateUserMoodRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateUserMoodRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateUserMoodRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateUserMoodRequest::MergeFrom(const UpdateUserMoodRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_mood()) {
      set_mood(from.mood());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateUserMoodRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateUserMoodRequest::CopyFrom(const UpdateUserMoodRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserMoodRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UpdateUserMoodRequest::Swap(UpdateUserMoodRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(mood_, other->mood_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateUserMoodRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateUserMoodRequest_descriptor_;
  metadata.reflection = UpdateUserMoodRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateUserMoodResponse::kResultFieldNumber;
#endif  // !_MSC_VER

UpdateUserMoodResponse::UpdateUserMoodResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.UpdateUserMoodResponse)
}

void UpdateUserMoodResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::umsProtocol::Result*>(&::umsProtocol::Result::default_instance());
}

UpdateUserMoodResponse::UpdateUserMoodResponse(const UpdateUserMoodResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.UpdateUserMoodResponse)
}

void UpdateUserMoodResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateUserMoodResponse::~UpdateUserMoodResponse() {
  // @@protoc_insertion_point(destructor:umsProtocol.UpdateUserMoodResponse)
  SharedDtor();
}

void UpdateUserMoodResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void UpdateUserMoodResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateUserMoodResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateUserMoodResponse_descriptor_;
}

const UpdateUserMoodResponse& UpdateUserMoodResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

UpdateUserMoodResponse* UpdateUserMoodResponse::default_instance_ = NULL;

UpdateUserMoodResponse* UpdateUserMoodResponse::New() const {
  return new UpdateUserMoodResponse;
}

void UpdateUserMoodResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::umsProtocol::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateUserMoodResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.UpdateUserMoodResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .umsProtocol.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.UpdateUserMoodResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.UpdateUserMoodResponse)
  return false;
#undef DO_
}

void UpdateUserMoodResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.UpdateUserMoodResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.UpdateUserMoodResponse)
}

::google::protobuf::uint8* UpdateUserMoodResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.UpdateUserMoodResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.UpdateUserMoodResponse)
  return target;
}

int UpdateUserMoodResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .umsProtocol.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateUserMoodResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateUserMoodResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateUserMoodResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateUserMoodResponse::MergeFrom(const UpdateUserMoodResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::umsProtocol::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateUserMoodResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateUserMoodResponse::CopyFrom(const UpdateUserMoodResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserMoodResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void UpdateUserMoodResponse::Swap(UpdateUserMoodResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateUserMoodResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateUserMoodResponse_descriptor_;
  metadata.reflection = UpdateUserMoodResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateUserNickNameRequest::kUserIdFieldNumber;
const int UpdateUserNickNameRequest::kNickNameFieldNumber;
#endif  // !_MSC_VER

UpdateUserNickNameRequest::UpdateUserNickNameRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.UpdateUserNickNameRequest)
}

void UpdateUserNickNameRequest::InitAsDefaultInstance() {
}

UpdateUserNickNameRequest::UpdateUserNickNameRequest(const UpdateUserNickNameRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.UpdateUserNickNameRequest)
}

void UpdateUserNickNameRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateUserNickNameRequest::~UpdateUserNickNameRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.UpdateUserNickNameRequest)
  SharedDtor();
}

void UpdateUserNickNameRequest::SharedDtor() {
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_name_;
  }
  if (this != default_instance_) {
  }
}

void UpdateUserNickNameRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateUserNickNameRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateUserNickNameRequest_descriptor_;
}

const UpdateUserNickNameRequest& UpdateUserNickNameRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

UpdateUserNickNameRequest* UpdateUserNickNameRequest::default_instance_ = NULL;

UpdateUserNickNameRequest* UpdateUserNickNameRequest::New() const {
  return new UpdateUserNickNameRequest;
}

void UpdateUserNickNameRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nick_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateUserNickNameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.UpdateUserNickNameRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 2;
      case 2: {
        if (tag == 18) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nick_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.UpdateUserNickNameRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.UpdateUserNickNameRequest)
  return false;
#undef DO_
}

void UpdateUserNickNameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.UpdateUserNickNameRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nick_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nick_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.UpdateUserNickNameRequest)
}

::google::protobuf::uint8* UpdateUserNickNameRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.UpdateUserNickNameRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nick_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nick_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.UpdateUserNickNameRequest)
  return target;
}

int UpdateUserNickNameRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string nick_name = 2;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateUserNickNameRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateUserNickNameRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateUserNickNameRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateUserNickNameRequest::MergeFrom(const UpdateUserNickNameRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateUserNickNameRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateUserNickNameRequest::CopyFrom(const UpdateUserNickNameRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserNickNameRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UpdateUserNickNameRequest::Swap(UpdateUserNickNameRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateUserNickNameRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateUserNickNameRequest_descriptor_;
  metadata.reflection = UpdateUserNickNameRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateUserNickNameResponse::kResultFieldNumber;
#endif  // !_MSC_VER

UpdateUserNickNameResponse::UpdateUserNickNameResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.UpdateUserNickNameResponse)
}

void UpdateUserNickNameResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::umsProtocol::Result*>(&::umsProtocol::Result::default_instance());
}

UpdateUserNickNameResponse::UpdateUserNickNameResponse(const UpdateUserNickNameResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.UpdateUserNickNameResponse)
}

void UpdateUserNickNameResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateUserNickNameResponse::~UpdateUserNickNameResponse() {
  // @@protoc_insertion_point(destructor:umsProtocol.UpdateUserNickNameResponse)
  SharedDtor();
}

void UpdateUserNickNameResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void UpdateUserNickNameResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateUserNickNameResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateUserNickNameResponse_descriptor_;
}

const UpdateUserNickNameResponse& UpdateUserNickNameResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

UpdateUserNickNameResponse* UpdateUserNickNameResponse::default_instance_ = NULL;

UpdateUserNickNameResponse* UpdateUserNickNameResponse::New() const {
  return new UpdateUserNickNameResponse;
}

void UpdateUserNickNameResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::umsProtocol::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateUserNickNameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.UpdateUserNickNameResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .umsProtocol.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.UpdateUserNickNameResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.UpdateUserNickNameResponse)
  return false;
#undef DO_
}

void UpdateUserNickNameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.UpdateUserNickNameResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.UpdateUserNickNameResponse)
}

::google::protobuf::uint8* UpdateUserNickNameResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.UpdateUserNickNameResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.UpdateUserNickNameResponse)
  return target;
}

int UpdateUserNickNameResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .umsProtocol.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateUserNickNameResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateUserNickNameResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateUserNickNameResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateUserNickNameResponse::MergeFrom(const UpdateUserNickNameResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::umsProtocol::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateUserNickNameResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateUserNickNameResponse::CopyFrom(const UpdateUserNickNameResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserNickNameResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void UpdateUserNickNameResponse::Swap(UpdateUserNickNameResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateUserNickNameResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateUserNickNameResponse_descriptor_;
  metadata.reflection = UpdateUserNickNameResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateAvatarRequest::kUserIdFieldNumber;
const int UpdateAvatarRequest::kAvatarIdFieldNumber;
const int UpdateAvatarRequest::kAvatarFieldNumber;
#endif  // !_MSC_VER

UpdateAvatarRequest::UpdateAvatarRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.UpdateAvatarRequest)
}

void UpdateAvatarRequest::InitAsDefaultInstance() {
}

UpdateAvatarRequest::UpdateAvatarRequest(const UpdateAvatarRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.UpdateAvatarRequest)
}

void UpdateAvatarRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  avatar_id_ = 0u;
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateAvatarRequest::~UpdateAvatarRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.UpdateAvatarRequest)
  SharedDtor();
}

void UpdateAvatarRequest::SharedDtor() {
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (this != default_instance_) {
  }
}

void UpdateAvatarRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateAvatarRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateAvatarRequest_descriptor_;
}

const UpdateAvatarRequest& UpdateAvatarRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

UpdateAvatarRequest* UpdateAvatarRequest::default_instance_ = NULL;

UpdateAvatarRequest* UpdateAvatarRequest::New() const {
  return new UpdateAvatarRequest;
}

void UpdateAvatarRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    user_id_ = GOOGLE_ULONGLONG(0);
    avatar_id_ = 0u;
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateAvatarRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.UpdateAvatarRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_avatar_id;
        break;
      }

      // optional uint32 avatar_id = 2;
      case 2: {
        if (tag == 16) {
         parse_avatar_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_id_)));
          set_has_avatar_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_avatar;
        break;
      }

      // optional string avatar = 3;
      case 3: {
        if (tag == 26) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->avatar().data(), this->avatar().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "avatar");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.UpdateAvatarRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.UpdateAvatarRequest)
  return false;
#undef DO_
}

void UpdateAvatarRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.UpdateAvatarRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint32 avatar_id = 2;
  if (has_avatar_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->avatar_id(), output);
  }

  // optional string avatar = 3;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->avatar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.UpdateAvatarRequest)
}

::google::protobuf::uint8* UpdateAvatarRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.UpdateAvatarRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint32 avatar_id = 2;
  if (has_avatar_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->avatar_id(), target);
  }

  // optional string avatar = 3;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->avatar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.UpdateAvatarRequest)
  return target;
}

int UpdateAvatarRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint32 avatar_id = 2;
    if (has_avatar_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatar_id());
    }

    // optional string avatar = 3;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateAvatarRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateAvatarRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateAvatarRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateAvatarRequest::MergeFrom(const UpdateAvatarRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_avatar_id()) {
      set_avatar_id(from.avatar_id());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateAvatarRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateAvatarRequest::CopyFrom(const UpdateAvatarRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateAvatarRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UpdateAvatarRequest::Swap(UpdateAvatarRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(avatar_id_, other->avatar_id_);
    std::swap(avatar_, other->avatar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateAvatarRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateAvatarRequest_descriptor_;
  metadata.reflection = UpdateAvatarRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateAvatarResponse::kResultFieldNumber;
#endif  // !_MSC_VER

UpdateAvatarResponse::UpdateAvatarResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.UpdateAvatarResponse)
}

void UpdateAvatarResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::umsProtocol::Result*>(&::umsProtocol::Result::default_instance());
}

UpdateAvatarResponse::UpdateAvatarResponse(const UpdateAvatarResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.UpdateAvatarResponse)
}

void UpdateAvatarResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateAvatarResponse::~UpdateAvatarResponse() {
  // @@protoc_insertion_point(destructor:umsProtocol.UpdateAvatarResponse)
  SharedDtor();
}

void UpdateAvatarResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void UpdateAvatarResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateAvatarResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateAvatarResponse_descriptor_;
}

const UpdateAvatarResponse& UpdateAvatarResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

UpdateAvatarResponse* UpdateAvatarResponse::default_instance_ = NULL;

UpdateAvatarResponse* UpdateAvatarResponse::New() const {
  return new UpdateAvatarResponse;
}

void UpdateAvatarResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::umsProtocol::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateAvatarResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.UpdateAvatarResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .umsProtocol.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.UpdateAvatarResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.UpdateAvatarResponse)
  return false;
#undef DO_
}

void UpdateAvatarResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.UpdateAvatarResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.UpdateAvatarResponse)
}

::google::protobuf::uint8* UpdateAvatarResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.UpdateAvatarResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.UpdateAvatarResponse)
  return target;
}

int UpdateAvatarResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .umsProtocol.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateAvatarResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateAvatarResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateAvatarResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateAvatarResponse::MergeFrom(const UpdateAvatarResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::umsProtocol::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateAvatarResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateAvatarResponse::CopyFrom(const UpdateAvatarResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateAvatarResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void UpdateAvatarResponse::Swap(UpdateAvatarResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateAvatarResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateAvatarResponse_descriptor_;
  metadata.reflection = UpdateAvatarResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGroupUserInfoRequest::kGroupIdFieldNumber;
const int GetGroupUserInfoRequest::kUserIdFieldNumber;
#endif  // !_MSC_VER

GetGroupUserInfoRequest::GetGroupUserInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.GetGroupUserInfoRequest)
}

void GetGroupUserInfoRequest::InitAsDefaultInstance() {
}

GetGroupUserInfoRequest::GetGroupUserInfoRequest(const GetGroupUserInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.GetGroupUserInfoRequest)
}

void GetGroupUserInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGroupUserInfoRequest::~GetGroupUserInfoRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.GetGroupUserInfoRequest)
  SharedDtor();
}

void GetGroupUserInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGroupUserInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGroupUserInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGroupUserInfoRequest_descriptor_;
}

const GetGroupUserInfoRequest& GetGroupUserInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

GetGroupUserInfoRequest* GetGroupUserInfoRequest::default_instance_ = NULL;

GetGroupUserInfoRequest* GetGroupUserInfoRequest::New() const {
  return new GetGroupUserInfoRequest;
}

void GetGroupUserInfoRequest::Clear() {
  group_id_ = GOOGLE_ULONGLONG(0);
  user_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGroupUserInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.GetGroupUserInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // repeated uint64 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_user_id())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_user_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.GetGroupUserInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.GetGroupUserInfoRequest)
  return false;
#undef DO_
}

void GetGroupUserInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.GetGroupUserInfoRequest)
  // required uint64 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->group_id(), output);
  }

  // repeated uint64 user_id = 2;
  for (int i = 0; i < this->user_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->user_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.GetGroupUserInfoRequest)
}

::google::protobuf::uint8* GetGroupUserInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.GetGroupUserInfoRequest)
  // required uint64 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->group_id(), target);
  }

  // repeated uint64 user_id = 2;
  for (int i = 0; i < this->user_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->user_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.GetGroupUserInfoRequest)
  return target;
}

int GetGroupUserInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

  }
  // repeated uint64 user_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->user_id(i));
    }
    total_size += 1 * this->user_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroupUserInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGroupUserInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGroupUserInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGroupUserInfoRequest::MergeFrom(const GetGroupUserInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_id_.MergeFrom(from.user_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGroupUserInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGroupUserInfoRequest::CopyFrom(const GetGroupUserInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupUserInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetGroupUserInfoRequest::Swap(GetGroupUserInfoRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    user_id_.Swap(&other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGroupUserInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGroupUserInfoRequest_descriptor_;
  metadata.reflection = GetGroupUserInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGroupUserInfoResponse::kResultFieldNumber;
const int GetGroupUserInfoResponse::kGroupIdFieldNumber;
const int GetGroupUserInfoResponse::kGroupMembersFieldNumber;
#endif  // !_MSC_VER

GetGroupUserInfoResponse::GetGroupUserInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.GetGroupUserInfoResponse)
}

void GetGroupUserInfoResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::umsProtocol::Result*>(&::umsProtocol::Result::default_instance());
}

GetGroupUserInfoResponse::GetGroupUserInfoResponse(const GetGroupUserInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.GetGroupUserInfoResponse)
}

void GetGroupUserInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  group_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGroupUserInfoResponse::~GetGroupUserInfoResponse() {
  // @@protoc_insertion_point(destructor:umsProtocol.GetGroupUserInfoResponse)
  SharedDtor();
}

void GetGroupUserInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void GetGroupUserInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGroupUserInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGroupUserInfoResponse_descriptor_;
}

const GetGroupUserInfoResponse& GetGroupUserInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

GetGroupUserInfoResponse* GetGroupUserInfoResponse::default_instance_ = NULL;

GetGroupUserInfoResponse* GetGroupUserInfoResponse::New() const {
  return new GetGroupUserInfoResponse;
}

void GetGroupUserInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_result()) {
      if (result_ != NULL) result_->::umsProtocol::Result::Clear();
    }
    group_id_ = GOOGLE_ULONGLONG(0);
  }
  group_members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGroupUserInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.GetGroupUserInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .umsProtocol.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // optional uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_group_members;
        break;
      }

      // repeated .umsProtocol.GroupUserListItem group_members = 3;
      case 3: {
        if (tag == 26) {
         parse_group_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_group_members;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.GetGroupUserInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.GetGroupUserInfoResponse)
  return false;
#undef DO_
}

void GetGroupUserInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.GetGroupUserInfoResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  // repeated .umsProtocol.GroupUserListItem group_members = 3;
  for (int i = 0; i < this->group_members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->group_members(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.GetGroupUserInfoResponse)
}

::google::protobuf::uint8* GetGroupUserInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.GetGroupUserInfoResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  // repeated .umsProtocol.GroupUserListItem group_members = 3;
  for (int i = 0; i < this->group_members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->group_members(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.GetGroupUserInfoResponse)
  return target;
}

int GetGroupUserInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .umsProtocol.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

  }
  // repeated .umsProtocol.GroupUserListItem group_members = 3;
  total_size += 1 * this->group_members_size();
  for (int i = 0; i < this->group_members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group_members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroupUserInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGroupUserInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGroupUserInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGroupUserInfoResponse::MergeFrom(const GetGroupUserInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_members_.MergeFrom(from.group_members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::umsProtocol::Result::MergeFrom(from.result());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGroupUserInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGroupUserInfoResponse::CopyFrom(const GetGroupUserInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupUserInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->group_members())) return false;
  return true;
}

void GetGroupUserInfoResponse::Swap(GetGroupUserInfoResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(group_id_, other->group_id_);
    group_members_.Swap(&other->group_members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGroupUserInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGroupUserInfoResponse_descriptor_;
  metadata.reflection = GetGroupUserInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFriendBaseInfoRequest::kUserIdFieldNumber;
const int GetFriendBaseInfoRequest::kFriendIdFieldNumber;
#endif  // !_MSC_VER

GetFriendBaseInfoRequest::GetFriendBaseInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.GetFriendBaseInfoRequest)
}

void GetFriendBaseInfoRequest::InitAsDefaultInstance() {
}

GetFriendBaseInfoRequest::GetFriendBaseInfoRequest(const GetFriendBaseInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.GetFriendBaseInfoRequest)
}

void GetFriendBaseInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFriendBaseInfoRequest::~GetFriendBaseInfoRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.GetFriendBaseInfoRequest)
  SharedDtor();
}

void GetFriendBaseInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetFriendBaseInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFriendBaseInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFriendBaseInfoRequest_descriptor_;
}

const GetFriendBaseInfoRequest& GetFriendBaseInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

GetFriendBaseInfoRequest* GetFriendBaseInfoRequest::default_instance_ = NULL;

GetFriendBaseInfoRequest* GetFriendBaseInfoRequest::New() const {
  return new GetFriendBaseInfoRequest;
}

void GetFriendBaseInfoRequest::Clear() {
  user_id_ = GOOGLE_ULONGLONG(0);
  friend_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFriendBaseInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.GetFriendBaseInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_friend_id;
        break;
      }

      // repeated uint64 friend_id = 2;
      case 2: {
        if (tag == 16) {
         parse_friend_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_friend_id())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_friend_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_friend_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.GetFriendBaseInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.GetFriendBaseInfoRequest)
  return false;
#undef DO_
}

void GetFriendBaseInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.GetFriendBaseInfoRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // repeated uint64 friend_id = 2;
  for (int i = 0; i < this->friend_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->friend_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.GetFriendBaseInfoRequest)
}

::google::protobuf::uint8* GetFriendBaseInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.GetFriendBaseInfoRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // repeated uint64 friend_id = 2;
  for (int i = 0; i < this->friend_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->friend_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.GetFriendBaseInfoRequest)
  return target;
}

int GetFriendBaseInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

  }
  // repeated uint64 friend_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->friend_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->friend_id(i));
    }
    total_size += 1 * this->friend_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFriendBaseInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFriendBaseInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFriendBaseInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFriendBaseInfoRequest::MergeFrom(const GetFriendBaseInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  friend_id_.MergeFrom(from.friend_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFriendBaseInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFriendBaseInfoRequest::CopyFrom(const GetFriendBaseInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendBaseInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetFriendBaseInfoRequest::Swap(GetFriendBaseInfoRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    friend_id_.Swap(&other->friend_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFriendBaseInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFriendBaseInfoRequest_descriptor_;
  metadata.reflection = GetFriendBaseInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendListItem::kUserIdFieldNumber;
const int FriendListItem::kNickNameFieldNumber;
const int FriendListItem::kAvatarIdFieldNumber;
const int FriendListItem::kAvatarFieldNumber;
const int FriendListItem::kSignFieldNumber;
const int FriendListItem::kLevelFieldNumber;
#endif  // !_MSC_VER

FriendListItem::FriendListItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.FriendListItem)
}

void FriendListItem::InitAsDefaultInstance() {
}

FriendListItem::FriendListItem(const FriendListItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.FriendListItem)
}

void FriendListItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_id_ = 0u;
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendListItem::~FriendListItem() {
  // @@protoc_insertion_point(destructor:umsProtocol.FriendListItem)
  SharedDtor();
}

void FriendListItem::SharedDtor() {
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_name_;
  }
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (this != default_instance_) {
  }
}

void FriendListItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendListItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendListItem_descriptor_;
}

const FriendListItem& FriendListItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

FriendListItem* FriendListItem::default_instance_ = NULL;

FriendListItem* FriendListItem::New() const {
  return new FriendListItem;
}

void FriendListItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FriendListItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(avatar_id_, level_);
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nick_name_->clear();
      }
    }
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_->clear();
      }
    }
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendListItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.FriendListItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 2;
      case 2: {
        if (tag == 18) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nick_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_avatar_id;
        break;
      }

      // optional uint32 avatar_id = 3;
      case 3: {
        if (tag == 24) {
         parse_avatar_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_id_)));
          set_has_avatar_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_avatar;
        break;
      }

      // optional string avatar = 4;
      case 4: {
        if (tag == 34) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->avatar().data(), this->avatar().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "avatar");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sign;
        break;
      }

      // optional string sign = 5;
      case 5: {
        if (tag == 42) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sign");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional uint32 level = 6;
      case 6: {
        if (tag == 48) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.FriendListItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.FriendListItem)
  return false;
#undef DO_
}

void FriendListItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.FriendListItem)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nick_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nick_name(), output);
  }

  // optional uint32 avatar_id = 3;
  if (has_avatar_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->avatar_id(), output);
  }

  // optional string avatar = 4;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->avatar(), output);
  }

  // optional string sign = 5;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sign(), output);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.FriendListItem)
}

::google::protobuf::uint8* FriendListItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.FriendListItem)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nick_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nick_name(), target);
  }

  // optional uint32 avatar_id = 3;
  if (has_avatar_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->avatar_id(), target);
  }

  // optional string avatar = 4;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->avatar(), target);
  }

  // optional string sign = 5;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sign(), target);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.FriendListItem)
  return target;
}

int FriendListItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string nick_name = 2;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

    // optional uint32 avatar_id = 3;
    if (has_avatar_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatar_id());
    }

    // optional string avatar = 4;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar());
    }

    // optional string sign = 5;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

    // optional uint32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendListItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendListItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendListItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendListItem::MergeFrom(const FriendListItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_avatar_id()) {
      set_avatar_id(from.avatar_id());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendListItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendListItem::CopyFrom(const FriendListItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendListItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FriendListItem::Swap(FriendListItem* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(avatar_id_, other->avatar_id_);
    std::swap(avatar_, other->avatar_);
    std::swap(sign_, other->sign_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendListItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendListItem_descriptor_;
  metadata.reflection = FriendListItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFriendBaseInfoResponse::kResultFieldNumber;
const int GetFriendBaseInfoResponse::kUserIdFieldNumber;
const int GetFriendBaseInfoResponse::kFriendItemFieldNumber;
#endif  // !_MSC_VER

GetFriendBaseInfoResponse::GetFriendBaseInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.GetFriendBaseInfoResponse)
}

void GetFriendBaseInfoResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::umsProtocol::Result*>(&::umsProtocol::Result::default_instance());
}

GetFriendBaseInfoResponse::GetFriendBaseInfoResponse(const GetFriendBaseInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.GetFriendBaseInfoResponse)
}

void GetFriendBaseInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFriendBaseInfoResponse::~GetFriendBaseInfoResponse() {
  // @@protoc_insertion_point(destructor:umsProtocol.GetFriendBaseInfoResponse)
  SharedDtor();
}

void GetFriendBaseInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void GetFriendBaseInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFriendBaseInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFriendBaseInfoResponse_descriptor_;
}

const GetFriendBaseInfoResponse& GetFriendBaseInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

GetFriendBaseInfoResponse* GetFriendBaseInfoResponse::default_instance_ = NULL;

GetFriendBaseInfoResponse* GetFriendBaseInfoResponse::New() const {
  return new GetFriendBaseInfoResponse;
}

void GetFriendBaseInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_result()) {
      if (result_ != NULL) result_->::umsProtocol::Result::Clear();
    }
    user_id_ = GOOGLE_ULONGLONG(0);
  }
  friend_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFriendBaseInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.GetFriendBaseInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .umsProtocol.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_friend_item;
        break;
      }

      // repeated .umsProtocol.FriendListItem friend_item = 4;
      case 4: {
        if (tag == 34) {
         parse_friend_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friend_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_friend_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.GetFriendBaseInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.GetFriendBaseInfoResponse)
  return false;
#undef DO_
}

void GetFriendBaseInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.GetFriendBaseInfoResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // repeated .umsProtocol.FriendListItem friend_item = 4;
  for (int i = 0; i < this->friend_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->friend_item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.GetFriendBaseInfoResponse)
}

::google::protobuf::uint8* GetFriendBaseInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.GetFriendBaseInfoResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // repeated .umsProtocol.FriendListItem friend_item = 4;
  for (int i = 0; i < this->friend_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->friend_item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.GetFriendBaseInfoResponse)
  return target;
}

int GetFriendBaseInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .umsProtocol.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

  }
  // repeated .umsProtocol.FriendListItem friend_item = 4;
  total_size += 1 * this->friend_item_size();
  for (int i = 0; i < this->friend_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friend_item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFriendBaseInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFriendBaseInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFriendBaseInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFriendBaseInfoResponse::MergeFrom(const GetFriendBaseInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  friend_item_.MergeFrom(from.friend_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::umsProtocol::Result::MergeFrom(from.result());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFriendBaseInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFriendBaseInfoResponse::CopyFrom(const GetFriendBaseInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendBaseInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->friend_item())) return false;
  return true;
}

void GetFriendBaseInfoResponse::Swap(GetFriendBaseInfoResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_id_, other->user_id_);
    friend_item_.Swap(&other->friend_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFriendBaseInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFriendBaseInfoResponse_descriptor_;
  metadata.reflection = GetFriendBaseInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGroupOptionRequest::kUserIdFieldNumber;
const int GetGroupOptionRequest::kGroupIdFieldNumber;
#endif  // !_MSC_VER

GetGroupOptionRequest::GetGroupOptionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.GetGroupOptionRequest)
}

void GetGroupOptionRequest::InitAsDefaultInstance() {
}

GetGroupOptionRequest::GetGroupOptionRequest(const GetGroupOptionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.GetGroupOptionRequest)
}

void GetGroupOptionRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGroupOptionRequest::~GetGroupOptionRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.GetGroupOptionRequest)
  SharedDtor();
}

void GetGroupOptionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGroupOptionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGroupOptionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGroupOptionRequest_descriptor_;
}

const GetGroupOptionRequest& GetGroupOptionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

GetGroupOptionRequest* GetGroupOptionRequest::default_instance_ = NULL;

GetGroupOptionRequest* GetGroupOptionRequest::New() const {
  return new GetGroupOptionRequest;
}

void GetGroupOptionRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetGroupOptionRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, group_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGroupOptionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.GetGroupOptionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.GetGroupOptionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.GetGroupOptionRequest)
  return false;
#undef DO_
}

void GetGroupOptionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.GetGroupOptionRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.GetGroupOptionRequest)
}

::google::protobuf::uint8* GetGroupOptionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.GetGroupOptionRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.GetGroupOptionRequest)
  return target;
}

int GetGroupOptionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroupOptionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGroupOptionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGroupOptionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGroupOptionRequest::MergeFrom(const GetGroupOptionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGroupOptionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGroupOptionRequest::CopyFrom(const GetGroupOptionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupOptionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetGroupOptionRequest::Swap(GetGroupOptionRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGroupOptionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGroupOptionRequest_descriptor_;
  metadata.reflection = GetGroupOptionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGroupOptionResponse::kResultFieldNumber;
const int GetGroupOptionResponse::kUserIdFieldNumber;
const int GetGroupOptionResponse::kGroupIdFieldNumber;
const int GetGroupOptionResponse::kVerifyTypeFieldNumber;
const int GetGroupOptionResponse::kChannelIdFieldNumber;
const int GetGroupOptionResponse::kMsgModeFieldNumber;
const int GetGroupOptionResponse::kTalkModeFieldNumber;
#endif  // !_MSC_VER

GetGroupOptionResponse::GetGroupOptionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.GetGroupOptionResponse)
}

void GetGroupOptionResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::umsProtocol::Result*>(&::umsProtocol::Result::default_instance());
}

GetGroupOptionResponse::GetGroupOptionResponse(const GetGroupOptionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.GetGroupOptionResponse)
}

void GetGroupOptionResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  verify_type_ = 0u;
  channel_id_ = GOOGLE_ULONGLONG(0);
  msg_mode_ = 0;
  talk_mode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGroupOptionResponse::~GetGroupOptionResponse() {
  // @@protoc_insertion_point(destructor:umsProtocol.GetGroupOptionResponse)
  SharedDtor();
}

void GetGroupOptionResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void GetGroupOptionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGroupOptionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGroupOptionResponse_descriptor_;
}

const GetGroupOptionResponse& GetGroupOptionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

GetGroupOptionResponse* GetGroupOptionResponse::default_instance_ = NULL;

GetGroupOptionResponse* GetGroupOptionResponse::New() const {
  return new GetGroupOptionResponse;
}

void GetGroupOptionResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetGroupOptionResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(user_id_, talk_mode_);
    if (has_result()) {
      if (result_ != NULL) result_->::umsProtocol::Result::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGroupOptionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.GetGroupOptionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .umsProtocol.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_id;
        break;
      }

      // optional uint64 group_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_verify_type;
        break;
      }

      // optional uint32 verify_type = 4;
      case 4: {
        if (tag == 32) {
         parse_verify_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &verify_type_)));
          set_has_verify_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channel_id;
        break;
      }

      // optional uint64 channel_id = 5;
      case 5: {
        if (tag == 40) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_msg_mode;
        break;
      }

      // optional int32 msg_mode = 6;
      case 6: {
        if (tag == 48) {
         parse_msg_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_mode_)));
          set_has_msg_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_talk_mode;
        break;
      }

      // optional int32 talk_mode = 7;
      case 7: {
        if (tag == 56) {
         parse_talk_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &talk_mode_)));
          set_has_talk_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.GetGroupOptionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.GetGroupOptionResponse)
  return false;
#undef DO_
}

void GetGroupOptionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.GetGroupOptionResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional uint64 group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->group_id(), output);
  }

  // optional uint32 verify_type = 4;
  if (has_verify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->verify_type(), output);
  }

  // optional uint64 channel_id = 5;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->channel_id(), output);
  }

  // optional int32 msg_mode = 6;
  if (has_msg_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->msg_mode(), output);
  }

  // optional int32 talk_mode = 7;
  if (has_talk_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->talk_mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.GetGroupOptionResponse)
}

::google::protobuf::uint8* GetGroupOptionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.GetGroupOptionResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional uint64 group_id = 3;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->group_id(), target);
  }

  // optional uint32 verify_type = 4;
  if (has_verify_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->verify_type(), target);
  }

  // optional uint64 channel_id = 5;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->channel_id(), target);
  }

  // optional int32 msg_mode = 6;
  if (has_msg_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->msg_mode(), target);
  }

  // optional int32 talk_mode = 7;
  if (has_talk_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->talk_mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.GetGroupOptionResponse)
  return target;
}

int GetGroupOptionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .umsProtocol.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 group_id = 3;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional uint32 verify_type = 4;
    if (has_verify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->verify_type());
    }

    // optional uint64 channel_id = 5;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->channel_id());
    }

    // optional int32 msg_mode = 6;
    if (has_msg_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_mode());
    }

    // optional int32 talk_mode = 7;
    if (has_talk_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->talk_mode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroupOptionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGroupOptionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGroupOptionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGroupOptionResponse::MergeFrom(const GetGroupOptionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::umsProtocol::Result::MergeFrom(from.result());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_verify_type()) {
      set_verify_type(from.verify_type());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_msg_mode()) {
      set_msg_mode(from.msg_mode());
    }
    if (from.has_talk_mode()) {
      set_talk_mode(from.talk_mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGroupOptionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGroupOptionResponse::CopyFrom(const GetGroupOptionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupOptionResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void GetGroupOptionResponse::Swap(GetGroupOptionResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(verify_type_, other->verify_type_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(msg_mode_, other->msg_mode_);
    std::swap(talk_mode_, other->talk_mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGroupOptionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGroupOptionResponse_descriptor_;
  metadata.reflection = GetGroupOptionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGroupUserCardRequest::kUserIdFieldNumber;
const int GetGroupUserCardRequest::kGroupIdFieldNumber;
#endif  // !_MSC_VER

GetGroupUserCardRequest::GetGroupUserCardRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.GetGroupUserCardRequest)
}

void GetGroupUserCardRequest::InitAsDefaultInstance() {
}

GetGroupUserCardRequest::GetGroupUserCardRequest(const GetGroupUserCardRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.GetGroupUserCardRequest)
}

void GetGroupUserCardRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGroupUserCardRequest::~GetGroupUserCardRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.GetGroupUserCardRequest)
  SharedDtor();
}

void GetGroupUserCardRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGroupUserCardRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGroupUserCardRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGroupUserCardRequest_descriptor_;
}

const GetGroupUserCardRequest& GetGroupUserCardRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

GetGroupUserCardRequest* GetGroupUserCardRequest::default_instance_ = NULL;

GetGroupUserCardRequest* GetGroupUserCardRequest::New() const {
  return new GetGroupUserCardRequest;
}

void GetGroupUserCardRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetGroupUserCardRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, group_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGroupUserCardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.GetGroupUserCardRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.GetGroupUserCardRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.GetGroupUserCardRequest)
  return false;
#undef DO_
}

void GetGroupUserCardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.GetGroupUserCardRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.GetGroupUserCardRequest)
}

::google::protobuf::uint8* GetGroupUserCardRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.GetGroupUserCardRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.GetGroupUserCardRequest)
  return target;
}

int GetGroupUserCardRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroupUserCardRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGroupUserCardRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGroupUserCardRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGroupUserCardRequest::MergeFrom(const GetGroupUserCardRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGroupUserCardRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGroupUserCardRequest::CopyFrom(const GetGroupUserCardRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupUserCardRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetGroupUserCardRequest::Swap(GetGroupUserCardRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGroupUserCardRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGroupUserCardRequest_descriptor_;
  metadata.reflection = GetGroupUserCardRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGroupUserCardResponse::kResultFieldNumber;
const int GetGroupUserCardResponse::kUserIdFieldNumber;
const int GetGroupUserCardResponse::kGroupIdFieldNumber;
const int GetGroupUserCardResponse::kNickNameFieldNumber;
const int GetGroupUserCardResponse::kPhoneFieldNumber;
const int GetGroupUserCardResponse::kMailFieldNumber;
const int GetGroupUserCardResponse::kRemarkFieldNumber;
#endif  // !_MSC_VER

GetGroupUserCardResponse::GetGroupUserCardResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.GetGroupUserCardResponse)
}

void GetGroupUserCardResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::umsProtocol::Result*>(&::umsProtocol::Result::default_instance());
}

GetGroupUserCardResponse::GetGroupUserCardResponse(const GetGroupUserCardResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.GetGroupUserCardResponse)
}

void GetGroupUserCardResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = NULL;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mail_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGroupUserCardResponse::~GetGroupUserCardResponse() {
  // @@protoc_insertion_point(destructor:umsProtocol.GetGroupUserCardResponse)
  SharedDtor();
}

void GetGroupUserCardResponse::SharedDtor() {
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_name_;
  }
  if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phone_;
  }
  if (mail_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mail_;
  }
  if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete remark_;
  }
  if (this != default_instance_) {
    delete result_;
  }
}

void GetGroupUserCardResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGroupUserCardResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGroupUserCardResponse_descriptor_;
}

const GetGroupUserCardResponse& GetGroupUserCardResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

GetGroupUserCardResponse* GetGroupUserCardResponse::default_instance_ = NULL;

GetGroupUserCardResponse* GetGroupUserCardResponse::New() const {
  return new GetGroupUserCardResponse;
}

void GetGroupUserCardResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetGroupUserCardResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(user_id_, group_id_);
    if (has_result()) {
      if (result_ != NULL) result_->::umsProtocol::Result::Clear();
    }
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nick_name_->clear();
      }
    }
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        phone_->clear();
      }
    }
    if (has_mail()) {
      if (mail_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mail_->clear();
      }
    }
    if (has_remark()) {
      if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        remark_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGroupUserCardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.GetGroupUserCardResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .umsProtocol.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_id;
        break;
      }

      // optional uint64 group_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 4;
      case 4: {
        if (tag == 34) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nick_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_phone;
        break;
      }

      // optional string phone = 5;
      case 5: {
        if (tag == 42) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "phone");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_mail;
        break;
      }

      // optional string mail = 6;
      case 6: {
        if (tag == 50) {
         parse_mail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mail().data(), this->mail().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mail");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_remark;
        break;
      }

      // optional string remark = 7;
      case 7: {
        if (tag == 58) {
         parse_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->remark().data(), this->remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "remark");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.GetGroupUserCardResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.GetGroupUserCardResponse)
  return false;
#undef DO_
}

void GetGroupUserCardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.GetGroupUserCardResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional uint64 group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->group_id(), output);
  }

  // optional string nick_name = 4;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nick_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->nick_name(), output);
  }

  // optional string phone = 5;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->phone(), output);
  }

  // optional string mail = 6;
  if (has_mail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mail().data(), this->mail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->mail(), output);
  }

  // optional string remark = 7;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->remark(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.GetGroupUserCardResponse)
}

::google::protobuf::uint8* GetGroupUserCardResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.GetGroupUserCardResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional uint64 group_id = 3;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->group_id(), target);
  }

  // optional string nick_name = 4;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nick_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nick_name(), target);
  }

  // optional string phone = 5;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->phone(), target);
  }

  // optional string mail = 6;
  if (has_mail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mail().data(), this->mail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->mail(), target);
  }

  // optional string remark = 7;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->remark(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.GetGroupUserCardResponse)
  return target;
}

int GetGroupUserCardResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .umsProtocol.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 group_id = 3;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional string nick_name = 4;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

    // optional string phone = 5;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

    // optional string mail = 6;
    if (has_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mail());
    }

    // optional string remark = 7;
    if (has_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remark());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroupUserCardResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGroupUserCardResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGroupUserCardResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGroupUserCardResponse::MergeFrom(const GetGroupUserCardResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::umsProtocol::Result::MergeFrom(from.result());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_mail()) {
      set_mail(from.mail());
    }
    if (from.has_remark()) {
      set_remark(from.remark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGroupUserCardResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGroupUserCardResponse::CopyFrom(const GetGroupUserCardResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupUserCardResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void GetGroupUserCardResponse::Swap(GetGroupUserCardResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(phone_, other->phone_);
    std::swap(mail_, other->mail_);
    std::swap(remark_, other->remark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGroupUserCardResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGroupUserCardResponse_descriptor_;
  metadata.reflection = GetGroupUserCardResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetGroupMsgModeRequest::kUserIdFieldNumber;
const int SetGroupMsgModeRequest::kGroupIdFieldNumber;
const int SetGroupMsgModeRequest::kMsgModeFieldNumber;
#endif  // !_MSC_VER

SetGroupMsgModeRequest::SetGroupMsgModeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.SetGroupMsgModeRequest)
}

void SetGroupMsgModeRequest::InitAsDefaultInstance() {
}

SetGroupMsgModeRequest::SetGroupMsgModeRequest(const SetGroupMsgModeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.SetGroupMsgModeRequest)
}

void SetGroupMsgModeRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  msg_mode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetGroupMsgModeRequest::~SetGroupMsgModeRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.SetGroupMsgModeRequest)
  SharedDtor();
}

void SetGroupMsgModeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetGroupMsgModeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetGroupMsgModeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetGroupMsgModeRequest_descriptor_;
}

const SetGroupMsgModeRequest& SetGroupMsgModeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

SetGroupMsgModeRequest* SetGroupMsgModeRequest::default_instance_ = NULL;

SetGroupMsgModeRequest* SetGroupMsgModeRequest::New() const {
  return new SetGroupMsgModeRequest;
}

void SetGroupMsgModeRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SetGroupMsgModeRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, msg_mode_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetGroupMsgModeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.SetGroupMsgModeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msg_mode;
        break;
      }

      // required uint32 msg_mode = 3;
      case 3: {
        if (tag == 24) {
         parse_msg_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_mode_)));
          set_has_msg_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.SetGroupMsgModeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.SetGroupMsgModeRequest)
  return false;
#undef DO_
}

void SetGroupMsgModeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.SetGroupMsgModeRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  // required uint32 msg_mode = 3;
  if (has_msg_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->msg_mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.SetGroupMsgModeRequest)
}

::google::protobuf::uint8* SetGroupMsgModeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.SetGroupMsgModeRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  // required uint32 msg_mode = 3;
  if (has_msg_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->msg_mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.SetGroupMsgModeRequest)
  return target;
}

int SetGroupMsgModeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // required uint32 msg_mode = 3;
    if (has_msg_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_mode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetGroupMsgModeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetGroupMsgModeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetGroupMsgModeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetGroupMsgModeRequest::MergeFrom(const SetGroupMsgModeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_msg_mode()) {
      set_msg_mode(from.msg_mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetGroupMsgModeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetGroupMsgModeRequest::CopyFrom(const SetGroupMsgModeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetGroupMsgModeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SetGroupMsgModeRequest::Swap(SetGroupMsgModeRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(msg_mode_, other->msg_mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetGroupMsgModeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetGroupMsgModeRequest_descriptor_;
  metadata.reflection = SetGroupMsgModeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetGroupMsgModeResponse::kResultFieldNumber;
#endif  // !_MSC_VER

SetGroupMsgModeResponse::SetGroupMsgModeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.SetGroupMsgModeResponse)
}

void SetGroupMsgModeResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::umsProtocol::Result*>(&::umsProtocol::Result::default_instance());
}

SetGroupMsgModeResponse::SetGroupMsgModeResponse(const SetGroupMsgModeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.SetGroupMsgModeResponse)
}

void SetGroupMsgModeResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetGroupMsgModeResponse::~SetGroupMsgModeResponse() {
  // @@protoc_insertion_point(destructor:umsProtocol.SetGroupMsgModeResponse)
  SharedDtor();
}

void SetGroupMsgModeResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void SetGroupMsgModeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetGroupMsgModeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetGroupMsgModeResponse_descriptor_;
}

const SetGroupMsgModeResponse& SetGroupMsgModeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

SetGroupMsgModeResponse* SetGroupMsgModeResponse::default_instance_ = NULL;

SetGroupMsgModeResponse* SetGroupMsgModeResponse::New() const {
  return new SetGroupMsgModeResponse;
}

void SetGroupMsgModeResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::umsProtocol::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetGroupMsgModeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.SetGroupMsgModeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .umsProtocol.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.SetGroupMsgModeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.SetGroupMsgModeResponse)
  return false;
#undef DO_
}

void SetGroupMsgModeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.SetGroupMsgModeResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.SetGroupMsgModeResponse)
}

::google::protobuf::uint8* SetGroupMsgModeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.SetGroupMsgModeResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.SetGroupMsgModeResponse)
  return target;
}

int SetGroupMsgModeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .umsProtocol.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetGroupMsgModeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetGroupMsgModeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetGroupMsgModeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetGroupMsgModeResponse::MergeFrom(const SetGroupMsgModeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::umsProtocol::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetGroupMsgModeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetGroupMsgModeResponse::CopyFrom(const SetGroupMsgModeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetGroupMsgModeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void SetGroupMsgModeResponse::Swap(SetGroupMsgModeResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetGroupMsgModeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetGroupMsgModeResponse_descriptor_;
  metadata.reflection = SetGroupMsgModeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetGroupTalkModeRequest::kUserIdFieldNumber;
const int SetGroupTalkModeRequest::kGroupIdFieldNumber;
const int SetGroupTalkModeRequest::kTalkModeFieldNumber;
#endif  // !_MSC_VER

SetGroupTalkModeRequest::SetGroupTalkModeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.SetGroupTalkModeRequest)
}

void SetGroupTalkModeRequest::InitAsDefaultInstance() {
}

SetGroupTalkModeRequest::SetGroupTalkModeRequest(const SetGroupTalkModeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.SetGroupTalkModeRequest)
}

void SetGroupTalkModeRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  talk_mode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetGroupTalkModeRequest::~SetGroupTalkModeRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.SetGroupTalkModeRequest)
  SharedDtor();
}

void SetGroupTalkModeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetGroupTalkModeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetGroupTalkModeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetGroupTalkModeRequest_descriptor_;
}

const SetGroupTalkModeRequest& SetGroupTalkModeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

SetGroupTalkModeRequest* SetGroupTalkModeRequest::default_instance_ = NULL;

SetGroupTalkModeRequest* SetGroupTalkModeRequest::New() const {
  return new SetGroupTalkModeRequest;
}

void SetGroupTalkModeRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SetGroupTalkModeRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, talk_mode_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetGroupTalkModeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.SetGroupTalkModeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_talk_mode;
        break;
      }

      // required uint32 talk_mode = 3;
      case 3: {
        if (tag == 24) {
         parse_talk_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &talk_mode_)));
          set_has_talk_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.SetGroupTalkModeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.SetGroupTalkModeRequest)
  return false;
#undef DO_
}

void SetGroupTalkModeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.SetGroupTalkModeRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  // required uint32 talk_mode = 3;
  if (has_talk_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->talk_mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.SetGroupTalkModeRequest)
}

::google::protobuf::uint8* SetGroupTalkModeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.SetGroupTalkModeRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  // required uint32 talk_mode = 3;
  if (has_talk_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->talk_mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.SetGroupTalkModeRequest)
  return target;
}

int SetGroupTalkModeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // required uint32 talk_mode = 3;
    if (has_talk_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->talk_mode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetGroupTalkModeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetGroupTalkModeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetGroupTalkModeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetGroupTalkModeRequest::MergeFrom(const SetGroupTalkModeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_talk_mode()) {
      set_talk_mode(from.talk_mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetGroupTalkModeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetGroupTalkModeRequest::CopyFrom(const SetGroupTalkModeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetGroupTalkModeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SetGroupTalkModeRequest::Swap(SetGroupTalkModeRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(talk_mode_, other->talk_mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetGroupTalkModeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetGroupTalkModeRequest_descriptor_;
  metadata.reflection = SetGroupTalkModeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetGroupTalkModeResponse::kResultFieldNumber;
#endif  // !_MSC_VER

SetGroupTalkModeResponse::SetGroupTalkModeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.SetGroupTalkModeResponse)
}

void SetGroupTalkModeResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::umsProtocol::Result*>(&::umsProtocol::Result::default_instance());
}

SetGroupTalkModeResponse::SetGroupTalkModeResponse(const SetGroupTalkModeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.SetGroupTalkModeResponse)
}

void SetGroupTalkModeResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetGroupTalkModeResponse::~SetGroupTalkModeResponse() {
  // @@protoc_insertion_point(destructor:umsProtocol.SetGroupTalkModeResponse)
  SharedDtor();
}

void SetGroupTalkModeResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void SetGroupTalkModeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetGroupTalkModeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetGroupTalkModeResponse_descriptor_;
}

const SetGroupTalkModeResponse& SetGroupTalkModeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

SetGroupTalkModeResponse* SetGroupTalkModeResponse::default_instance_ = NULL;

SetGroupTalkModeResponse* SetGroupTalkModeResponse::New() const {
  return new SetGroupTalkModeResponse;
}

void SetGroupTalkModeResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::umsProtocol::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetGroupTalkModeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.SetGroupTalkModeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .umsProtocol.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.SetGroupTalkModeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.SetGroupTalkModeResponse)
  return false;
#undef DO_
}

void SetGroupTalkModeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.SetGroupTalkModeResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.SetGroupTalkModeResponse)
}

::google::protobuf::uint8* SetGroupTalkModeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.SetGroupTalkModeResponse)
  // required .umsProtocol.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.SetGroupTalkModeResponse)
  return target;
}

int SetGroupTalkModeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .umsProtocol.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetGroupTalkModeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetGroupTalkModeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetGroupTalkModeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetGroupTalkModeResponse::MergeFrom(const SetGroupTalkModeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::umsProtocol::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetGroupTalkModeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetGroupTalkModeResponse::CopyFrom(const SetGroupTalkModeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetGroupTalkModeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void SetGroupTalkModeResponse::Swap(SetGroupTalkModeResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetGroupTalkModeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetGroupTalkModeResponse_descriptor_;
  metadata.reflection = SetGroupTalkModeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGroupManagerListRequest::kUserIdFieldNumber;
const int GetGroupManagerListRequest::kGroupIdFieldNumber;
#endif  // !_MSC_VER

GetGroupManagerListRequest::GetGroupManagerListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.GetGroupManagerListRequest)
}

void GetGroupManagerListRequest::InitAsDefaultInstance() {
}

GetGroupManagerListRequest::GetGroupManagerListRequest(const GetGroupManagerListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.GetGroupManagerListRequest)
}

void GetGroupManagerListRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGroupManagerListRequest::~GetGroupManagerListRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.GetGroupManagerListRequest)
  SharedDtor();
}

void GetGroupManagerListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGroupManagerListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGroupManagerListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGroupManagerListRequest_descriptor_;
}

const GetGroupManagerListRequest& GetGroupManagerListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

GetGroupManagerListRequest* GetGroupManagerListRequest::default_instance_ = NULL;

GetGroupManagerListRequest* GetGroupManagerListRequest::New() const {
  return new GetGroupManagerListRequest;
}

void GetGroupManagerListRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetGroupManagerListRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, group_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGroupManagerListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.GetGroupManagerListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.GetGroupManagerListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.GetGroupManagerListRequest)
  return false;
#undef DO_
}

void GetGroupManagerListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.GetGroupManagerListRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.GetGroupManagerListRequest)
}

::google::protobuf::uint8* GetGroupManagerListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.GetGroupManagerListRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.GetGroupManagerListRequest)
  return target;
}

int GetGroupManagerListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroupManagerListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGroupManagerListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGroupManagerListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGroupManagerListRequest::MergeFrom(const GetGroupManagerListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGroupManagerListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGroupManagerListRequest::CopyFrom(const GetGroupManagerListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupManagerListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetGroupManagerListRequest::Swap(GetGroupManagerListRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGroupManagerListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGroupManagerListRequest_descriptor_;
  metadata.reflection = GetGroupManagerListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGroupManagerListResponse::kGroupIdFieldNumber;
const int GetGroupManagerListResponse::kSumNumFieldNumber;
const int GetGroupManagerListResponse::kGroupUserIdFieldNumber;
const int GetGroupManagerListResponse::kResultFieldNumber;
#endif  // !_MSC_VER

GetGroupManagerListResponse::GetGroupManagerListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.GetGroupManagerListResponse)
}

void GetGroupManagerListResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::umsProtocol::Result*>(&::umsProtocol::Result::default_instance());
}

GetGroupManagerListResponse::GetGroupManagerListResponse(const GetGroupManagerListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.GetGroupManagerListResponse)
}

void GetGroupManagerListResponse::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = GOOGLE_ULONGLONG(0);
  sum_num_ = 0u;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGroupManagerListResponse::~GetGroupManagerListResponse() {
  // @@protoc_insertion_point(destructor:umsProtocol.GetGroupManagerListResponse)
  SharedDtor();
}

void GetGroupManagerListResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void GetGroupManagerListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGroupManagerListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGroupManagerListResponse_descriptor_;
}

const GetGroupManagerListResponse& GetGroupManagerListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

GetGroupManagerListResponse* GetGroupManagerListResponse::default_instance_ = NULL;

GetGroupManagerListResponse* GetGroupManagerListResponse::New() const {
  return new GetGroupManagerListResponse;
}

void GetGroupManagerListResponse::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    group_id_ = GOOGLE_ULONGLONG(0);
    sum_num_ = 0u;
    if (has_result()) {
      if (result_ != NULL) result_->::umsProtocol::Result::Clear();
    }
  }
  group_user_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGroupManagerListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.GetGroupManagerListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sum_num;
        break;
      }

      // optional uint32 sum_num = 2;
      case 2: {
        if (tag == 16) {
         parse_sum_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sum_num_)));
          set_has_sum_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_user_id;
        break;
      }

      // repeated uint64 group_user_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_group_user_id())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_group_user_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_user_id;
        if (input->ExpectTag(34)) goto parse_result;
        break;
      }

      // required .umsProtocol.Result result = 4;
      case 4: {
        if (tag == 34) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.GetGroupManagerListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.GetGroupManagerListResponse)
  return false;
#undef DO_
}

void GetGroupManagerListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.GetGroupManagerListResponse)
  // optional uint64 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->group_id(), output);
  }

  // optional uint32 sum_num = 2;
  if (has_sum_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sum_num(), output);
  }

  // repeated uint64 group_user_id = 3;
  for (int i = 0; i < this->group_user_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->group_user_id(i), output);
  }

  // required .umsProtocol.Result result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.GetGroupManagerListResponse)
}

::google::protobuf::uint8* GetGroupManagerListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.GetGroupManagerListResponse)
  // optional uint64 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->group_id(), target);
  }

  // optional uint32 sum_num = 2;
  if (has_sum_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sum_num(), target);
  }

  // repeated uint64 group_user_id = 3;
  for (int i = 0; i < this->group_user_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->group_user_id(i), target);
  }

  // required .umsProtocol.Result result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.GetGroupManagerListResponse)
  return target;
}

int GetGroupManagerListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional uint32 sum_num = 2;
    if (has_sum_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sum_num());
    }

    // required .umsProtocol.Result result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated uint64 group_user_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->group_user_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->group_user_id(i));
    }
    total_size += 1 * this->group_user_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroupManagerListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGroupManagerListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGroupManagerListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGroupManagerListResponse::MergeFrom(const GetGroupManagerListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_user_id_.MergeFrom(from.group_user_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_sum_num()) {
      set_sum_num(from.sum_num());
    }
    if (from.has_result()) {
      mutable_result()->::umsProtocol::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGroupManagerListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGroupManagerListResponse::CopyFrom(const GetGroupManagerListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupManagerListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void GetGroupManagerListResponse::Swap(GetGroupManagerListResponse* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(sum_num_, other->sum_num_);
    group_user_id_.Swap(&other->group_user_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGroupManagerListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGroupManagerListResponse_descriptor_;
  metadata.reflection = GetGroupManagerListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

NotifyJoinGroupRequest::NotifyJoinGroupRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.NotifyJoinGroupRequest)
}

void NotifyJoinGroupRequest::InitAsDefaultInstance() {
}

NotifyJoinGroupRequest::NotifyJoinGroupRequest(const NotifyJoinGroupRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.NotifyJoinGroupRequest)
}

void NotifyJoinGroupRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyJoinGroupRequest::~NotifyJoinGroupRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.NotifyJoinGroupRequest)
  SharedDtor();
}

void NotifyJoinGroupRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyJoinGroupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyJoinGroupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyJoinGroupRequest_descriptor_;
}

const NotifyJoinGroupRequest& NotifyJoinGroupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

NotifyJoinGroupRequest* NotifyJoinGroupRequest::default_instance_ = NULL;

NotifyJoinGroupRequest* NotifyJoinGroupRequest::New() const {
  return new NotifyJoinGroupRequest;
}

void NotifyJoinGroupRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyJoinGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.NotifyJoinGroupRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.NotifyJoinGroupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.NotifyJoinGroupRequest)
  return false;
#undef DO_
}

void NotifyJoinGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.NotifyJoinGroupRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.NotifyJoinGroupRequest)
}

::google::protobuf::uint8* NotifyJoinGroupRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.NotifyJoinGroupRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.NotifyJoinGroupRequest)
  return target;
}

int NotifyJoinGroupRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyJoinGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyJoinGroupRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyJoinGroupRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyJoinGroupRequest::MergeFrom(const NotifyJoinGroupRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyJoinGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyJoinGroupRequest::CopyFrom(const NotifyJoinGroupRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyJoinGroupRequest::IsInitialized() const {

  return true;
}

void NotifyJoinGroupRequest::Swap(NotifyJoinGroupRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyJoinGroupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyJoinGroupRequest_descriptor_;
  metadata.reflection = NotifyJoinGroupRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

NotifyExitGroupRequest::NotifyExitGroupRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.NotifyExitGroupRequest)
}

void NotifyExitGroupRequest::InitAsDefaultInstance() {
}

NotifyExitGroupRequest::NotifyExitGroupRequest(const NotifyExitGroupRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.NotifyExitGroupRequest)
}

void NotifyExitGroupRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyExitGroupRequest::~NotifyExitGroupRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.NotifyExitGroupRequest)
  SharedDtor();
}

void NotifyExitGroupRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyExitGroupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyExitGroupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyExitGroupRequest_descriptor_;
}

const NotifyExitGroupRequest& NotifyExitGroupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

NotifyExitGroupRequest* NotifyExitGroupRequest::default_instance_ = NULL;

NotifyExitGroupRequest* NotifyExitGroupRequest::New() const {
  return new NotifyExitGroupRequest;
}

void NotifyExitGroupRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyExitGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.NotifyExitGroupRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.NotifyExitGroupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.NotifyExitGroupRequest)
  return false;
#undef DO_
}

void NotifyExitGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.NotifyExitGroupRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.NotifyExitGroupRequest)
}

::google::protobuf::uint8* NotifyExitGroupRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.NotifyExitGroupRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.NotifyExitGroupRequest)
  return target;
}

int NotifyExitGroupRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyExitGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyExitGroupRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyExitGroupRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyExitGroupRequest::MergeFrom(const NotifyExitGroupRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyExitGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyExitGroupRequest::CopyFrom(const NotifyExitGroupRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyExitGroupRequest::IsInitialized() const {

  return true;
}

void NotifyExitGroupRequest::Swap(NotifyExitGroupRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyExitGroupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyExitGroupRequest_descriptor_;
  metadata.reflection = NotifyExitGroupRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyKickoutGroupUserRequest::kAdminUserIdFieldNumber;
#endif  // !_MSC_VER

NotifyKickoutGroupUserRequest::NotifyKickoutGroupUserRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.NotifyKickoutGroupUserRequest)
}

void NotifyKickoutGroupUserRequest::InitAsDefaultInstance() {
}

NotifyKickoutGroupUserRequest::NotifyKickoutGroupUserRequest(const NotifyKickoutGroupUserRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.NotifyKickoutGroupUserRequest)
}

void NotifyKickoutGroupUserRequest::SharedCtor() {
  _cached_size_ = 0;
  admin_user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyKickoutGroupUserRequest::~NotifyKickoutGroupUserRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.NotifyKickoutGroupUserRequest)
  SharedDtor();
}

void NotifyKickoutGroupUserRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyKickoutGroupUserRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyKickoutGroupUserRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyKickoutGroupUserRequest_descriptor_;
}

const NotifyKickoutGroupUserRequest& NotifyKickoutGroupUserRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

NotifyKickoutGroupUserRequest* NotifyKickoutGroupUserRequest::default_instance_ = NULL;

NotifyKickoutGroupUserRequest* NotifyKickoutGroupUserRequest::New() const {
  return new NotifyKickoutGroupUserRequest;
}

void NotifyKickoutGroupUserRequest::Clear() {
  admin_user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyKickoutGroupUserRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.NotifyKickoutGroupUserRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 admin_user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &admin_user_id_)));
          set_has_admin_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.NotifyKickoutGroupUserRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.NotifyKickoutGroupUserRequest)
  return false;
#undef DO_
}

void NotifyKickoutGroupUserRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.NotifyKickoutGroupUserRequest)
  // required uint64 admin_user_id = 1;
  if (has_admin_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->admin_user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.NotifyKickoutGroupUserRequest)
}

::google::protobuf::uint8* NotifyKickoutGroupUserRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.NotifyKickoutGroupUserRequest)
  // required uint64 admin_user_id = 1;
  if (has_admin_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->admin_user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.NotifyKickoutGroupUserRequest)
  return target;
}

int NotifyKickoutGroupUserRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 admin_user_id = 1;
    if (has_admin_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->admin_user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyKickoutGroupUserRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyKickoutGroupUserRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyKickoutGroupUserRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyKickoutGroupUserRequest::MergeFrom(const NotifyKickoutGroupUserRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_admin_user_id()) {
      set_admin_user_id(from.admin_user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyKickoutGroupUserRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyKickoutGroupUserRequest::CopyFrom(const NotifyKickoutGroupUserRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyKickoutGroupUserRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NotifyKickoutGroupUserRequest::Swap(NotifyKickoutGroupUserRequest* other) {
  if (other != this) {
    std::swap(admin_user_id_, other->admin_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyKickoutGroupUserRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyKickoutGroupUserRequest_descriptor_;
  metadata.reflection = NotifyKickoutGroupUserRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifySetGroupManagerRequest::kSuperAdminUserIdFieldNumber;
const int NotifySetGroupManagerRequest::kControlValueFieldNumber;
#endif  // !_MSC_VER

NotifySetGroupManagerRequest::NotifySetGroupManagerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.NotifySetGroupManagerRequest)
}

void NotifySetGroupManagerRequest::InitAsDefaultInstance() {
}

NotifySetGroupManagerRequest::NotifySetGroupManagerRequest(const NotifySetGroupManagerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.NotifySetGroupManagerRequest)
}

void NotifySetGroupManagerRequest::SharedCtor() {
  _cached_size_ = 0;
  super_admin_user_id_ = GOOGLE_ULONGLONG(0);
  control_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifySetGroupManagerRequest::~NotifySetGroupManagerRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.NotifySetGroupManagerRequest)
  SharedDtor();
}

void NotifySetGroupManagerRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifySetGroupManagerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifySetGroupManagerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifySetGroupManagerRequest_descriptor_;
}

const NotifySetGroupManagerRequest& NotifySetGroupManagerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

NotifySetGroupManagerRequest* NotifySetGroupManagerRequest::default_instance_ = NULL;

NotifySetGroupManagerRequest* NotifySetGroupManagerRequest::New() const {
  return new NotifySetGroupManagerRequest;
}

void NotifySetGroupManagerRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NotifySetGroupManagerRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(super_admin_user_id_, control_value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifySetGroupManagerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.NotifySetGroupManagerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 super_admin_user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &super_admin_user_id_)));
          set_has_super_admin_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_control_value;
        break;
      }

      // required uint32 control_value = 2;
      case 2: {
        if (tag == 16) {
         parse_control_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &control_value_)));
          set_has_control_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.NotifySetGroupManagerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.NotifySetGroupManagerRequest)
  return false;
#undef DO_
}

void NotifySetGroupManagerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.NotifySetGroupManagerRequest)
  // required uint64 super_admin_user_id = 1;
  if (has_super_admin_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->super_admin_user_id(), output);
  }

  // required uint32 control_value = 2;
  if (has_control_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->control_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.NotifySetGroupManagerRequest)
}

::google::protobuf::uint8* NotifySetGroupManagerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.NotifySetGroupManagerRequest)
  // required uint64 super_admin_user_id = 1;
  if (has_super_admin_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->super_admin_user_id(), target);
  }

  // required uint32 control_value = 2;
  if (has_control_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->control_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.NotifySetGroupManagerRequest)
  return target;
}

int NotifySetGroupManagerRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 super_admin_user_id = 1;
    if (has_super_admin_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->super_admin_user_id());
    }

    // required uint32 control_value = 2;
    if (has_control_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->control_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifySetGroupManagerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifySetGroupManagerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifySetGroupManagerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifySetGroupManagerRequest::MergeFrom(const NotifySetGroupManagerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super_admin_user_id()) {
      set_super_admin_user_id(from.super_admin_user_id());
    }
    if (from.has_control_value()) {
      set_control_value(from.control_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifySetGroupManagerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifySetGroupManagerRequest::CopyFrom(const NotifySetGroupManagerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifySetGroupManagerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NotifySetGroupManagerRequest::Swap(NotifySetGroupManagerRequest* other) {
  if (other != this) {
    std::swap(super_admin_user_id_, other->super_admin_user_id_);
    std::swap(control_value_, other->control_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifySetGroupManagerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifySetGroupManagerRequest_descriptor_;
  metadata.reflection = NotifySetGroupManagerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyDeleteGroupRequest::kSuperAdminUserIdFieldNumber;
#endif  // !_MSC_VER

NotifyDeleteGroupRequest::NotifyDeleteGroupRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.NotifyDeleteGroupRequest)
}

void NotifyDeleteGroupRequest::InitAsDefaultInstance() {
}

NotifyDeleteGroupRequest::NotifyDeleteGroupRequest(const NotifyDeleteGroupRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.NotifyDeleteGroupRequest)
}

void NotifyDeleteGroupRequest::SharedCtor() {
  _cached_size_ = 0;
  super_admin_user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyDeleteGroupRequest::~NotifyDeleteGroupRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.NotifyDeleteGroupRequest)
  SharedDtor();
}

void NotifyDeleteGroupRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyDeleteGroupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyDeleteGroupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyDeleteGroupRequest_descriptor_;
}

const NotifyDeleteGroupRequest& NotifyDeleteGroupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

NotifyDeleteGroupRequest* NotifyDeleteGroupRequest::default_instance_ = NULL;

NotifyDeleteGroupRequest* NotifyDeleteGroupRequest::New() const {
  return new NotifyDeleteGroupRequest;
}

void NotifyDeleteGroupRequest::Clear() {
  super_admin_user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyDeleteGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.NotifyDeleteGroupRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 super_admin_user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &super_admin_user_id_)));
          set_has_super_admin_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.NotifyDeleteGroupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.NotifyDeleteGroupRequest)
  return false;
#undef DO_
}

void NotifyDeleteGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.NotifyDeleteGroupRequest)
  // required uint64 super_admin_user_id = 1;
  if (has_super_admin_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->super_admin_user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.NotifyDeleteGroupRequest)
}

::google::protobuf::uint8* NotifyDeleteGroupRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.NotifyDeleteGroupRequest)
  // required uint64 super_admin_user_id = 1;
  if (has_super_admin_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->super_admin_user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.NotifyDeleteGroupRequest)
  return target;
}

int NotifyDeleteGroupRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 super_admin_user_id = 1;
    if (has_super_admin_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->super_admin_user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyDeleteGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyDeleteGroupRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyDeleteGroupRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyDeleteGroupRequest::MergeFrom(const NotifyDeleteGroupRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super_admin_user_id()) {
      set_super_admin_user_id(from.super_admin_user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyDeleteGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyDeleteGroupRequest::CopyFrom(const NotifyDeleteGroupRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyDeleteGroupRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NotifyDeleteGroupRequest::Swap(NotifyDeleteGroupRequest* other) {
  if (other != this) {
    std::swap(super_admin_user_id_, other->super_admin_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyDeleteGroupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyDeleteGroupRequest_descriptor_;
  metadata.reflection = NotifyDeleteGroupRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyUpdateGroupRemarkRequest::kAdminUserIdFieldNumber;
const int NotifyUpdateGroupRemarkRequest::kRemarkFieldNumber;
#endif  // !_MSC_VER

NotifyUpdateGroupRemarkRequest::NotifyUpdateGroupRemarkRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.NotifyUpdateGroupRemarkRequest)
}

void NotifyUpdateGroupRemarkRequest::InitAsDefaultInstance() {
}

NotifyUpdateGroupRemarkRequest::NotifyUpdateGroupRemarkRequest(const NotifyUpdateGroupRemarkRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.NotifyUpdateGroupRemarkRequest)
}

void NotifyUpdateGroupRemarkRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  admin_user_id_ = GOOGLE_ULONGLONG(0);
  remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyUpdateGroupRemarkRequest::~NotifyUpdateGroupRemarkRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.NotifyUpdateGroupRemarkRequest)
  SharedDtor();
}

void NotifyUpdateGroupRemarkRequest::SharedDtor() {
  if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete remark_;
  }
  if (this != default_instance_) {
  }
}

void NotifyUpdateGroupRemarkRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyUpdateGroupRemarkRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyUpdateGroupRemarkRequest_descriptor_;
}

const NotifyUpdateGroupRemarkRequest& NotifyUpdateGroupRemarkRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

NotifyUpdateGroupRemarkRequest* NotifyUpdateGroupRemarkRequest::default_instance_ = NULL;

NotifyUpdateGroupRemarkRequest* NotifyUpdateGroupRemarkRequest::New() const {
  return new NotifyUpdateGroupRemarkRequest;
}

void NotifyUpdateGroupRemarkRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    admin_user_id_ = GOOGLE_ULONGLONG(0);
    if (has_remark()) {
      if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        remark_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyUpdateGroupRemarkRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.NotifyUpdateGroupRemarkRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 admin_user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &admin_user_id_)));
          set_has_admin_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_remark;
        break;
      }

      // optional string remark = 2;
      case 2: {
        if (tag == 18) {
         parse_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->remark().data(), this->remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "remark");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.NotifyUpdateGroupRemarkRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.NotifyUpdateGroupRemarkRequest)
  return false;
#undef DO_
}

void NotifyUpdateGroupRemarkRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.NotifyUpdateGroupRemarkRequest)
  // required uint64 admin_user_id = 1;
  if (has_admin_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->admin_user_id(), output);
  }

  // optional string remark = 2;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->remark(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.NotifyUpdateGroupRemarkRequest)
}

::google::protobuf::uint8* NotifyUpdateGroupRemarkRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.NotifyUpdateGroupRemarkRequest)
  // required uint64 admin_user_id = 1;
  if (has_admin_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->admin_user_id(), target);
  }

  // optional string remark = 2;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->remark(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.NotifyUpdateGroupRemarkRequest)
  return target;
}

int NotifyUpdateGroupRemarkRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 admin_user_id = 1;
    if (has_admin_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->admin_user_id());
    }

    // optional string remark = 2;
    if (has_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remark());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyUpdateGroupRemarkRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyUpdateGroupRemarkRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyUpdateGroupRemarkRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyUpdateGroupRemarkRequest::MergeFrom(const NotifyUpdateGroupRemarkRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_admin_user_id()) {
      set_admin_user_id(from.admin_user_id());
    }
    if (from.has_remark()) {
      set_remark(from.remark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyUpdateGroupRemarkRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyUpdateGroupRemarkRequest::CopyFrom(const NotifyUpdateGroupRemarkRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyUpdateGroupRemarkRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NotifyUpdateGroupRemarkRequest::Swap(NotifyUpdateGroupRemarkRequest* other) {
  if (other != this) {
    std::swap(admin_user_id_, other->admin_user_id_);
    std::swap(remark_, other->remark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyUpdateGroupRemarkRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyUpdateGroupRemarkRequest_descriptor_;
  metadata.reflection = NotifyUpdateGroupRemarkRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyUpdateGroupInfoRequest::kGroupNameFieldNumber;
const int NotifyUpdateGroupInfoRequest::kRemarkFieldNumber;
const int NotifyUpdateGroupInfoRequest::kTypeFieldNumber;
const int NotifyUpdateGroupInfoRequest::kGroupIntroFieldNumber;
const int NotifyUpdateGroupInfoRequest::kGroupNoticeFieldNumber;
#endif  // !_MSC_VER

NotifyUpdateGroupInfoRequest::NotifyUpdateGroupInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.NotifyUpdateGroupInfoRequest)
}

void NotifyUpdateGroupInfoRequest::InitAsDefaultInstance() {
}

NotifyUpdateGroupInfoRequest::NotifyUpdateGroupInfoRequest(const NotifyUpdateGroupInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.NotifyUpdateGroupInfoRequest)
}

void NotifyUpdateGroupInfoRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
  group_intro_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyUpdateGroupInfoRequest::~NotifyUpdateGroupInfoRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.NotifyUpdateGroupInfoRequest)
  SharedDtor();
}

void NotifyUpdateGroupInfoRequest::SharedDtor() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete remark_;
  }
  if (group_intro_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_intro_;
  }
  if (group_notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_notice_;
  }
  if (this != default_instance_) {
  }
}

void NotifyUpdateGroupInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyUpdateGroupInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyUpdateGroupInfoRequest_descriptor_;
}

const NotifyUpdateGroupInfoRequest& NotifyUpdateGroupInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

NotifyUpdateGroupInfoRequest* NotifyUpdateGroupInfoRequest::default_instance_ = NULL;

NotifyUpdateGroupInfoRequest* NotifyUpdateGroupInfoRequest::New() const {
  return new NotifyUpdateGroupInfoRequest;
}

void NotifyUpdateGroupInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_name_->clear();
      }
    }
    if (has_remark()) {
      if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        remark_->clear();
      }
    }
    type_ = 0u;
    if (has_group_intro()) {
      if (group_intro_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_intro_->clear();
      }
    }
    if (has_group_notice()) {
      if (group_notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_notice_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyUpdateGroupInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.NotifyUpdateGroupInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string group_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_name().data(), this->group_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_remark;
        break;
      }

      // optional string remark = 2;
      case 2: {
        if (tag == 18) {
         parse_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->remark().data(), this->remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "remark");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_group_intro;
        break;
      }

      // optional string group_intro = 4;
      case 4: {
        if (tag == 34) {
         parse_group_intro:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_intro()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_intro().data(), this->group_intro().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group_intro");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_group_notice;
        break;
      }

      // optional string group_notice = 5;
      case 5: {
        if (tag == 42) {
         parse_group_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_notice().data(), this->group_notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group_notice");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.NotifyUpdateGroupInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.NotifyUpdateGroupInfoRequest)
  return false;
#undef DO_
}

void NotifyUpdateGroupInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.NotifyUpdateGroupInfoRequest)
  // optional string group_name = 1;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_name(), output);
  }

  // optional string remark = 2;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->remark(), output);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // optional string group_intro = 4;
  if (has_group_intro()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_intro().data(), this->group_intro().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_intro");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->group_intro(), output);
  }

  // optional string group_notice = 5;
  if (has_group_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_notice().data(), this->group_notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_notice");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->group_notice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.NotifyUpdateGroupInfoRequest)
}

::google::protobuf::uint8* NotifyUpdateGroupInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.NotifyUpdateGroupInfoRequest)
  // optional string group_name = 1;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_name(), target);
  }

  // optional string remark = 2;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->remark(), target);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // optional string group_intro = 4;
  if (has_group_intro()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_intro().data(), this->group_intro().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_intro");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->group_intro(), target);
  }

  // optional string group_notice = 5;
  if (has_group_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_notice().data(), this->group_notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_notice");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->group_notice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.NotifyUpdateGroupInfoRequest)
  return target;
}

int NotifyUpdateGroupInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string group_name = 1;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // optional string remark = 2;
    if (has_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remark());
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional string group_intro = 4;
    if (has_group_intro()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_intro());
    }

    // optional string group_notice = 5;
    if (has_group_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_notice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyUpdateGroupInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyUpdateGroupInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyUpdateGroupInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyUpdateGroupInfoRequest::MergeFrom(const NotifyUpdateGroupInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
    if (from.has_remark()) {
      set_remark(from.remark());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_group_intro()) {
      set_group_intro(from.group_intro());
    }
    if (from.has_group_notice()) {
      set_group_notice(from.group_notice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyUpdateGroupInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyUpdateGroupInfoRequest::CopyFrom(const NotifyUpdateGroupInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyUpdateGroupInfoRequest::IsInitialized() const {

  return true;
}

void NotifyUpdateGroupInfoRequest::Swap(NotifyUpdateGroupInfoRequest* other) {
  if (other != this) {
    std::swap(group_name_, other->group_name_);
    std::swap(remark_, other->remark_);
    std::swap(type_, other->type_);
    std::swap(group_intro_, other->group_intro_);
    std::swap(group_notice_, other->group_notice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyUpdateGroupInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyUpdateGroupInfoRequest_descriptor_;
  metadata.reflection = NotifyUpdateGroupInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyUpdateGroupOptionRequest::kVerifyTypeFieldNumber;
const int NotifyUpdateGroupOptionRequest::kChannelIdFieldNumber;
#endif  // !_MSC_VER

NotifyUpdateGroupOptionRequest::NotifyUpdateGroupOptionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.NotifyUpdateGroupOptionRequest)
}

void NotifyUpdateGroupOptionRequest::InitAsDefaultInstance() {
}

NotifyUpdateGroupOptionRequest::NotifyUpdateGroupOptionRequest(const NotifyUpdateGroupOptionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.NotifyUpdateGroupOptionRequest)
}

void NotifyUpdateGroupOptionRequest::SharedCtor() {
  _cached_size_ = 0;
  verify_type_ = 0u;
  channel_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyUpdateGroupOptionRequest::~NotifyUpdateGroupOptionRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.NotifyUpdateGroupOptionRequest)
  SharedDtor();
}

void NotifyUpdateGroupOptionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyUpdateGroupOptionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyUpdateGroupOptionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyUpdateGroupOptionRequest_descriptor_;
}

const NotifyUpdateGroupOptionRequest& NotifyUpdateGroupOptionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

NotifyUpdateGroupOptionRequest* NotifyUpdateGroupOptionRequest::default_instance_ = NULL;

NotifyUpdateGroupOptionRequest* NotifyUpdateGroupOptionRequest::New() const {
  return new NotifyUpdateGroupOptionRequest;
}

void NotifyUpdateGroupOptionRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NotifyUpdateGroupOptionRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(channel_id_, verify_type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyUpdateGroupOptionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.NotifyUpdateGroupOptionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 verify_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &verify_type_)));
          set_has_verify_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channel_id;
        break;
      }

      // optional uint64 channel_id = 2;
      case 2: {
        if (tag == 16) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.NotifyUpdateGroupOptionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.NotifyUpdateGroupOptionRequest)
  return false;
#undef DO_
}

void NotifyUpdateGroupOptionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.NotifyUpdateGroupOptionRequest)
  // optional uint32 verify_type = 1;
  if (has_verify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->verify_type(), output);
  }

  // optional uint64 channel_id = 2;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->channel_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.NotifyUpdateGroupOptionRequest)
}

::google::protobuf::uint8* NotifyUpdateGroupOptionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.NotifyUpdateGroupOptionRequest)
  // optional uint32 verify_type = 1;
  if (has_verify_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->verify_type(), target);
  }

  // optional uint64 channel_id = 2;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->channel_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.NotifyUpdateGroupOptionRequest)
  return target;
}

int NotifyUpdateGroupOptionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 verify_type = 1;
    if (has_verify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->verify_type());
    }

    // optional uint64 channel_id = 2;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->channel_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyUpdateGroupOptionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyUpdateGroupOptionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyUpdateGroupOptionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyUpdateGroupOptionRequest::MergeFrom(const NotifyUpdateGroupOptionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_verify_type()) {
      set_verify_type(from.verify_type());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyUpdateGroupOptionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyUpdateGroupOptionRequest::CopyFrom(const NotifyUpdateGroupOptionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyUpdateGroupOptionRequest::IsInitialized() const {

  return true;
}

void NotifyUpdateGroupOptionRequest::Swap(NotifyUpdateGroupOptionRequest* other) {
  if (other != this) {
    std::swap(verify_type_, other->verify_type_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyUpdateGroupOptionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyUpdateGroupOptionRequest_descriptor_;
  metadata.reflection = NotifyUpdateGroupOptionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyUpdateGroupNoticeRequest::kNoticeFieldNumber;
#endif  // !_MSC_VER

NotifyUpdateGroupNoticeRequest::NotifyUpdateGroupNoticeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:umsProtocol.NotifyUpdateGroupNoticeRequest)
}

void NotifyUpdateGroupNoticeRequest::InitAsDefaultInstance() {
}

NotifyUpdateGroupNoticeRequest::NotifyUpdateGroupNoticeRequest(const NotifyUpdateGroupNoticeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:umsProtocol.NotifyUpdateGroupNoticeRequest)
}

void NotifyUpdateGroupNoticeRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyUpdateGroupNoticeRequest::~NotifyUpdateGroupNoticeRequest() {
  // @@protoc_insertion_point(destructor:umsProtocol.NotifyUpdateGroupNoticeRequest)
  SharedDtor();
}

void NotifyUpdateGroupNoticeRequest::SharedDtor() {
  if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

void NotifyUpdateGroupNoticeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyUpdateGroupNoticeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyUpdateGroupNoticeRequest_descriptor_;
}

const NotifyUpdateGroupNoticeRequest& NotifyUpdateGroupNoticeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanagement_5fservice_2eproto();
  return *default_instance_;
}

NotifyUpdateGroupNoticeRequest* NotifyUpdateGroupNoticeRequest::default_instance_ = NULL;

NotifyUpdateGroupNoticeRequest* NotifyUpdateGroupNoticeRequest::New() const {
  return new NotifyUpdateGroupNoticeRequest;
}

void NotifyUpdateGroupNoticeRequest::Clear() {
  if (has_notice()) {
    if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      notice_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyUpdateGroupNoticeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:umsProtocol.NotifyUpdateGroupNoticeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string notice = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "notice");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:umsProtocol.NotifyUpdateGroupNoticeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:umsProtocol.NotifyUpdateGroupNoticeRequest)
  return false;
#undef DO_
}

void NotifyUpdateGroupNoticeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:umsProtocol.NotifyUpdateGroupNoticeRequest)
  // optional string notice = 1;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "notice");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->notice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:umsProtocol.NotifyUpdateGroupNoticeRequest)
}

::google::protobuf::uint8* NotifyUpdateGroupNoticeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:umsProtocol.NotifyUpdateGroupNoticeRequest)
  // optional string notice = 1;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "notice");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->notice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:umsProtocol.NotifyUpdateGroupNoticeRequest)
  return target;
}

int NotifyUpdateGroupNoticeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string notice = 1;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyUpdateGroupNoticeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyUpdateGroupNoticeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyUpdateGroupNoticeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyUpdateGroupNoticeRequest::MergeFrom(const NotifyUpdateGroupNoticeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notice()) {
      set_notice(from.notice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyUpdateGroupNoticeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyUpdateGroupNoticeRequest::CopyFrom(const NotifyUpdateGroupNoticeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyUpdateGroupNoticeRequest::IsInitialized() const {

  return true;
}

void NotifyUpdateGroupNoticeRequest::Swap(NotifyUpdateGroupNoticeRequest* other) {
  if (other != this) {
    std::swap(notice_, other->notice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyUpdateGroupNoticeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyUpdateGroupNoticeRequest_descriptor_;
  metadata.reflection = NotifyUpdateGroupNoticeRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace umsProtocol

// @@protoc_insertion_point(global_scope)
