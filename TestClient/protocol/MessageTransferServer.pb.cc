// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageTransferServer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessageTransferServer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tt_mts {

namespace {

const ::google::protobuf::Descriptor* LoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRequest_AccessAddr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRequest_AccessAddr_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogoutRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogoutRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterInterestGroupIdRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterInterestGroupIdRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnRegisterInterestGroupIdRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnRegisterInterestGroupIdRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UplinkMessageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UplinkMessageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DownlinkMessageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownlinkMessageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UplinkGroupMessageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UplinkGroupMessageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DownlinkGroupMessageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownlinkGroupMessageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoryMessageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryMessageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoryMessageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryMessageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoryMessageCountInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryMessageCountInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoryMessageCountInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryMessageCountInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoryMessageFromUserRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryMessageFromUserRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoryMessageFromUserResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryMessageFromUserResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoryGroupMessageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryGroupMessageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoryGroupMessageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryGroupMessageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistorySysMessageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistorySysMessageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistorySysMessageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistorySysMessageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MTS_DEBUG_UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MTS_DEBUG_UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MTS_DEBUG_ServiceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MTS_DEBUG_ServiceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MTS_DEBUG_ListUsersRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MTS_DEBUG_ListUsersRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MTS_DEBUG_ListUsersResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MTS_DEBUG_ListUsersResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MTS_DEBUG_ListOtherServicesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MTS_DEBUG_ListOtherServicesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MTS_DEBUG_ListOtherServicesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MTS_DEBUG_ListOtherServicesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MTS_DEBUG_ListGroupsBelongToUserRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MTS_DEBUG_ListGroupsBelongToUserRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MTS_DEBUG_ListGroupsBelongToUserResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MTS_DEBUG_ListGroupsBelongToUserResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MTS_DEBUG_ListGroupsBelongToGroupserverRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MTS_DEBUG_ListGroupsBelongToGroupserverRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MTS_DEBUG_ListGroupsBelongToGroupserverResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MTS_DEBUG_ListGroupsBelongToGroupserverResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MTS_DEBUG_ListUsersBelongToGroupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MTS_DEBUG_ListUsersBelongToGroupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MTS_DEBUG_ListUsersBelongToGroupResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MTS_DEBUG_ListUsersBelongToGroupResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* COMMAND_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DEBUG_COMMAND_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MACRO_DEFINE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MessageTransferServer_2eproto() {
  protobuf_AddDesc_MessageTransferServer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MessageTransferServer.proto");
  GOOGLE_CHECK(file != NULL);
  LoginRequest_descriptor_ = file->message_type(0);
  static const int LoginRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, dev_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, access_addr_),
  };
  LoginRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRequest_descriptor_,
      LoginRequest::default_instance_,
      LoginRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRequest));
  LoginRequest_AccessAddr_descriptor_ = LoginRequest_descriptor_->nested_type(0);
  static const int LoginRequest_AccessAddr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest_AccessAddr, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest_AccessAddr, port_),
  };
  LoginRequest_AccessAddr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRequest_AccessAddr_descriptor_,
      LoginRequest_AccessAddr::default_instance_,
      LoginRequest_AccessAddr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest_AccessAddr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest_AccessAddr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRequest_AccessAddr));
  LogoutRequest_descriptor_ = file->message_type(1);
  static const int LogoutRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRequest, dev_type_),
  };
  LogoutRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogoutRequest_descriptor_,
      LogoutRequest::default_instance_,
      LogoutRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogoutRequest));
  RegisterInterestGroupIdRequest_descriptor_ = file->message_type(2);
  static const int RegisterInterestGroupIdRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterInterestGroupIdRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterInterestGroupIdRequest, groupid_list_),
  };
  RegisterInterestGroupIdRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterInterestGroupIdRequest_descriptor_,
      RegisterInterestGroupIdRequest::default_instance_,
      RegisterInterestGroupIdRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterInterestGroupIdRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterInterestGroupIdRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterInterestGroupIdRequest));
  UnRegisterInterestGroupIdRequest_descriptor_ = file->message_type(3);
  static const int UnRegisterInterestGroupIdRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnRegisterInterestGroupIdRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnRegisterInterestGroupIdRequest, groupid_list_),
  };
  UnRegisterInterestGroupIdRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnRegisterInterestGroupIdRequest_descriptor_,
      UnRegisterInterestGroupIdRequest::default_instance_,
      UnRegisterInterestGroupIdRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnRegisterInterestGroupIdRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnRegisterInterestGroupIdRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnRegisterInterestGroupIdRequest));
  UplinkMessageRequest_descriptor_ = file->message_type(4);
  static const int UplinkMessageRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UplinkMessageRequest, from_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UplinkMessageRequest, to_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UplinkMessageRequest, is_online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UplinkMessageRequest, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UplinkMessageRequest, message_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UplinkMessageRequest, mts_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UplinkMessageRequest, mts_port_),
  };
  UplinkMessageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UplinkMessageRequest_descriptor_,
      UplinkMessageRequest::default_instance_,
      UplinkMessageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UplinkMessageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UplinkMessageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UplinkMessageRequest));
  DownlinkMessageRequest_descriptor_ = file->message_type(5);
  static const int DownlinkMessageRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownlinkMessageRequest, from_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownlinkMessageRequest, to_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownlinkMessageRequest, message_pts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownlinkMessageRequest, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownlinkMessageRequest, message_type_),
  };
  DownlinkMessageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DownlinkMessageRequest_descriptor_,
      DownlinkMessageRequest::default_instance_,
      DownlinkMessageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownlinkMessageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownlinkMessageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DownlinkMessageRequest));
  UplinkGroupMessageRequest_descriptor_ = file->message_type(6);
  static const int UplinkGroupMessageRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UplinkGroupMessageRequest, from_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UplinkGroupMessageRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UplinkGroupMessageRequest, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UplinkGroupMessageRequest, message_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UplinkGroupMessageRequest, message_priority_),
  };
  UplinkGroupMessageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UplinkGroupMessageRequest_descriptor_,
      UplinkGroupMessageRequest::default_instance_,
      UplinkGroupMessageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UplinkGroupMessageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UplinkGroupMessageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UplinkGroupMessageRequest));
  DownlinkGroupMessageRequest_descriptor_ = file->message_type(7);
  static const int DownlinkGroupMessageRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownlinkGroupMessageRequest, from_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownlinkGroupMessageRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownlinkGroupMessageRequest, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownlinkGroupMessageRequest, message_pts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownlinkGroupMessageRequest, message_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownlinkGroupMessageRequest, message_priority_),
  };
  DownlinkGroupMessageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DownlinkGroupMessageRequest_descriptor_,
      DownlinkGroupMessageRequest::default_instance_,
      DownlinkGroupMessageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownlinkGroupMessageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownlinkGroupMessageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DownlinkGroupMessageRequest));
  HistoryMessageRequest_descriptor_ = file->message_type(8);
  static const int HistoryMessageRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageRequest, begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageRequest, time_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageRequest, message_count_),
  };
  HistoryMessageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoryMessageRequest_descriptor_,
      HistoryMessageRequest::default_instance_,
      HistoryMessageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoryMessageRequest));
  HistoryMessageResponse_descriptor_ = file->message_type(9);
  static const int HistoryMessageResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageResponse, messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageResponse, current_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageResponse, total_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageResponse, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageResponse, index_),
  };
  HistoryMessageResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoryMessageResponse_descriptor_,
      HistoryMessageResponse::default_instance_,
      HistoryMessageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoryMessageResponse));
  HistoryMessageCountInfoRequest_descriptor_ = file->message_type(10);
  static const int HistoryMessageCountInfoRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageCountInfoRequest, to_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageCountInfoRequest, from_user_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageCountInfoRequest, begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageCountInfoRequest, time_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageCountInfoRequest, message_types_),
  };
  HistoryMessageCountInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoryMessageCountInfoRequest_descriptor_,
      HistoryMessageCountInfoRequest::default_instance_,
      HistoryMessageCountInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageCountInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageCountInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoryMessageCountInfoRequest));
  HistoryMessageCountInfoResponse_descriptor_ = file->message_type(11);
  static const int HistoryMessageCountInfoResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageCountInfoResponse, to_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageCountInfoResponse, begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageCountInfoResponse, time_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageCountInfoResponse, message_types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageCountInfoResponse, message_count_infos_),
  };
  HistoryMessageCountInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoryMessageCountInfoResponse_descriptor_,
      HistoryMessageCountInfoResponse::default_instance_,
      HistoryMessageCountInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageCountInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageCountInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoryMessageCountInfoResponse));
  HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo_descriptor_ = HistoryMessageCountInfoResponse_descriptor_->nested_type(0);
  static const int HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo, message_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo, count_),
  };
  HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo_descriptor_,
      HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo::default_instance_,
      HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo));
  HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo_descriptor_ = HistoryMessageCountInfoResponse_descriptor_->nested_type(1);
  static const int HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo, from_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo, countinfos_),
  };
  HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo_descriptor_,
      HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo::default_instance_,
      HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo));
  HistoryMessageFromUserRequest_descriptor_ = file->message_type(12);
  static const int HistoryMessageFromUserRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageFromUserRequest, to_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageFromUserRequest, from_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageFromUserRequest, begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageFromUserRequest, time_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageFromUserRequest, message_types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageFromUserRequest, is_equeal_message_types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageFromUserRequest, message_count_),
  };
  HistoryMessageFromUserRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoryMessageFromUserRequest_descriptor_,
      HistoryMessageFromUserRequest::default_instance_,
      HistoryMessageFromUserRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageFromUserRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageFromUserRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoryMessageFromUserRequest));
  HistoryMessageFromUserResponse_descriptor_ = file->message_type(13);
  static const int HistoryMessageFromUserResponse_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageFromUserResponse, to_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageFromUserResponse, from_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageFromUserResponse, message_types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageFromUserResponse, is_equeal_message_types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageFromUserResponse, messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageFromUserResponse, current_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageFromUserResponse, total_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageFromUserResponse, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageFromUserResponse, index_),
  };
  HistoryMessageFromUserResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoryMessageFromUserResponse_descriptor_,
      HistoryMessageFromUserResponse::default_instance_,
      HistoryMessageFromUserResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageFromUserResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryMessageFromUserResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoryMessageFromUserResponse));
  HistoryGroupMessageRequest_descriptor_ = file->message_type(14);
  static const int HistoryGroupMessageRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryGroupMessageRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryGroupMessageRequest, begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryGroupMessageRequest, time_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryGroupMessageRequest, message_count_),
  };
  HistoryGroupMessageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoryGroupMessageRequest_descriptor_,
      HistoryGroupMessageRequest::default_instance_,
      HistoryGroupMessageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryGroupMessageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryGroupMessageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoryGroupMessageRequest));
  HistoryGroupMessageResponse_descriptor_ = file->message_type(15);
  static const int HistoryGroupMessageResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryGroupMessageResponse, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryGroupMessageResponse, messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryGroupMessageResponse, current_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryGroupMessageResponse, total_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryGroupMessageResponse, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryGroupMessageResponse, index_),
  };
  HistoryGroupMessageResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoryGroupMessageResponse_descriptor_,
      HistoryGroupMessageResponse::default_instance_,
      HistoryGroupMessageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryGroupMessageResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryGroupMessageResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoryGroupMessageResponse));
  HistorySysMessageRequest_descriptor_ = file->message_type(16);
  static const int HistorySysMessageRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistorySysMessageRequest, message_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistorySysMessageRequest, begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistorySysMessageRequest, time_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistorySysMessageRequest, message_count_),
  };
  HistorySysMessageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistorySysMessageRequest_descriptor_,
      HistorySysMessageRequest::default_instance_,
      HistorySysMessageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistorySysMessageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistorySysMessageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistorySysMessageRequest));
  HistorySysMessageResponse_descriptor_ = file->message_type(17);
  static const int HistorySysMessageResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistorySysMessageResponse, message_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistorySysMessageResponse, messages_),
  };
  HistorySysMessageResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistorySysMessageResponse_descriptor_,
      HistorySysMessageResponse::default_instance_,
      HistorySysMessageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistorySysMessageResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistorySysMessageResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistorySysMessageResponse));
  MTS_DEBUG_UserInfo_descriptor_ = file->message_type(18);
  static const int MTS_DEBUG_UserInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_UserInfo, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_UserInfo, user_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_UserInfo, user_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_UserInfo, login_time_),
  };
  MTS_DEBUG_UserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MTS_DEBUG_UserInfo_descriptor_,
      MTS_DEBUG_UserInfo::default_instance_,
      MTS_DEBUG_UserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_UserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_UserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MTS_DEBUG_UserInfo));
  MTS_DEBUG_ServiceInfo_descriptor_ = file->message_type(19);
  static const int MTS_DEBUG_ServiceInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_ServiceInfo, serve_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_ServiceInfo, serve_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_ServiceInfo, serve_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_ServiceInfo, connect_time_),
  };
  MTS_DEBUG_ServiceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MTS_DEBUG_ServiceInfo_descriptor_,
      MTS_DEBUG_ServiceInfo::default_instance_,
      MTS_DEBUG_ServiceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_ServiceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_ServiceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MTS_DEBUG_ServiceInfo));
  MTS_DEBUG_ListUsersRequest_descriptor_ = file->message_type(20);
  static const int MTS_DEBUG_ListUsersRequest_offsets_[1] = {
  };
  MTS_DEBUG_ListUsersRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MTS_DEBUG_ListUsersRequest_descriptor_,
      MTS_DEBUG_ListUsersRequest::default_instance_,
      MTS_DEBUG_ListUsersRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_ListUsersRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_ListUsersRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MTS_DEBUG_ListUsersRequest));
  MTS_DEBUG_ListUsersResponse_descriptor_ = file->message_type(21);
  static const int MTS_DEBUG_ListUsersResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_ListUsersResponse, users_),
  };
  MTS_DEBUG_ListUsersResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MTS_DEBUG_ListUsersResponse_descriptor_,
      MTS_DEBUG_ListUsersResponse::default_instance_,
      MTS_DEBUG_ListUsersResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_ListUsersResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_ListUsersResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MTS_DEBUG_ListUsersResponse));
  MTS_DEBUG_ListOtherServicesRequest_descriptor_ = file->message_type(22);
  static const int MTS_DEBUG_ListOtherServicesRequest_offsets_[1] = {
  };
  MTS_DEBUG_ListOtherServicesRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MTS_DEBUG_ListOtherServicesRequest_descriptor_,
      MTS_DEBUG_ListOtherServicesRequest::default_instance_,
      MTS_DEBUG_ListOtherServicesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_ListOtherServicesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_ListOtherServicesRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MTS_DEBUG_ListOtherServicesRequest));
  MTS_DEBUG_ListOtherServicesResponse_descriptor_ = file->message_type(23);
  static const int MTS_DEBUG_ListOtherServicesResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_ListOtherServicesResponse, services_),
  };
  MTS_DEBUG_ListOtherServicesResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MTS_DEBUG_ListOtherServicesResponse_descriptor_,
      MTS_DEBUG_ListOtherServicesResponse::default_instance_,
      MTS_DEBUG_ListOtherServicesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_ListOtherServicesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_ListOtherServicesResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MTS_DEBUG_ListOtherServicesResponse));
  MTS_DEBUG_ListGroupsBelongToUserRequest_descriptor_ = file->message_type(24);
  static const int MTS_DEBUG_ListGroupsBelongToUserRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_ListGroupsBelongToUserRequest, user_id_),
  };
  MTS_DEBUG_ListGroupsBelongToUserRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MTS_DEBUG_ListGroupsBelongToUserRequest_descriptor_,
      MTS_DEBUG_ListGroupsBelongToUserRequest::default_instance_,
      MTS_DEBUG_ListGroupsBelongToUserRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_ListGroupsBelongToUserRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_ListGroupsBelongToUserRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MTS_DEBUG_ListGroupsBelongToUserRequest));
  MTS_DEBUG_ListGroupsBelongToUserResponse_descriptor_ = file->message_type(25);
  static const int MTS_DEBUG_ListGroupsBelongToUserResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_ListGroupsBelongToUserResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_ListGroupsBelongToUserResponse, group_ids_),
  };
  MTS_DEBUG_ListGroupsBelongToUserResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MTS_DEBUG_ListGroupsBelongToUserResponse_descriptor_,
      MTS_DEBUG_ListGroupsBelongToUserResponse::default_instance_,
      MTS_DEBUG_ListGroupsBelongToUserResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_ListGroupsBelongToUserResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_ListGroupsBelongToUserResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MTS_DEBUG_ListGroupsBelongToUserResponse));
  MTS_DEBUG_ListGroupsBelongToGroupserverRequest_descriptor_ = file->message_type(26);
  static const int MTS_DEBUG_ListGroupsBelongToGroupserverRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_ListGroupsBelongToGroupserverRequest, groupserver_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_ListGroupsBelongToGroupserverRequest, groupserver_port_),
  };
  MTS_DEBUG_ListGroupsBelongToGroupserverRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MTS_DEBUG_ListGroupsBelongToGroupserverRequest_descriptor_,
      MTS_DEBUG_ListGroupsBelongToGroupserverRequest::default_instance_,
      MTS_DEBUG_ListGroupsBelongToGroupserverRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_ListGroupsBelongToGroupserverRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_ListGroupsBelongToGroupserverRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MTS_DEBUG_ListGroupsBelongToGroupserverRequest));
  MTS_DEBUG_ListGroupsBelongToGroupserverResponse_descriptor_ = file->message_type(27);
  static const int MTS_DEBUG_ListGroupsBelongToGroupserverResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_ListGroupsBelongToGroupserverResponse, groupserver_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_ListGroupsBelongToGroupserverResponse, groupserver_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_ListGroupsBelongToGroupserverResponse, group_ids_),
  };
  MTS_DEBUG_ListGroupsBelongToGroupserverResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MTS_DEBUG_ListGroupsBelongToGroupserverResponse_descriptor_,
      MTS_DEBUG_ListGroupsBelongToGroupserverResponse::default_instance_,
      MTS_DEBUG_ListGroupsBelongToGroupserverResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_ListGroupsBelongToGroupserverResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_ListGroupsBelongToGroupserverResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MTS_DEBUG_ListGroupsBelongToGroupserverResponse));
  MTS_DEBUG_ListUsersBelongToGroupRequest_descriptor_ = file->message_type(28);
  static const int MTS_DEBUG_ListUsersBelongToGroupRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_ListUsersBelongToGroupRequest, group_id_),
  };
  MTS_DEBUG_ListUsersBelongToGroupRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MTS_DEBUG_ListUsersBelongToGroupRequest_descriptor_,
      MTS_DEBUG_ListUsersBelongToGroupRequest::default_instance_,
      MTS_DEBUG_ListUsersBelongToGroupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_ListUsersBelongToGroupRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_ListUsersBelongToGroupRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MTS_DEBUG_ListUsersBelongToGroupRequest));
  MTS_DEBUG_ListUsersBelongToGroupResponse_descriptor_ = file->message_type(29);
  static const int MTS_DEBUG_ListUsersBelongToGroupResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_ListUsersBelongToGroupResponse, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_ListUsersBelongToGroupResponse, users_),
  };
  MTS_DEBUG_ListUsersBelongToGroupResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MTS_DEBUG_ListUsersBelongToGroupResponse_descriptor_,
      MTS_DEBUG_ListUsersBelongToGroupResponse::default_instance_,
      MTS_DEBUG_ListUsersBelongToGroupResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_ListUsersBelongToGroupResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS_DEBUG_ListUsersBelongToGroupResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MTS_DEBUG_ListUsersBelongToGroupResponse));
  COMMAND_descriptor_ = file->enum_type(0);
  DEBUG_COMMAND_descriptor_ = file->enum_type(1);
  MACRO_DEFINE_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MessageTransferServer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRequest_descriptor_, &LoginRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRequest_AccessAddr_descriptor_, &LoginRequest_AccessAddr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogoutRequest_descriptor_, &LogoutRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterInterestGroupIdRequest_descriptor_, &RegisterInterestGroupIdRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnRegisterInterestGroupIdRequest_descriptor_, &UnRegisterInterestGroupIdRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UplinkMessageRequest_descriptor_, &UplinkMessageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DownlinkMessageRequest_descriptor_, &DownlinkMessageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UplinkGroupMessageRequest_descriptor_, &UplinkGroupMessageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DownlinkGroupMessageRequest_descriptor_, &DownlinkGroupMessageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoryMessageRequest_descriptor_, &HistoryMessageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoryMessageResponse_descriptor_, &HistoryMessageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoryMessageCountInfoRequest_descriptor_, &HistoryMessageCountInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoryMessageCountInfoResponse_descriptor_, &HistoryMessageCountInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo_descriptor_, &HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo_descriptor_, &HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoryMessageFromUserRequest_descriptor_, &HistoryMessageFromUserRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoryMessageFromUserResponse_descriptor_, &HistoryMessageFromUserResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoryGroupMessageRequest_descriptor_, &HistoryGroupMessageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoryGroupMessageResponse_descriptor_, &HistoryGroupMessageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistorySysMessageRequest_descriptor_, &HistorySysMessageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistorySysMessageResponse_descriptor_, &HistorySysMessageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MTS_DEBUG_UserInfo_descriptor_, &MTS_DEBUG_UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MTS_DEBUG_ServiceInfo_descriptor_, &MTS_DEBUG_ServiceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MTS_DEBUG_ListUsersRequest_descriptor_, &MTS_DEBUG_ListUsersRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MTS_DEBUG_ListUsersResponse_descriptor_, &MTS_DEBUG_ListUsersResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MTS_DEBUG_ListOtherServicesRequest_descriptor_, &MTS_DEBUG_ListOtherServicesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MTS_DEBUG_ListOtherServicesResponse_descriptor_, &MTS_DEBUG_ListOtherServicesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MTS_DEBUG_ListGroupsBelongToUserRequest_descriptor_, &MTS_DEBUG_ListGroupsBelongToUserRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MTS_DEBUG_ListGroupsBelongToUserResponse_descriptor_, &MTS_DEBUG_ListGroupsBelongToUserResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MTS_DEBUG_ListGroupsBelongToGroupserverRequest_descriptor_, &MTS_DEBUG_ListGroupsBelongToGroupserverRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MTS_DEBUG_ListGroupsBelongToGroupserverResponse_descriptor_, &MTS_DEBUG_ListGroupsBelongToGroupserverResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MTS_DEBUG_ListUsersBelongToGroupRequest_descriptor_, &MTS_DEBUG_ListUsersBelongToGroupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MTS_DEBUG_ListUsersBelongToGroupResponse_descriptor_, &MTS_DEBUG_ListUsersBelongToGroupResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MessageTransferServer_2eproto() {
  delete LoginRequest::default_instance_;
  delete LoginRequest_reflection_;
  delete LoginRequest_AccessAddr::default_instance_;
  delete LoginRequest_AccessAddr_reflection_;
  delete LogoutRequest::default_instance_;
  delete LogoutRequest_reflection_;
  delete RegisterInterestGroupIdRequest::default_instance_;
  delete RegisterInterestGroupIdRequest_reflection_;
  delete UnRegisterInterestGroupIdRequest::default_instance_;
  delete UnRegisterInterestGroupIdRequest_reflection_;
  delete UplinkMessageRequest::default_instance_;
  delete UplinkMessageRequest_reflection_;
  delete DownlinkMessageRequest::default_instance_;
  delete DownlinkMessageRequest_reflection_;
  delete UplinkGroupMessageRequest::default_instance_;
  delete UplinkGroupMessageRequest_reflection_;
  delete DownlinkGroupMessageRequest::default_instance_;
  delete DownlinkGroupMessageRequest_reflection_;
  delete HistoryMessageRequest::default_instance_;
  delete HistoryMessageRequest_reflection_;
  delete HistoryMessageResponse::default_instance_;
  delete HistoryMessageResponse_reflection_;
  delete HistoryMessageCountInfoRequest::default_instance_;
  delete HistoryMessageCountInfoRequest_reflection_;
  delete HistoryMessageCountInfoResponse::default_instance_;
  delete HistoryMessageCountInfoResponse_reflection_;
  delete HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo::default_instance_;
  delete HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo_reflection_;
  delete HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo::default_instance_;
  delete HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo_reflection_;
  delete HistoryMessageFromUserRequest::default_instance_;
  delete HistoryMessageFromUserRequest_reflection_;
  delete HistoryMessageFromUserResponse::default_instance_;
  delete HistoryMessageFromUserResponse_reflection_;
  delete HistoryGroupMessageRequest::default_instance_;
  delete HistoryGroupMessageRequest_reflection_;
  delete HistoryGroupMessageResponse::default_instance_;
  delete HistoryGroupMessageResponse_reflection_;
  delete HistorySysMessageRequest::default_instance_;
  delete HistorySysMessageRequest_reflection_;
  delete HistorySysMessageResponse::default_instance_;
  delete HistorySysMessageResponse_reflection_;
  delete MTS_DEBUG_UserInfo::default_instance_;
  delete MTS_DEBUG_UserInfo_reflection_;
  delete MTS_DEBUG_ServiceInfo::default_instance_;
  delete MTS_DEBUG_ServiceInfo_reflection_;
  delete MTS_DEBUG_ListUsersRequest::default_instance_;
  delete MTS_DEBUG_ListUsersRequest_reflection_;
  delete MTS_DEBUG_ListUsersResponse::default_instance_;
  delete MTS_DEBUG_ListUsersResponse_reflection_;
  delete MTS_DEBUG_ListOtherServicesRequest::default_instance_;
  delete MTS_DEBUG_ListOtherServicesRequest_reflection_;
  delete MTS_DEBUG_ListOtherServicesResponse::default_instance_;
  delete MTS_DEBUG_ListOtherServicesResponse_reflection_;
  delete MTS_DEBUG_ListGroupsBelongToUserRequest::default_instance_;
  delete MTS_DEBUG_ListGroupsBelongToUserRequest_reflection_;
  delete MTS_DEBUG_ListGroupsBelongToUserResponse::default_instance_;
  delete MTS_DEBUG_ListGroupsBelongToUserResponse_reflection_;
  delete MTS_DEBUG_ListGroupsBelongToGroupserverRequest::default_instance_;
  delete MTS_DEBUG_ListGroupsBelongToGroupserverRequest_reflection_;
  delete MTS_DEBUG_ListGroupsBelongToGroupserverResponse::default_instance_;
  delete MTS_DEBUG_ListGroupsBelongToGroupserverResponse_reflection_;
  delete MTS_DEBUG_ListUsersBelongToGroupRequest::default_instance_;
  delete MTS_DEBUG_ListUsersBelongToGroupRequest_reflection_;
  delete MTS_DEBUG_ListUsersBelongToGroupResponse::default_instance_;
  delete MTS_DEBUG_ListUsersBelongToGroupResponse_reflection_;
}

void protobuf_AddDesc_MessageTransferServer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tt_im_group::protobuf_AddDesc_GroupId_2edef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033MessageTransferServer.proto\022\006tt_mts\032\021G"
    "roupId.def.proto\"\236\001\n\014LoginRequest\022\017\n\007use"
    "r_id\030\001 \002(\004\022\020\n\010dev_type\030\002 \001(\r\022\r\n\005token\030\003 "
    "\001(\t\0224\n\013access_addr\030\004 \001(\0132\037.tt_mts.LoginR"
    "equest.AccessAddr\032&\n\nAccessAddr\022\n\n\002ip\030\001 "
    "\001(\t\022\014\n\004port\030\002 \001(\r\"2\n\rLogoutRequest\022\017\n\007us"
    "er_id\030\001 \002(\004\022\020\n\010dev_type\030\002 \001(\r\"]\n\036Registe"
    "rInterestGroupIdRequest\022\017\n\007user_id\030\001 \002(\004"
    "\022*\n\014groupid_list\030\002 \003(\0132\024.tt_im_group.Gro"
    "upId\"_\n UnRegisterInterestGroupIdRequest"
    "\022\017\n\007user_id\030\001 \002(\004\022*\n\014groupid_list\030\002 \003(\0132"
    "\024.tt_im_group.GroupId\"\234\001\n\024UplinkMessageR"
    "equest\022\024\n\014from_user_id\030\001 \002(\004\022\022\n\nto_user_"
    "id\030\002 \002(\004\022\021\n\tis_online\030\003 \002(\r\022\017\n\007message\030\004"
    " \002(\t\022\024\n\014message_type\030\005 \001(\r\022\016\n\006mts_ip\030\006 \001"
    "(\t\022\020\n\010mts_port\030\007 \001(\r\"~\n\026DownlinkMessageR"
    "equest\022\024\n\014from_user_id\030\001 \002(\004\022\022\n\nto_user_"
    "id\030\002 \002(\004\022\023\n\013message_pts\030\003 \002(\r\022\017\n\007message"
    "\030\004 \002(\t\022\024\n\014message_type\030\005 \001(\r\"\232\001\n\031UplinkG"
    "roupMessageRequest\022\024\n\014from_user_id\030\001 \002(\004"
    "\022&\n\010group_id\030\002 \002(\0132\024.tt_im_group.GroupId"
    "\022\017\n\007message\030\003 \002(\t\022\024\n\014message_type\030\004 \001(\r\022"
    "\030\n\020message_priority\030\005 \001(\r\"\261\001\n\033DownlinkGr"
    "oupMessageRequest\022\024\n\014from_user_id\030\001 \002(\004\022"
    "&\n\010group_id\030\002 \002(\0132\024.tt_im_group.GroupId\022"
    "\017\n\007message\030\003 \002(\t\022\023\n\013message_pts\030\004 \002(\r\022\024\n"
    "\014message_type\030\005 \001(\r\022\030\n\020message_priority\030"
    "\006 \001(\r\"h\n\025HistoryMessageRequest\022\017\n\007user_i"
    "d\030\001 \002(\004\022\022\n\nbegin_time\030\002 \001(\r\022\023\n\013time_leng"
    "th\030\003 \001(\r\022\025\n\rmessage_count\030\004 \001(\r\"\244\001\n\026Hist"
    "oryMessageResponse\022\017\n\007user_id\030\001 \002(\004\0220\n\010m"
    "essages\030\002 \003(\0132\036.tt_mts.DownlinkMessageRe"
    "quest\022\024\n\014current_time\030\003 \001(\r\022\023\n\013total_cou"
    "nt\030\004 \001(\r\022\r\n\005count\030\005 \001(\r\022\r\n\005index\030\006 \001(\r\"\213"
    "\001\n\036HistoryMessageCountInfoRequest\022\022\n\nto_"
    "user_id\030\001 \002(\004\022\025\n\rfrom_user_ids\030\002 \003(\004\022\022\n\n"
    "begin_time\030\003 \001(\r\022\023\n\013time_length\030\004 \001(\r\022\025\n"
    "\rmessage_types\030\005 \003(\r\"\256\003\n\037HistoryMessageC"
    "ountInfoResponse\022\022\n\nto_user_id\030\001 \002(\004\022\022\n\n"
    "begin_time\030\002 \001(\r\022\023\n\013time_length\030\003 \001(\r\022\025\n"
    "\rmessage_types\030\004 \003(\r\022a\n\023message_count_in"
    "fos\030\005 \003(\0132D.tt_mts.HistoryMessageCountIn"
    "foResponse.HistoryMessageUser2CountInfo\032"
    "C\n\034HistoryMessageType2CountInfo\022\024\n\014messa"
    "ge_type\030\001 \002(\r\022\r\n\005count\030\002 \002(\r\032\216\001\n\034History"
    "MessageUser2CountInfo\022\024\n\014from_user_id\030\001 "
    "\002(\004\022X\n\ncountinfos\030\002 \003(\0132D.tt_mts.History"
    "MessageCountInfoResponse.HistoryMessageT"
    "ype2CountInfo\"\326\001\n\035HistoryMessageFromUser"
    "Request\022\022\n\nto_user_id\030\001 \002(\004\022)\n\014from_user"
    "_id\030\002 \001(\004:\0239223372036854775792\022\022\n\nbegin_"
    "time\030\003 \001(\r\022\023\n\013time_length\030\004 \001(\r\022\025\n\rmessa"
    "ge_types\030\005 \003(\r\022\037\n\027is_equeal_message_type"
    "s\030\006 \001(\010\022\025\n\rmessage_count\030\007 \001(\r\"\375\001\n\036Histo"
    "ryMessageFromUserResponse\022\022\n\nto_user_id\030"
    "\001 \002(\004\022\024\n\014from_user_id\030\002 \001(\004\022\025\n\rmessage_t"
    "ypes\030\003 \003(\r\022\037\n\027is_equeal_message_types\030\004 "
    "\001(\010\0220\n\010messages\030\005 \003(\0132\036.tt_mts.DownlinkM"
    "essageRequest\022\024\n\014current_time\030\006 \001(\r\022\023\n\013t"
    "otal_count\030\007 \001(\r\022\r\n\005count\030\010 \001(\r\022\r\n\005index"
    "\030\t \001(\r\"\204\001\n\032HistoryGroupMessageRequest\022&\n"
    "\010group_id\030\001 \002(\0132\024.tt_im_group.GroupId\022\022\n"
    "\nbegin_time\030\002 \001(\r\022\023\n\013time_length\030\003 \001(\r\022\025"
    "\n\rmessage_count\030\004 \001(\r\"\305\001\n\033HistoryGroupMe"
    "ssageResponse\022&\n\010group_id\030\001 \002(\0132\024.tt_im_"
    "group.GroupId\0225\n\010messages\030\002 \003(\0132#.tt_mts"
    ".DownlinkGroupMessageRequest\022\024\n\014current_"
    "time\030\003 \001(\r\022\023\n\013total_count\030\004 \001(\r\022\r\n\005count"
    "\030\005 \001(\r\022\r\n\005index\030\006 \001(\r\"p\n\030HistorySysMessa"
    "geRequest\022\024\n\014message_type\030\001 \001(\r\022\022\n\nbegin"
    "_time\030\002 \001(\r\022\023\n\013time_length\030\003 \001(\r\022\025\n\rmess"
    "age_count\030\004 \001(\r\"c\n\031HistorySysMessageResp"
    "onse\022\024\n\014message_type\030\001 \001(\r\0220\n\010messages\030\002"
    " \003(\0132\036.tt_mts.DownlinkMessageRequest\"]\n\022"
    "MTS_DEBUG_UserInfo\022\017\n\007user_id\030\001 \002(\004\022\017\n\007u"
    "ser_ip\030\002 \002(\t\022\021\n\tuser_port\030\003 \002(\r\022\022\n\nlogin"
    "_time\030\004 \001(\r\"g\n\025MTS_DEBUG_ServiceInfo\022\022\n\n"
    "serve_type\030\001 \002(\r\022\020\n\010serve_ip\030\002 \002(\t\022\022\n\nse"
    "rve_port\030\003 \002(\r\022\024\n\014connect_time\030\004 \001(\r\"\034\n\032"
    "MTS_DEBUG_ListUsersRequest\"H\n\033MTS_DEBUG_"
    "ListUsersResponse\022)\n\005users\030\001 \003(\0132\032.tt_mt"
    "s.MTS_DEBUG_UserInfo\"$\n\"MTS_DEBUG_ListOt"
    "herServicesRequest\"V\n#MTS_DEBUG_ListOthe"
    "rServicesResponse\022/\n\010services\030\001 \003(\0132\035.tt"
    "_mts.MTS_DEBUG_ServiceInfo\":\n\'MTS_DEBUG_"
    "ListGroupsBelongToUserRequest\022\017\n\007user_id"
    "\030\001 \002(\004\"d\n(MTS_DEBUG_ListGroupsBelongToUs"
    "erResponse\022\017\n\007user_id\030\001 \002(\004\022\'\n\tgroup_ids"
    "\030\002 \003(\0132\024.tt_im_group.GroupId\"b\n.MTS_DEBU"
    "G_ListGroupsBelongToGroupserverRequest\022\026"
    "\n\016groupserver_ip\030\001 \002(\t\022\030\n\020groupserver_po"
    "rt\030\002 \001(\r\"\214\001\n/MTS_DEBUG_ListGroupsBelongT"
    "oGroupserverResponse\022\026\n\016groupserver_ip\030\001"
    " \002(\t\022\030\n\020groupserver_port\030\002 \001(\r\022\'\n\tgroup_"
    "ids\030\003 \003(\0132\024.tt_im_group.GroupId\"Q\n\'MTS_D"
    "EBUG_ListUsersBelongToGroupRequest\022&\n\010gr"
    "oup_id\030\001 \002(\0132\024.tt_im_group.GroupId\"}\n(MT"
    "S_DEBUG_ListUsersBelongToGroupResponse\022&"
    "\n\010group_id\030\001 \002(\0132\024.tt_im_group.GroupId\022)"
    "\n\005users\030\002 \003(\0132\032.tt_mts.MTS_DEBUG_UserInf"
    "o*\267\003\n\007COMMAND\022\031\n\023TMCP_MTS_USER_LOGIN\020\201\204\001"
    "\022\032\n\024TMCP_MTS_USER_LOGOUT\020\202\204\001\022%\n\037TMCP_MTS"
    "_EVT_REG_INTEREST_GROUP\020\221\204\001\022\'\n!TMCP_MTS_"
    "EVT_UNREG_INTEREST_GROUP\020\222\204\001\022\031\n\023TMCP_MTS"
    "_UPLINK_MSG\020\241\204\001\022\033\n\025TMCP_MTS_DOWNLINK_MSG"
    "\020\242\204\001\022\037\n\031TMCP_MTS_UPLINK_GROUP_MSG\020\243\204\001\022!\n"
    "\033TMCP_MTS_DOWNLINK_GROUP_MSG\020\244\204\001\022\032\n\024TMCP"
    "_MTS_HISTORY_MSG\020\246\204\001\022 \n\032TMCP_MTS_HISTORY"
    "_GROUP_MSG\020\247\204\001\022\036\n\030TMCP_MTS_HISTORY_SYS_M"
    "SG\020\250\204\001\022%\n\037TMCP_MTS_HISTORY_MSG_COUNT_INF"
    "O\020\261\204\001\022$\n\036TMCP_MTS_HISTORY_MSG_FROM_USER\020"
    "\262\204\001*\364\001\n\rDEBUG_COMMAND\022\037\n\031TMCP_MTS_DEBUG_"
    "LIST_USERS\020\241\205\001\022(\n\"TMCP_MTS_DEBUG_LIST_OT"
    "HER_SERVICES\020\242\205\001\022/\n)TMCP_MTS_DEBUG_LIST_"
    "GROUPS_BELONG_TO_USER\020\243\205\001\0226\n0TMCP_MTS_DE"
    "BUG_LIST_GROUPS_BELONG_TO_GROUPSERVER\020\244\205"
    "\001\022/\n)TMCP_MTS_DEBUG_LIST_USERS_BELONG_TO"
    "_GROUP\020\245\205\001*9\n\014MACRO_DEFINE\022)\n!TMCP_MTS_Q"
    "UERY_FUZZY_MESSAGE_TYPE\020\360\377\377\377\007", 4749);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessageTransferServer.proto", &protobuf_RegisterTypes);
  LoginRequest::default_instance_ = new LoginRequest();
  LoginRequest_AccessAddr::default_instance_ = new LoginRequest_AccessAddr();
  LogoutRequest::default_instance_ = new LogoutRequest();
  RegisterInterestGroupIdRequest::default_instance_ = new RegisterInterestGroupIdRequest();
  UnRegisterInterestGroupIdRequest::default_instance_ = new UnRegisterInterestGroupIdRequest();
  UplinkMessageRequest::default_instance_ = new UplinkMessageRequest();
  DownlinkMessageRequest::default_instance_ = new DownlinkMessageRequest();
  UplinkGroupMessageRequest::default_instance_ = new UplinkGroupMessageRequest();
  DownlinkGroupMessageRequest::default_instance_ = new DownlinkGroupMessageRequest();
  HistoryMessageRequest::default_instance_ = new HistoryMessageRequest();
  HistoryMessageResponse::default_instance_ = new HistoryMessageResponse();
  HistoryMessageCountInfoRequest::default_instance_ = new HistoryMessageCountInfoRequest();
  HistoryMessageCountInfoResponse::default_instance_ = new HistoryMessageCountInfoResponse();
  HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo::default_instance_ = new HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo();
  HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo::default_instance_ = new HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo();
  HistoryMessageFromUserRequest::default_instance_ = new HistoryMessageFromUserRequest();
  HistoryMessageFromUserResponse::default_instance_ = new HistoryMessageFromUserResponse();
  HistoryGroupMessageRequest::default_instance_ = new HistoryGroupMessageRequest();
  HistoryGroupMessageResponse::default_instance_ = new HistoryGroupMessageResponse();
  HistorySysMessageRequest::default_instance_ = new HistorySysMessageRequest();
  HistorySysMessageResponse::default_instance_ = new HistorySysMessageResponse();
  MTS_DEBUG_UserInfo::default_instance_ = new MTS_DEBUG_UserInfo();
  MTS_DEBUG_ServiceInfo::default_instance_ = new MTS_DEBUG_ServiceInfo();
  MTS_DEBUG_ListUsersRequest::default_instance_ = new MTS_DEBUG_ListUsersRequest();
  MTS_DEBUG_ListUsersResponse::default_instance_ = new MTS_DEBUG_ListUsersResponse();
  MTS_DEBUG_ListOtherServicesRequest::default_instance_ = new MTS_DEBUG_ListOtherServicesRequest();
  MTS_DEBUG_ListOtherServicesResponse::default_instance_ = new MTS_DEBUG_ListOtherServicesResponse();
  MTS_DEBUG_ListGroupsBelongToUserRequest::default_instance_ = new MTS_DEBUG_ListGroupsBelongToUserRequest();
  MTS_DEBUG_ListGroupsBelongToUserResponse::default_instance_ = new MTS_DEBUG_ListGroupsBelongToUserResponse();
  MTS_DEBUG_ListGroupsBelongToGroupserverRequest::default_instance_ = new MTS_DEBUG_ListGroupsBelongToGroupserverRequest();
  MTS_DEBUG_ListGroupsBelongToGroupserverResponse::default_instance_ = new MTS_DEBUG_ListGroupsBelongToGroupserverResponse();
  MTS_DEBUG_ListUsersBelongToGroupRequest::default_instance_ = new MTS_DEBUG_ListUsersBelongToGroupRequest();
  MTS_DEBUG_ListUsersBelongToGroupResponse::default_instance_ = new MTS_DEBUG_ListUsersBelongToGroupResponse();
  LoginRequest::default_instance_->InitAsDefaultInstance();
  LoginRequest_AccessAddr::default_instance_->InitAsDefaultInstance();
  LogoutRequest::default_instance_->InitAsDefaultInstance();
  RegisterInterestGroupIdRequest::default_instance_->InitAsDefaultInstance();
  UnRegisterInterestGroupIdRequest::default_instance_->InitAsDefaultInstance();
  UplinkMessageRequest::default_instance_->InitAsDefaultInstance();
  DownlinkMessageRequest::default_instance_->InitAsDefaultInstance();
  UplinkGroupMessageRequest::default_instance_->InitAsDefaultInstance();
  DownlinkGroupMessageRequest::default_instance_->InitAsDefaultInstance();
  HistoryMessageRequest::default_instance_->InitAsDefaultInstance();
  HistoryMessageResponse::default_instance_->InitAsDefaultInstance();
  HistoryMessageCountInfoRequest::default_instance_->InitAsDefaultInstance();
  HistoryMessageCountInfoResponse::default_instance_->InitAsDefaultInstance();
  HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo::default_instance_->InitAsDefaultInstance();
  HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo::default_instance_->InitAsDefaultInstance();
  HistoryMessageFromUserRequest::default_instance_->InitAsDefaultInstance();
  HistoryMessageFromUserResponse::default_instance_->InitAsDefaultInstance();
  HistoryGroupMessageRequest::default_instance_->InitAsDefaultInstance();
  HistoryGroupMessageResponse::default_instance_->InitAsDefaultInstance();
  HistorySysMessageRequest::default_instance_->InitAsDefaultInstance();
  HistorySysMessageResponse::default_instance_->InitAsDefaultInstance();
  MTS_DEBUG_UserInfo::default_instance_->InitAsDefaultInstance();
  MTS_DEBUG_ServiceInfo::default_instance_->InitAsDefaultInstance();
  MTS_DEBUG_ListUsersRequest::default_instance_->InitAsDefaultInstance();
  MTS_DEBUG_ListUsersResponse::default_instance_->InitAsDefaultInstance();
  MTS_DEBUG_ListOtherServicesRequest::default_instance_->InitAsDefaultInstance();
  MTS_DEBUG_ListOtherServicesResponse::default_instance_->InitAsDefaultInstance();
  MTS_DEBUG_ListGroupsBelongToUserRequest::default_instance_->InitAsDefaultInstance();
  MTS_DEBUG_ListGroupsBelongToUserResponse::default_instance_->InitAsDefaultInstance();
  MTS_DEBUG_ListGroupsBelongToGroupserverRequest::default_instance_->InitAsDefaultInstance();
  MTS_DEBUG_ListGroupsBelongToGroupserverResponse::default_instance_->InitAsDefaultInstance();
  MTS_DEBUG_ListUsersBelongToGroupRequest::default_instance_->InitAsDefaultInstance();
  MTS_DEBUG_ListUsersBelongToGroupResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessageTransferServer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessageTransferServer_2eproto {
  StaticDescriptorInitializer_MessageTransferServer_2eproto() {
    protobuf_AddDesc_MessageTransferServer_2eproto();
  }
} static_descriptor_initializer_MessageTransferServer_2eproto_;
const ::google::protobuf::EnumDescriptor* COMMAND_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return COMMAND_descriptor_;
}
bool COMMAND_IsValid(int value) {
  switch(value) {
    case 16897:
    case 16898:
    case 16913:
    case 16914:
    case 16929:
    case 16930:
    case 16931:
    case 16932:
    case 16934:
    case 16935:
    case 16936:
    case 16945:
    case 16946:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DEBUG_COMMAND_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DEBUG_COMMAND_descriptor_;
}
bool DEBUG_COMMAND_IsValid(int value) {
  switch(value) {
    case 17057:
    case 17058:
    case 17059:
    case 17060:
    case 17061:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MACRO_DEFINE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MACRO_DEFINE_descriptor_;
}
bool MACRO_DEFINE_IsValid(int value) {
  switch(value) {
    case 2147483632:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRequest_AccessAddr::kIpFieldNumber;
const int LoginRequest_AccessAddr::kPortFieldNumber;
#endif  // !_MSC_VER

LoginRequest_AccessAddr::LoginRequest_AccessAddr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_mts.LoginRequest.AccessAddr)
}

void LoginRequest_AccessAddr::InitAsDefaultInstance() {
}

LoginRequest_AccessAddr::LoginRequest_AccessAddr(const LoginRequest_AccessAddr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_mts.LoginRequest.AccessAddr)
}

void LoginRequest_AccessAddr::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRequest_AccessAddr::~LoginRequest_AccessAddr() {
  // @@protoc_insertion_point(destructor:tt_mts.LoginRequest.AccessAddr)
  SharedDtor();
}

void LoginRequest_AccessAddr::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void LoginRequest_AccessAddr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequest_AccessAddr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRequest_AccessAddr_descriptor_;
}

const LoginRequest_AccessAddr& LoginRequest_AccessAddr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTransferServer_2eproto();
  return *default_instance_;
}

LoginRequest_AccessAddr* LoginRequest_AccessAddr::default_instance_ = NULL;

LoginRequest_AccessAddr* LoginRequest_AccessAddr::New() const {
  return new LoginRequest_AccessAddr;
}

void LoginRequest_AccessAddr::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRequest_AccessAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_mts.LoginRequest.AccessAddr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional uint32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tt_mts.LoginRequest.AccessAddr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_mts.LoginRequest.AccessAddr)
  return false;
#undef DO_
}

void LoginRequest_AccessAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_mts.LoginRequest.AccessAddr)
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // optional uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_mts.LoginRequest.AccessAddr)
}

::google::protobuf::uint8* LoginRequest_AccessAddr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_mts.LoginRequest.AccessAddr)
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // optional uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_mts.LoginRequest.AccessAddr)
  return target;
}

int LoginRequest_AccessAddr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequest_AccessAddr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRequest_AccessAddr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRequest_AccessAddr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRequest_AccessAddr::MergeFrom(const LoginRequest_AccessAddr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRequest_AccessAddr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest_AccessAddr::CopyFrom(const LoginRequest_AccessAddr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest_AccessAddr::IsInitialized() const {

  return true;
}

void LoginRequest_AccessAddr::Swap(LoginRequest_AccessAddr* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRequest_AccessAddr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRequest_AccessAddr_descriptor_;
  metadata.reflection = LoginRequest_AccessAddr_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int LoginRequest::kUserIdFieldNumber;
const int LoginRequest::kDevTypeFieldNumber;
const int LoginRequest::kTokenFieldNumber;
const int LoginRequest::kAccessAddrFieldNumber;
#endif  // !_MSC_VER

LoginRequest::LoginRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_mts.LoginRequest)
}

void LoginRequest::InitAsDefaultInstance() {
  access_addr_ = const_cast< ::tt_mts::LoginRequest_AccessAddr*>(&::tt_mts::LoginRequest_AccessAddr::default_instance());
}

LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_mts.LoginRequest)
}

void LoginRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  dev_type_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  access_addr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:tt_mts.LoginRequest)
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
    delete access_addr_;
  }
}

void LoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRequest_descriptor_;
}

const LoginRequest& LoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTransferServer_2eproto();
  return *default_instance_;
}

LoginRequest* LoginRequest::default_instance_ = NULL;

LoginRequest* LoginRequest::New() const {
  return new LoginRequest;
}

void LoginRequest::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    user_id_ = GOOGLE_ULONGLONG(0);
    dev_type_ = 0u;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    if (has_access_addr()) {
      if (access_addr_ != NULL) access_addr_->::tt_mts::LoginRequest_AccessAddr::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_mts.LoginRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dev_type;
        break;
      }

      // optional uint32 dev_type = 2;
      case 2: {
        if (tag == 16) {
         parse_dev_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dev_type_)));
          set_has_dev_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // optional string token = 3;
      case 3: {
        if (tag == 26) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_access_addr;
        break;
      }

      // optional .tt_mts.LoginRequest.AccessAddr access_addr = 4;
      case 4: {
        if (tag == 34) {
         parse_access_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_access_addr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tt_mts.LoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_mts.LoginRequest)
  return false;
#undef DO_
}

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_mts.LoginRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint32 dev_type = 2;
  if (has_dev_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dev_type(), output);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->token(), output);
  }

  // optional .tt_mts.LoginRequest.AccessAddr access_addr = 4;
  if (has_access_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->access_addr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_mts.LoginRequest)
}

::google::protobuf::uint8* LoginRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_mts.LoginRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint32 dev_type = 2;
  if (has_dev_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dev_type(), target);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  // optional .tt_mts.LoginRequest.AccessAddr access_addr = 4;
  if (has_access_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->access_addr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_mts.LoginRequest)
  return target;
}

int LoginRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint32 dev_type = 2;
    if (has_dev_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dev_type());
    }

    // optional string token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional .tt_mts.LoginRequest.AccessAddr access_addr = 4;
    if (has_access_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->access_addr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_dev_type()) {
      set_dev_type(from.dev_type());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_access_addr()) {
      mutable_access_addr()->::tt_mts::LoginRequest_AccessAddr::MergeFrom(from.access_addr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(dev_type_, other->dev_type_);
    std::swap(token_, other->token_);
    std::swap(access_addr_, other->access_addr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRequest_descriptor_;
  metadata.reflection = LoginRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogoutRequest::kUserIdFieldNumber;
const int LogoutRequest::kDevTypeFieldNumber;
#endif  // !_MSC_VER

LogoutRequest::LogoutRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_mts.LogoutRequest)
}

void LogoutRequest::InitAsDefaultInstance() {
}

LogoutRequest::LogoutRequest(const LogoutRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_mts.LogoutRequest)
}

void LogoutRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  dev_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogoutRequest::~LogoutRequest() {
  // @@protoc_insertion_point(destructor:tt_mts.LogoutRequest)
  SharedDtor();
}

void LogoutRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogoutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogoutRequest_descriptor_;
}

const LogoutRequest& LogoutRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTransferServer_2eproto();
  return *default_instance_;
}

LogoutRequest* LogoutRequest::default_instance_ = NULL;

LogoutRequest* LogoutRequest::New() const {
  return new LogoutRequest;
}

void LogoutRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LogoutRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, dev_type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogoutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_mts.LogoutRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dev_type;
        break;
      }

      // optional uint32 dev_type = 2;
      case 2: {
        if (tag == 16) {
         parse_dev_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dev_type_)));
          set_has_dev_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tt_mts.LogoutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_mts.LogoutRequest)
  return false;
#undef DO_
}

void LogoutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_mts.LogoutRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint32 dev_type = 2;
  if (has_dev_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dev_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_mts.LogoutRequest)
}

::google::protobuf::uint8* LogoutRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_mts.LogoutRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint32 dev_type = 2;
  if (has_dev_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dev_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_mts.LogoutRequest)
  return target;
}

int LogoutRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint32 dev_type = 2;
    if (has_dev_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dev_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogoutRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogoutRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogoutRequest::MergeFrom(const LogoutRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_dev_type()) {
      set_dev_type(from.dev_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogoutRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutRequest::CopyFrom(const LogoutRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LogoutRequest::Swap(LogoutRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(dev_type_, other->dev_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogoutRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogoutRequest_descriptor_;
  metadata.reflection = LogoutRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterInterestGroupIdRequest::kUserIdFieldNumber;
const int RegisterInterestGroupIdRequest::kGroupidListFieldNumber;
#endif  // !_MSC_VER

RegisterInterestGroupIdRequest::RegisterInterestGroupIdRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_mts.RegisterInterestGroupIdRequest)
}

void RegisterInterestGroupIdRequest::InitAsDefaultInstance() {
}

RegisterInterestGroupIdRequest::RegisterInterestGroupIdRequest(const RegisterInterestGroupIdRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_mts.RegisterInterestGroupIdRequest)
}

void RegisterInterestGroupIdRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterInterestGroupIdRequest::~RegisterInterestGroupIdRequest() {
  // @@protoc_insertion_point(destructor:tt_mts.RegisterInterestGroupIdRequest)
  SharedDtor();
}

void RegisterInterestGroupIdRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegisterInterestGroupIdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterInterestGroupIdRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterInterestGroupIdRequest_descriptor_;
}

const RegisterInterestGroupIdRequest& RegisterInterestGroupIdRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTransferServer_2eproto();
  return *default_instance_;
}

RegisterInterestGroupIdRequest* RegisterInterestGroupIdRequest::default_instance_ = NULL;

RegisterInterestGroupIdRequest* RegisterInterestGroupIdRequest::New() const {
  return new RegisterInterestGroupIdRequest;
}

void RegisterInterestGroupIdRequest::Clear() {
  user_id_ = GOOGLE_ULONGLONG(0);
  groupid_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterInterestGroupIdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_mts.RegisterInterestGroupIdRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_groupid_list;
        break;
      }

      // repeated .tt_im_group.GroupId groupid_list = 2;
      case 2: {
        if (tag == 18) {
         parse_groupid_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_groupid_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_groupid_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tt_mts.RegisterInterestGroupIdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_mts.RegisterInterestGroupIdRequest)
  return false;
#undef DO_
}

void RegisterInterestGroupIdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_mts.RegisterInterestGroupIdRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // repeated .tt_im_group.GroupId groupid_list = 2;
  for (int i = 0; i < this->groupid_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->groupid_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_mts.RegisterInterestGroupIdRequest)
}

::google::protobuf::uint8* RegisterInterestGroupIdRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_mts.RegisterInterestGroupIdRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // repeated .tt_im_group.GroupId groupid_list = 2;
  for (int i = 0; i < this->groupid_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->groupid_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_mts.RegisterInterestGroupIdRequest)
  return target;
}

int RegisterInterestGroupIdRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

  }
  // repeated .tt_im_group.GroupId groupid_list = 2;
  total_size += 1 * this->groupid_list_size();
  for (int i = 0; i < this->groupid_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->groupid_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterInterestGroupIdRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterInterestGroupIdRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterInterestGroupIdRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterInterestGroupIdRequest::MergeFrom(const RegisterInterestGroupIdRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  groupid_list_.MergeFrom(from.groupid_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterInterestGroupIdRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterInterestGroupIdRequest::CopyFrom(const RegisterInterestGroupIdRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterInterestGroupIdRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->groupid_list())) return false;
  return true;
}

void RegisterInterestGroupIdRequest::Swap(RegisterInterestGroupIdRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    groupid_list_.Swap(&other->groupid_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterInterestGroupIdRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterInterestGroupIdRequest_descriptor_;
  metadata.reflection = RegisterInterestGroupIdRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnRegisterInterestGroupIdRequest::kUserIdFieldNumber;
const int UnRegisterInterestGroupIdRequest::kGroupidListFieldNumber;
#endif  // !_MSC_VER

UnRegisterInterestGroupIdRequest::UnRegisterInterestGroupIdRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_mts.UnRegisterInterestGroupIdRequest)
}

void UnRegisterInterestGroupIdRequest::InitAsDefaultInstance() {
}

UnRegisterInterestGroupIdRequest::UnRegisterInterestGroupIdRequest(const UnRegisterInterestGroupIdRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_mts.UnRegisterInterestGroupIdRequest)
}

void UnRegisterInterestGroupIdRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnRegisterInterestGroupIdRequest::~UnRegisterInterestGroupIdRequest() {
  // @@protoc_insertion_point(destructor:tt_mts.UnRegisterInterestGroupIdRequest)
  SharedDtor();
}

void UnRegisterInterestGroupIdRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnRegisterInterestGroupIdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnRegisterInterestGroupIdRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnRegisterInterestGroupIdRequest_descriptor_;
}

const UnRegisterInterestGroupIdRequest& UnRegisterInterestGroupIdRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTransferServer_2eproto();
  return *default_instance_;
}

UnRegisterInterestGroupIdRequest* UnRegisterInterestGroupIdRequest::default_instance_ = NULL;

UnRegisterInterestGroupIdRequest* UnRegisterInterestGroupIdRequest::New() const {
  return new UnRegisterInterestGroupIdRequest;
}

void UnRegisterInterestGroupIdRequest::Clear() {
  user_id_ = GOOGLE_ULONGLONG(0);
  groupid_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnRegisterInterestGroupIdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_mts.UnRegisterInterestGroupIdRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_groupid_list;
        break;
      }

      // repeated .tt_im_group.GroupId groupid_list = 2;
      case 2: {
        if (tag == 18) {
         parse_groupid_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_groupid_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_groupid_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tt_mts.UnRegisterInterestGroupIdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_mts.UnRegisterInterestGroupIdRequest)
  return false;
#undef DO_
}

void UnRegisterInterestGroupIdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_mts.UnRegisterInterestGroupIdRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // repeated .tt_im_group.GroupId groupid_list = 2;
  for (int i = 0; i < this->groupid_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->groupid_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_mts.UnRegisterInterestGroupIdRequest)
}

::google::protobuf::uint8* UnRegisterInterestGroupIdRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_mts.UnRegisterInterestGroupIdRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // repeated .tt_im_group.GroupId groupid_list = 2;
  for (int i = 0; i < this->groupid_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->groupid_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_mts.UnRegisterInterestGroupIdRequest)
  return target;
}

int UnRegisterInterestGroupIdRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

  }
  // repeated .tt_im_group.GroupId groupid_list = 2;
  total_size += 1 * this->groupid_list_size();
  for (int i = 0; i < this->groupid_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->groupid_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnRegisterInterestGroupIdRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnRegisterInterestGroupIdRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnRegisterInterestGroupIdRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnRegisterInterestGroupIdRequest::MergeFrom(const UnRegisterInterestGroupIdRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  groupid_list_.MergeFrom(from.groupid_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnRegisterInterestGroupIdRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnRegisterInterestGroupIdRequest::CopyFrom(const UnRegisterInterestGroupIdRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnRegisterInterestGroupIdRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->groupid_list())) return false;
  return true;
}

void UnRegisterInterestGroupIdRequest::Swap(UnRegisterInterestGroupIdRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    groupid_list_.Swap(&other->groupid_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnRegisterInterestGroupIdRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnRegisterInterestGroupIdRequest_descriptor_;
  metadata.reflection = UnRegisterInterestGroupIdRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UplinkMessageRequest::kFromUserIdFieldNumber;
const int UplinkMessageRequest::kToUserIdFieldNumber;
const int UplinkMessageRequest::kIsOnlineFieldNumber;
const int UplinkMessageRequest::kMessageFieldNumber;
const int UplinkMessageRequest::kMessageTypeFieldNumber;
const int UplinkMessageRequest::kMtsIpFieldNumber;
const int UplinkMessageRequest::kMtsPortFieldNumber;
#endif  // !_MSC_VER

UplinkMessageRequest::UplinkMessageRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_mts.UplinkMessageRequest)
}

void UplinkMessageRequest::InitAsDefaultInstance() {
}

UplinkMessageRequest::UplinkMessageRequest(const UplinkMessageRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_mts.UplinkMessageRequest)
}

void UplinkMessageRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  from_user_id_ = GOOGLE_ULONGLONG(0);
  to_user_id_ = GOOGLE_ULONGLONG(0);
  is_online_ = 0u;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_type_ = 0u;
  mts_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mts_port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UplinkMessageRequest::~UplinkMessageRequest() {
  // @@protoc_insertion_point(destructor:tt_mts.UplinkMessageRequest)
  SharedDtor();
}

void UplinkMessageRequest::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (mts_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mts_ip_;
  }
  if (this != default_instance_) {
  }
}

void UplinkMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UplinkMessageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UplinkMessageRequest_descriptor_;
}

const UplinkMessageRequest& UplinkMessageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTransferServer_2eproto();
  return *default_instance_;
}

UplinkMessageRequest* UplinkMessageRequest::default_instance_ = NULL;

UplinkMessageRequest* UplinkMessageRequest::New() const {
  return new UplinkMessageRequest;
}

void UplinkMessageRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UplinkMessageRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(from_user_id_, to_user_id_);
    ZR_(is_online_, message_type_);
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
    if (has_mts_ip()) {
      if (mts_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mts_ip_->clear();
      }
    }
    mts_port_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UplinkMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_mts.UplinkMessageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 from_user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_user_id_)));
          set_has_from_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_to_user_id;
        break;
      }

      // required uint64 to_user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_to_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_user_id_)));
          set_has_to_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_online;
        break;
      }

      // required uint32 is_online = 3;
      case 3: {
        if (tag == 24) {
         parse_is_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_online_)));
          set_has_is_online();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_message;
        break;
      }

      // required string message = 4;
      case 4: {
        if (tag == 34) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_message_type;
        break;
      }

      // optional uint32 message_type = 5;
      case 5: {
        if (tag == 40) {
         parse_message_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_type_)));
          set_has_message_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_mts_ip;
        break;
      }

      // optional string mts_ip = 6;
      case 6: {
        if (tag == 50) {
         parse_mts_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mts_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mts_ip().data(), this->mts_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mts_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_mts_port;
        break;
      }

      // optional uint32 mts_port = 7;
      case 7: {
        if (tag == 56) {
         parse_mts_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mts_port_)));
          set_has_mts_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tt_mts.UplinkMessageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_mts.UplinkMessageRequest)
  return false;
#undef DO_
}

void UplinkMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_mts.UplinkMessageRequest)
  // required uint64 from_user_id = 1;
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->from_user_id(), output);
  }

  // required uint64 to_user_id = 2;
  if (has_to_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->to_user_id(), output);
  }

  // required uint32 is_online = 3;
  if (has_is_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_online(), output);
  }

  // required string message = 4;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->message(), output);
  }

  // optional uint32 message_type = 5;
  if (has_message_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->message_type(), output);
  }

  // optional string mts_ip = 6;
  if (has_mts_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mts_ip().data(), this->mts_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mts_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->mts_ip(), output);
  }

  // optional uint32 mts_port = 7;
  if (has_mts_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->mts_port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_mts.UplinkMessageRequest)
}

::google::protobuf::uint8* UplinkMessageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_mts.UplinkMessageRequest)
  // required uint64 from_user_id = 1;
  if (has_from_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->from_user_id(), target);
  }

  // required uint64 to_user_id = 2;
  if (has_to_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->to_user_id(), target);
  }

  // required uint32 is_online = 3;
  if (has_is_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->is_online(), target);
  }

  // required string message = 4;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->message(), target);
  }

  // optional uint32 message_type = 5;
  if (has_message_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->message_type(), target);
  }

  // optional string mts_ip = 6;
  if (has_mts_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mts_ip().data(), this->mts_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mts_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->mts_ip(), target);
  }

  // optional uint32 mts_port = 7;
  if (has_mts_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->mts_port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_mts.UplinkMessageRequest)
  return target;
}

int UplinkMessageRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 from_user_id = 1;
    if (has_from_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_user_id());
    }

    // required uint64 to_user_id = 2;
    if (has_to_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_user_id());
    }

    // required uint32 is_online = 3;
    if (has_is_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_online());
    }

    // required string message = 4;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional uint32 message_type = 5;
    if (has_message_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_type());
    }

    // optional string mts_ip = 6;
    if (has_mts_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mts_ip());
    }

    // optional uint32 mts_port = 7;
    if (has_mts_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mts_port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UplinkMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UplinkMessageRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UplinkMessageRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UplinkMessageRequest::MergeFrom(const UplinkMessageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_user_id()) {
      set_from_user_id(from.from_user_id());
    }
    if (from.has_to_user_id()) {
      set_to_user_id(from.to_user_id());
    }
    if (from.has_is_online()) {
      set_is_online(from.is_online());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_message_type()) {
      set_message_type(from.message_type());
    }
    if (from.has_mts_ip()) {
      set_mts_ip(from.mts_ip());
    }
    if (from.has_mts_port()) {
      set_mts_port(from.mts_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UplinkMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UplinkMessageRequest::CopyFrom(const UplinkMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UplinkMessageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void UplinkMessageRequest::Swap(UplinkMessageRequest* other) {
  if (other != this) {
    std::swap(from_user_id_, other->from_user_id_);
    std::swap(to_user_id_, other->to_user_id_);
    std::swap(is_online_, other->is_online_);
    std::swap(message_, other->message_);
    std::swap(message_type_, other->message_type_);
    std::swap(mts_ip_, other->mts_ip_);
    std::swap(mts_port_, other->mts_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UplinkMessageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UplinkMessageRequest_descriptor_;
  metadata.reflection = UplinkMessageRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DownlinkMessageRequest::kFromUserIdFieldNumber;
const int DownlinkMessageRequest::kToUserIdFieldNumber;
const int DownlinkMessageRequest::kMessagePtsFieldNumber;
const int DownlinkMessageRequest::kMessageFieldNumber;
const int DownlinkMessageRequest::kMessageTypeFieldNumber;
#endif  // !_MSC_VER

DownlinkMessageRequest::DownlinkMessageRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_mts.DownlinkMessageRequest)
}

void DownlinkMessageRequest::InitAsDefaultInstance() {
}

DownlinkMessageRequest::DownlinkMessageRequest(const DownlinkMessageRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_mts.DownlinkMessageRequest)
}

void DownlinkMessageRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  from_user_id_ = GOOGLE_ULONGLONG(0);
  to_user_id_ = GOOGLE_ULONGLONG(0);
  message_pts_ = 0u;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownlinkMessageRequest::~DownlinkMessageRequest() {
  // @@protoc_insertion_point(destructor:tt_mts.DownlinkMessageRequest)
  SharedDtor();
}

void DownlinkMessageRequest::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void DownlinkMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownlinkMessageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownlinkMessageRequest_descriptor_;
}

const DownlinkMessageRequest& DownlinkMessageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTransferServer_2eproto();
  return *default_instance_;
}

DownlinkMessageRequest* DownlinkMessageRequest::default_instance_ = NULL;

DownlinkMessageRequest* DownlinkMessageRequest::New() const {
  return new DownlinkMessageRequest;
}

void DownlinkMessageRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DownlinkMessageRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(from_user_id_, to_user_id_);
    ZR_(message_pts_, message_type_);
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DownlinkMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_mts.DownlinkMessageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 from_user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_user_id_)));
          set_has_from_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_to_user_id;
        break;
      }

      // required uint64 to_user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_to_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_user_id_)));
          set_has_to_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_message_pts;
        break;
      }

      // required uint32 message_pts = 3;
      case 3: {
        if (tag == 24) {
         parse_message_pts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_pts_)));
          set_has_message_pts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_message;
        break;
      }

      // required string message = 4;
      case 4: {
        if (tag == 34) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_message_type;
        break;
      }

      // optional uint32 message_type = 5;
      case 5: {
        if (tag == 40) {
         parse_message_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_type_)));
          set_has_message_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tt_mts.DownlinkMessageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_mts.DownlinkMessageRequest)
  return false;
#undef DO_
}

void DownlinkMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_mts.DownlinkMessageRequest)
  // required uint64 from_user_id = 1;
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->from_user_id(), output);
  }

  // required uint64 to_user_id = 2;
  if (has_to_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->to_user_id(), output);
  }

  // required uint32 message_pts = 3;
  if (has_message_pts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->message_pts(), output);
  }

  // required string message = 4;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->message(), output);
  }

  // optional uint32 message_type = 5;
  if (has_message_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->message_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_mts.DownlinkMessageRequest)
}

::google::protobuf::uint8* DownlinkMessageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_mts.DownlinkMessageRequest)
  // required uint64 from_user_id = 1;
  if (has_from_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->from_user_id(), target);
  }

  // required uint64 to_user_id = 2;
  if (has_to_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->to_user_id(), target);
  }

  // required uint32 message_pts = 3;
  if (has_message_pts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->message_pts(), target);
  }

  // required string message = 4;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->message(), target);
  }

  // optional uint32 message_type = 5;
  if (has_message_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->message_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_mts.DownlinkMessageRequest)
  return target;
}

int DownlinkMessageRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 from_user_id = 1;
    if (has_from_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_user_id());
    }

    // required uint64 to_user_id = 2;
    if (has_to_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_user_id());
    }

    // required uint32 message_pts = 3;
    if (has_message_pts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_pts());
    }

    // required string message = 4;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional uint32 message_type = 5;
    if (has_message_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownlinkMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DownlinkMessageRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DownlinkMessageRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DownlinkMessageRequest::MergeFrom(const DownlinkMessageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_user_id()) {
      set_from_user_id(from.from_user_id());
    }
    if (from.has_to_user_id()) {
      set_to_user_id(from.to_user_id());
    }
    if (from.has_message_pts()) {
      set_message_pts(from.message_pts());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_message_type()) {
      set_message_type(from.message_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DownlinkMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownlinkMessageRequest::CopyFrom(const DownlinkMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownlinkMessageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void DownlinkMessageRequest::Swap(DownlinkMessageRequest* other) {
  if (other != this) {
    std::swap(from_user_id_, other->from_user_id_);
    std::swap(to_user_id_, other->to_user_id_);
    std::swap(message_pts_, other->message_pts_);
    std::swap(message_, other->message_);
    std::swap(message_type_, other->message_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DownlinkMessageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DownlinkMessageRequest_descriptor_;
  metadata.reflection = DownlinkMessageRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UplinkGroupMessageRequest::kFromUserIdFieldNumber;
const int UplinkGroupMessageRequest::kGroupIdFieldNumber;
const int UplinkGroupMessageRequest::kMessageFieldNumber;
const int UplinkGroupMessageRequest::kMessageTypeFieldNumber;
const int UplinkGroupMessageRequest::kMessagePriorityFieldNumber;
#endif  // !_MSC_VER

UplinkGroupMessageRequest::UplinkGroupMessageRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_mts.UplinkGroupMessageRequest)
}

void UplinkGroupMessageRequest::InitAsDefaultInstance() {
  group_id_ = const_cast< ::tt_im_group::GroupId*>(&::tt_im_group::GroupId::default_instance());
}

UplinkGroupMessageRequest::UplinkGroupMessageRequest(const UplinkGroupMessageRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_mts.UplinkGroupMessageRequest)
}

void UplinkGroupMessageRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  from_user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = NULL;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_type_ = 0u;
  message_priority_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UplinkGroupMessageRequest::~UplinkGroupMessageRequest() {
  // @@protoc_insertion_point(destructor:tt_mts.UplinkGroupMessageRequest)
  SharedDtor();
}

void UplinkGroupMessageRequest::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
    delete group_id_;
  }
}

void UplinkGroupMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UplinkGroupMessageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UplinkGroupMessageRequest_descriptor_;
}

const UplinkGroupMessageRequest& UplinkGroupMessageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTransferServer_2eproto();
  return *default_instance_;
}

UplinkGroupMessageRequest* UplinkGroupMessageRequest::default_instance_ = NULL;

UplinkGroupMessageRequest* UplinkGroupMessageRequest::New() const {
  return new UplinkGroupMessageRequest;
}

void UplinkGroupMessageRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UplinkGroupMessageRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(message_type_, message_priority_);
    from_user_id_ = GOOGLE_ULONGLONG(0);
    if (has_group_id()) {
      if (group_id_ != NULL) group_id_->::tt_im_group::GroupId::Clear();
    }
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UplinkGroupMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_mts.UplinkGroupMessageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 from_user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_user_id_)));
          set_has_from_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_group_id;
        break;
      }

      // required .tt_im_group.GroupId group_id = 2;
      case 2: {
        if (tag == 18) {
         parse_group_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_message;
        break;
      }

      // required string message = 3;
      case 3: {
        if (tag == 26) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_message_type;
        break;
      }

      // optional uint32 message_type = 4;
      case 4: {
        if (tag == 32) {
         parse_message_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_type_)));
          set_has_message_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_message_priority;
        break;
      }

      // optional uint32 message_priority = 5;
      case 5: {
        if (tag == 40) {
         parse_message_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_priority_)));
          set_has_message_priority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tt_mts.UplinkGroupMessageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_mts.UplinkGroupMessageRequest)
  return false;
#undef DO_
}

void UplinkGroupMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_mts.UplinkGroupMessageRequest)
  // required uint64 from_user_id = 1;
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->from_user_id(), output);
  }

  // required .tt_im_group.GroupId group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->group_id(), output);
  }

  // required string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  // optional uint32 message_type = 4;
  if (has_message_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->message_type(), output);
  }

  // optional uint32 message_priority = 5;
  if (has_message_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->message_priority(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_mts.UplinkGroupMessageRequest)
}

::google::protobuf::uint8* UplinkGroupMessageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_mts.UplinkGroupMessageRequest)
  // required uint64 from_user_id = 1;
  if (has_from_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->from_user_id(), target);
  }

  // required .tt_im_group.GroupId group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->group_id(), target);
  }

  // required string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  // optional uint32 message_type = 4;
  if (has_message_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->message_type(), target);
  }

  // optional uint32 message_priority = 5;
  if (has_message_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->message_priority(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_mts.UplinkGroupMessageRequest)
  return target;
}

int UplinkGroupMessageRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 from_user_id = 1;
    if (has_from_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_user_id());
    }

    // required .tt_im_group.GroupId group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_id());
    }

    // required string message = 3;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional uint32 message_type = 4;
    if (has_message_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_type());
    }

    // optional uint32 message_priority = 5;
    if (has_message_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_priority());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UplinkGroupMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UplinkGroupMessageRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UplinkGroupMessageRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UplinkGroupMessageRequest::MergeFrom(const UplinkGroupMessageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_user_id()) {
      set_from_user_id(from.from_user_id());
    }
    if (from.has_group_id()) {
      mutable_group_id()->::tt_im_group::GroupId::MergeFrom(from.group_id());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_message_type()) {
      set_message_type(from.message_type());
    }
    if (from.has_message_priority()) {
      set_message_priority(from.message_priority());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UplinkGroupMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UplinkGroupMessageRequest::CopyFrom(const UplinkGroupMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UplinkGroupMessageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_group_id()) {
    if (!this->group_id().IsInitialized()) return false;
  }
  return true;
}

void UplinkGroupMessageRequest::Swap(UplinkGroupMessageRequest* other) {
  if (other != this) {
    std::swap(from_user_id_, other->from_user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(message_, other->message_);
    std::swap(message_type_, other->message_type_);
    std::swap(message_priority_, other->message_priority_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UplinkGroupMessageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UplinkGroupMessageRequest_descriptor_;
  metadata.reflection = UplinkGroupMessageRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DownlinkGroupMessageRequest::kFromUserIdFieldNumber;
const int DownlinkGroupMessageRequest::kGroupIdFieldNumber;
const int DownlinkGroupMessageRequest::kMessageFieldNumber;
const int DownlinkGroupMessageRequest::kMessagePtsFieldNumber;
const int DownlinkGroupMessageRequest::kMessageTypeFieldNumber;
const int DownlinkGroupMessageRequest::kMessagePriorityFieldNumber;
#endif  // !_MSC_VER

DownlinkGroupMessageRequest::DownlinkGroupMessageRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_mts.DownlinkGroupMessageRequest)
}

void DownlinkGroupMessageRequest::InitAsDefaultInstance() {
  group_id_ = const_cast< ::tt_im_group::GroupId*>(&::tt_im_group::GroupId::default_instance());
}

DownlinkGroupMessageRequest::DownlinkGroupMessageRequest(const DownlinkGroupMessageRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_mts.DownlinkGroupMessageRequest)
}

void DownlinkGroupMessageRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  from_user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = NULL;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_pts_ = 0u;
  message_type_ = 0u;
  message_priority_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownlinkGroupMessageRequest::~DownlinkGroupMessageRequest() {
  // @@protoc_insertion_point(destructor:tt_mts.DownlinkGroupMessageRequest)
  SharedDtor();
}

void DownlinkGroupMessageRequest::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
    delete group_id_;
  }
}

void DownlinkGroupMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownlinkGroupMessageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownlinkGroupMessageRequest_descriptor_;
}

const DownlinkGroupMessageRequest& DownlinkGroupMessageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTransferServer_2eproto();
  return *default_instance_;
}

DownlinkGroupMessageRequest* DownlinkGroupMessageRequest::default_instance_ = NULL;

DownlinkGroupMessageRequest* DownlinkGroupMessageRequest::New() const {
  return new DownlinkGroupMessageRequest;
}

void DownlinkGroupMessageRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DownlinkGroupMessageRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(message_pts_, message_priority_);
    from_user_id_ = GOOGLE_ULONGLONG(0);
    if (has_group_id()) {
      if (group_id_ != NULL) group_id_->::tt_im_group::GroupId::Clear();
    }
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DownlinkGroupMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_mts.DownlinkGroupMessageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 from_user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_user_id_)));
          set_has_from_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_group_id;
        break;
      }

      // required .tt_im_group.GroupId group_id = 2;
      case 2: {
        if (tag == 18) {
         parse_group_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_message;
        break;
      }

      // required string message = 3;
      case 3: {
        if (tag == 26) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_message_pts;
        break;
      }

      // required uint32 message_pts = 4;
      case 4: {
        if (tag == 32) {
         parse_message_pts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_pts_)));
          set_has_message_pts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_message_type;
        break;
      }

      // optional uint32 message_type = 5;
      case 5: {
        if (tag == 40) {
         parse_message_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_type_)));
          set_has_message_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_message_priority;
        break;
      }

      // optional uint32 message_priority = 6;
      case 6: {
        if (tag == 48) {
         parse_message_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_priority_)));
          set_has_message_priority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tt_mts.DownlinkGroupMessageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_mts.DownlinkGroupMessageRequest)
  return false;
#undef DO_
}

void DownlinkGroupMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_mts.DownlinkGroupMessageRequest)
  // required uint64 from_user_id = 1;
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->from_user_id(), output);
  }

  // required .tt_im_group.GroupId group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->group_id(), output);
  }

  // required string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  // required uint32 message_pts = 4;
  if (has_message_pts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->message_pts(), output);
  }

  // optional uint32 message_type = 5;
  if (has_message_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->message_type(), output);
  }

  // optional uint32 message_priority = 6;
  if (has_message_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->message_priority(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_mts.DownlinkGroupMessageRequest)
}

::google::protobuf::uint8* DownlinkGroupMessageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_mts.DownlinkGroupMessageRequest)
  // required uint64 from_user_id = 1;
  if (has_from_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->from_user_id(), target);
  }

  // required .tt_im_group.GroupId group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->group_id(), target);
  }

  // required string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  // required uint32 message_pts = 4;
  if (has_message_pts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->message_pts(), target);
  }

  // optional uint32 message_type = 5;
  if (has_message_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->message_type(), target);
  }

  // optional uint32 message_priority = 6;
  if (has_message_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->message_priority(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_mts.DownlinkGroupMessageRequest)
  return target;
}

int DownlinkGroupMessageRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 from_user_id = 1;
    if (has_from_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_user_id());
    }

    // required .tt_im_group.GroupId group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_id());
    }

    // required string message = 3;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // required uint32 message_pts = 4;
    if (has_message_pts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_pts());
    }

    // optional uint32 message_type = 5;
    if (has_message_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_type());
    }

    // optional uint32 message_priority = 6;
    if (has_message_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_priority());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownlinkGroupMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DownlinkGroupMessageRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DownlinkGroupMessageRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DownlinkGroupMessageRequest::MergeFrom(const DownlinkGroupMessageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_user_id()) {
      set_from_user_id(from.from_user_id());
    }
    if (from.has_group_id()) {
      mutable_group_id()->::tt_im_group::GroupId::MergeFrom(from.group_id());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_message_pts()) {
      set_message_pts(from.message_pts());
    }
    if (from.has_message_type()) {
      set_message_type(from.message_type());
    }
    if (from.has_message_priority()) {
      set_message_priority(from.message_priority());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DownlinkGroupMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownlinkGroupMessageRequest::CopyFrom(const DownlinkGroupMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownlinkGroupMessageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_group_id()) {
    if (!this->group_id().IsInitialized()) return false;
  }
  return true;
}

void DownlinkGroupMessageRequest::Swap(DownlinkGroupMessageRequest* other) {
  if (other != this) {
    std::swap(from_user_id_, other->from_user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(message_, other->message_);
    std::swap(message_pts_, other->message_pts_);
    std::swap(message_type_, other->message_type_);
    std::swap(message_priority_, other->message_priority_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DownlinkGroupMessageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DownlinkGroupMessageRequest_descriptor_;
  metadata.reflection = DownlinkGroupMessageRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistoryMessageRequest::kUserIdFieldNumber;
const int HistoryMessageRequest::kBeginTimeFieldNumber;
const int HistoryMessageRequest::kTimeLengthFieldNumber;
const int HistoryMessageRequest::kMessageCountFieldNumber;
#endif  // !_MSC_VER

HistoryMessageRequest::HistoryMessageRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_mts.HistoryMessageRequest)
}

void HistoryMessageRequest::InitAsDefaultInstance() {
}

HistoryMessageRequest::HistoryMessageRequest(const HistoryMessageRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_mts.HistoryMessageRequest)
}

void HistoryMessageRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  begin_time_ = 0u;
  time_length_ = 0u;
  message_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryMessageRequest::~HistoryMessageRequest() {
  // @@protoc_insertion_point(destructor:tt_mts.HistoryMessageRequest)
  SharedDtor();
}

void HistoryMessageRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HistoryMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryMessageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryMessageRequest_descriptor_;
}

const HistoryMessageRequest& HistoryMessageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTransferServer_2eproto();
  return *default_instance_;
}

HistoryMessageRequest* HistoryMessageRequest::default_instance_ = NULL;

HistoryMessageRequest* HistoryMessageRequest::New() const {
  return new HistoryMessageRequest;
}

void HistoryMessageRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HistoryMessageRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, message_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoryMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_mts.HistoryMessageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_begin_time;
        break;
      }

      // optional uint32 begin_time = 2;
      case 2: {
        if (tag == 16) {
         parse_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time_length;
        break;
      }

      // optional uint32 time_length = 3;
      case 3: {
        if (tag == 24) {
         parse_time_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_length_)));
          set_has_time_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_message_count;
        break;
      }

      // optional uint32 message_count = 4;
      case 4: {
        if (tag == 32) {
         parse_message_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_count_)));
          set_has_message_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tt_mts.HistoryMessageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_mts.HistoryMessageRequest)
  return false;
#undef DO_
}

void HistoryMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_mts.HistoryMessageRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint32 begin_time = 2;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->begin_time(), output);
  }

  // optional uint32 time_length = 3;
  if (has_time_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_length(), output);
  }

  // optional uint32 message_count = 4;
  if (has_message_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->message_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_mts.HistoryMessageRequest)
}

::google::protobuf::uint8* HistoryMessageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_mts.HistoryMessageRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint32 begin_time = 2;
  if (has_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->begin_time(), target);
  }

  // optional uint32 time_length = 3;
  if (has_time_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_length(), target);
  }

  // optional uint32 message_count = 4;
  if (has_message_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->message_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_mts.HistoryMessageRequest)
  return target;
}

int HistoryMessageRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint32 begin_time = 2;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begin_time());
    }

    // optional uint32 time_length = 3;
    if (has_time_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_length());
    }

    // optional uint32 message_count = 4;
    if (has_message_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoryMessageRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoryMessageRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoryMessageRequest::MergeFrom(const HistoryMessageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
    if (from.has_time_length()) {
      set_time_length(from.time_length());
    }
    if (from.has_message_count()) {
      set_message_count(from.message_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoryMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryMessageRequest::CopyFrom(const HistoryMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryMessageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HistoryMessageRequest::Swap(HistoryMessageRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(begin_time_, other->begin_time_);
    std::swap(time_length_, other->time_length_);
    std::swap(message_count_, other->message_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoryMessageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryMessageRequest_descriptor_;
  metadata.reflection = HistoryMessageRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistoryMessageResponse::kUserIdFieldNumber;
const int HistoryMessageResponse::kMessagesFieldNumber;
const int HistoryMessageResponse::kCurrentTimeFieldNumber;
const int HistoryMessageResponse::kTotalCountFieldNumber;
const int HistoryMessageResponse::kCountFieldNumber;
const int HistoryMessageResponse::kIndexFieldNumber;
#endif  // !_MSC_VER

HistoryMessageResponse::HistoryMessageResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_mts.HistoryMessageResponse)
}

void HistoryMessageResponse::InitAsDefaultInstance() {
}

HistoryMessageResponse::HistoryMessageResponse(const HistoryMessageResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_mts.HistoryMessageResponse)
}

void HistoryMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  current_time_ = 0u;
  total_count_ = 0u;
  count_ = 0u;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryMessageResponse::~HistoryMessageResponse() {
  // @@protoc_insertion_point(destructor:tt_mts.HistoryMessageResponse)
  SharedDtor();
}

void HistoryMessageResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HistoryMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryMessageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryMessageResponse_descriptor_;
}

const HistoryMessageResponse& HistoryMessageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTransferServer_2eproto();
  return *default_instance_;
}

HistoryMessageResponse* HistoryMessageResponse::default_instance_ = NULL;

HistoryMessageResponse* HistoryMessageResponse::New() const {
  return new HistoryMessageResponse;
}

void HistoryMessageResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HistoryMessageResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 61) {
    ZR_(current_time_, index_);
    user_id_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  messages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoryMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_mts.HistoryMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_messages;
        break;
      }

      // repeated .tt_mts.DownlinkMessageRequest messages = 2;
      case 2: {
        if (tag == 18) {
         parse_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_messages;
        if (input->ExpectTag(24)) goto parse_current_time;
        break;
      }

      // optional uint32 current_time = 3;
      case 3: {
        if (tag == 24) {
         parse_current_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_time_)));
          set_has_current_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_total_count;
        break;
      }

      // optional uint32 total_count = 4;
      case 4: {
        if (tag == 32) {
         parse_total_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_count_)));
          set_has_total_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }

      // optional uint32 count = 5;
      case 5: {
        if (tag == 40) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_index;
        break;
      }

      // optional uint32 index = 6;
      case 6: {
        if (tag == 48) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tt_mts.HistoryMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_mts.HistoryMessageResponse)
  return false;
#undef DO_
}

void HistoryMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_mts.HistoryMessageResponse)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // repeated .tt_mts.DownlinkMessageRequest messages = 2;
  for (int i = 0; i < this->messages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->messages(i), output);
  }

  // optional uint32 current_time = 3;
  if (has_current_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->current_time(), output);
  }

  // optional uint32 total_count = 4;
  if (has_total_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->total_count(), output);
  }

  // optional uint32 count = 5;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->count(), output);
  }

  // optional uint32 index = 6;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_mts.HistoryMessageResponse)
}

::google::protobuf::uint8* HistoryMessageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_mts.HistoryMessageResponse)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // repeated .tt_mts.DownlinkMessageRequest messages = 2;
  for (int i = 0; i < this->messages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->messages(i), target);
  }

  // optional uint32 current_time = 3;
  if (has_current_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->current_time(), target);
  }

  // optional uint32 total_count = 4;
  if (has_total_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->total_count(), target);
  }

  // optional uint32 count = 5;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->count(), target);
  }

  // optional uint32 index = 6;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_mts.HistoryMessageResponse)
  return target;
}

int HistoryMessageResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint32 current_time = 3;
    if (has_current_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_time());
    }

    // optional uint32 total_count = 4;
    if (has_total_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_count());
    }

    // optional uint32 count = 5;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 index = 6;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  // repeated .tt_mts.DownlinkMessageRequest messages = 2;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messages(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoryMessageResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoryMessageResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoryMessageResponse::MergeFrom(const HistoryMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  messages_.MergeFrom(from.messages_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_current_time()) {
      set_current_time(from.current_time());
    }
    if (from.has_total_count()) {
      set_total_count(from.total_count());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoryMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryMessageResponse::CopyFrom(const HistoryMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryMessageResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->messages())) return false;
  return true;
}

void HistoryMessageResponse::Swap(HistoryMessageResponse* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    messages_.Swap(&other->messages_);
    std::swap(current_time_, other->current_time_);
    std::swap(total_count_, other->total_count_);
    std::swap(count_, other->count_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoryMessageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryMessageResponse_descriptor_;
  metadata.reflection = HistoryMessageResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistoryMessageCountInfoRequest::kToUserIdFieldNumber;
const int HistoryMessageCountInfoRequest::kFromUserIdsFieldNumber;
const int HistoryMessageCountInfoRequest::kBeginTimeFieldNumber;
const int HistoryMessageCountInfoRequest::kTimeLengthFieldNumber;
const int HistoryMessageCountInfoRequest::kMessageTypesFieldNumber;
#endif  // !_MSC_VER

HistoryMessageCountInfoRequest::HistoryMessageCountInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_mts.HistoryMessageCountInfoRequest)
}

void HistoryMessageCountInfoRequest::InitAsDefaultInstance() {
}

HistoryMessageCountInfoRequest::HistoryMessageCountInfoRequest(const HistoryMessageCountInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_mts.HistoryMessageCountInfoRequest)
}

void HistoryMessageCountInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  to_user_id_ = GOOGLE_ULONGLONG(0);
  begin_time_ = 0u;
  time_length_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryMessageCountInfoRequest::~HistoryMessageCountInfoRequest() {
  // @@protoc_insertion_point(destructor:tt_mts.HistoryMessageCountInfoRequest)
  SharedDtor();
}

void HistoryMessageCountInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HistoryMessageCountInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryMessageCountInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryMessageCountInfoRequest_descriptor_;
}

const HistoryMessageCountInfoRequest& HistoryMessageCountInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTransferServer_2eproto();
  return *default_instance_;
}

HistoryMessageCountInfoRequest* HistoryMessageCountInfoRequest::default_instance_ = NULL;

HistoryMessageCountInfoRequest* HistoryMessageCountInfoRequest::New() const {
  return new HistoryMessageCountInfoRequest;
}

void HistoryMessageCountInfoRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HistoryMessageCountInfoRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 13) {
    ZR_(begin_time_, time_length_);
    to_user_id_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  from_user_ids_.Clear();
  message_types_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoryMessageCountInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_mts.HistoryMessageCountInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 to_user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_user_id_)));
          set_has_to_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_from_user_ids;
        break;
      }

      // repeated uint64 from_user_ids = 2;
      case 2: {
        if (tag == 16) {
         parse_from_user_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_from_user_ids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_from_user_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_from_user_ids;
        if (input->ExpectTag(24)) goto parse_begin_time;
        break;
      }

      // optional uint32 begin_time = 3;
      case 3: {
        if (tag == 24) {
         parse_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time_length;
        break;
      }

      // optional uint32 time_length = 4;
      case 4: {
        if (tag == 32) {
         parse_time_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_length_)));
          set_has_time_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_message_types;
        break;
      }

      // repeated uint32 message_types = 5;
      case 5: {
        if (tag == 40) {
         parse_message_types:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_message_types())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_message_types())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_message_types;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tt_mts.HistoryMessageCountInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_mts.HistoryMessageCountInfoRequest)
  return false;
#undef DO_
}

void HistoryMessageCountInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_mts.HistoryMessageCountInfoRequest)
  // required uint64 to_user_id = 1;
  if (has_to_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->to_user_id(), output);
  }

  // repeated uint64 from_user_ids = 2;
  for (int i = 0; i < this->from_user_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->from_user_ids(i), output);
  }

  // optional uint32 begin_time = 3;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->begin_time(), output);
  }

  // optional uint32 time_length = 4;
  if (has_time_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time_length(), output);
  }

  // repeated uint32 message_types = 5;
  for (int i = 0; i < this->message_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->message_types(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_mts.HistoryMessageCountInfoRequest)
}

::google::protobuf::uint8* HistoryMessageCountInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_mts.HistoryMessageCountInfoRequest)
  // required uint64 to_user_id = 1;
  if (has_to_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->to_user_id(), target);
  }

  // repeated uint64 from_user_ids = 2;
  for (int i = 0; i < this->from_user_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->from_user_ids(i), target);
  }

  // optional uint32 begin_time = 3;
  if (has_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->begin_time(), target);
  }

  // optional uint32 time_length = 4;
  if (has_time_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time_length(), target);
  }

  // repeated uint32 message_types = 5;
  for (int i = 0; i < this->message_types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->message_types(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_mts.HistoryMessageCountInfoRequest)
  return target;
}

int HistoryMessageCountInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 to_user_id = 1;
    if (has_to_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_user_id());
    }

    // optional uint32 begin_time = 3;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begin_time());
    }

    // optional uint32 time_length = 4;
    if (has_time_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_length());
    }

  }
  // repeated uint64 from_user_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->from_user_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->from_user_ids(i));
    }
    total_size += 1 * this->from_user_ids_size() + data_size;
  }

  // repeated uint32 message_types = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->message_types_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->message_types(i));
    }
    total_size += 1 * this->message_types_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryMessageCountInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoryMessageCountInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoryMessageCountInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoryMessageCountInfoRequest::MergeFrom(const HistoryMessageCountInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  from_user_ids_.MergeFrom(from.from_user_ids_);
  message_types_.MergeFrom(from.message_types_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_to_user_id()) {
      set_to_user_id(from.to_user_id());
    }
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
    if (from.has_time_length()) {
      set_time_length(from.time_length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoryMessageCountInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryMessageCountInfoRequest::CopyFrom(const HistoryMessageCountInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryMessageCountInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HistoryMessageCountInfoRequest::Swap(HistoryMessageCountInfoRequest* other) {
  if (other != this) {
    std::swap(to_user_id_, other->to_user_id_);
    from_user_ids_.Swap(&other->from_user_ids_);
    std::swap(begin_time_, other->begin_time_);
    std::swap(time_length_, other->time_length_);
    message_types_.Swap(&other->message_types_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoryMessageCountInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryMessageCountInfoRequest_descriptor_;
  metadata.reflection = HistoryMessageCountInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo::kMessageTypeFieldNumber;
const int HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo::kCountFieldNumber;
#endif  // !_MSC_VER

HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo::HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_mts.HistoryMessageCountInfoResponse.HistoryMessageType2CountInfo)
}

void HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo::InitAsDefaultInstance() {
}

HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo::HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo(const HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_mts.HistoryMessageCountInfoResponse.HistoryMessageType2CountInfo)
}

void HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo::SharedCtor() {
  _cached_size_ = 0;
  message_type_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo::~HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo() {
  // @@protoc_insertion_point(destructor:tt_mts.HistoryMessageCountInfoResponse.HistoryMessageType2CountInfo)
  SharedDtor();
}

void HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo_descriptor_;
}

const HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo& HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTransferServer_2eproto();
  return *default_instance_;
}

HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo* HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo::default_instance_ = NULL;

HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo* HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo::New() const {
  return new HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo;
}

void HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(message_type_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_mts.HistoryMessageCountInfoResponse.HistoryMessageType2CountInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 message_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_type_)));
          set_has_message_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tt_mts.HistoryMessageCountInfoResponse.HistoryMessageType2CountInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_mts.HistoryMessageCountInfoResponse.HistoryMessageType2CountInfo)
  return false;
#undef DO_
}

void HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_mts.HistoryMessageCountInfoResponse.HistoryMessageType2CountInfo)
  // required uint32 message_type = 1;
  if (has_message_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->message_type(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_mts.HistoryMessageCountInfoResponse.HistoryMessageType2CountInfo)
}

::google::protobuf::uint8* HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_mts.HistoryMessageCountInfoResponse.HistoryMessageType2CountInfo)
  // required uint32 message_type = 1;
  if (has_message_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->message_type(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_mts.HistoryMessageCountInfoResponse.HistoryMessageType2CountInfo)
  return target;
}

int HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 message_type = 1;
    if (has_message_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_type());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo::MergeFrom(const HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_type()) {
      set_message_type(from.message_type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo::CopyFrom(const HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo::Swap(HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo* other) {
  if (other != this) {
    std::swap(message_type_, other->message_type_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo_descriptor_;
  metadata.reflection = HistoryMessageCountInfoResponse_HistoryMessageType2CountInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo::kFromUserIdFieldNumber;
const int HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo::kCountinfosFieldNumber;
#endif  // !_MSC_VER

HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo::HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_mts.HistoryMessageCountInfoResponse.HistoryMessageUser2CountInfo)
}

void HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo::InitAsDefaultInstance() {
}

HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo::HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo(const HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_mts.HistoryMessageCountInfoResponse.HistoryMessageUser2CountInfo)
}

void HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo::SharedCtor() {
  _cached_size_ = 0;
  from_user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo::~HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo() {
  // @@protoc_insertion_point(destructor:tt_mts.HistoryMessageCountInfoResponse.HistoryMessageUser2CountInfo)
  SharedDtor();
}

void HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo_descriptor_;
}

const HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo& HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTransferServer_2eproto();
  return *default_instance_;
}

HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo* HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo::default_instance_ = NULL;

HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo* HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo::New() const {
  return new HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo;
}

void HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo::Clear() {
  from_user_id_ = GOOGLE_ULONGLONG(0);
  countinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_mts.HistoryMessageCountInfoResponse.HistoryMessageUser2CountInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 from_user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_user_id_)));
          set_has_from_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_countinfos;
        break;
      }

      // repeated .tt_mts.HistoryMessageCountInfoResponse.HistoryMessageType2CountInfo countinfos = 2;
      case 2: {
        if (tag == 18) {
         parse_countinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_countinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_countinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tt_mts.HistoryMessageCountInfoResponse.HistoryMessageUser2CountInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_mts.HistoryMessageCountInfoResponse.HistoryMessageUser2CountInfo)
  return false;
#undef DO_
}

void HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_mts.HistoryMessageCountInfoResponse.HistoryMessageUser2CountInfo)
  // required uint64 from_user_id = 1;
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->from_user_id(), output);
  }

  // repeated .tt_mts.HistoryMessageCountInfoResponse.HistoryMessageType2CountInfo countinfos = 2;
  for (int i = 0; i < this->countinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->countinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_mts.HistoryMessageCountInfoResponse.HistoryMessageUser2CountInfo)
}

::google::protobuf::uint8* HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_mts.HistoryMessageCountInfoResponse.HistoryMessageUser2CountInfo)
  // required uint64 from_user_id = 1;
  if (has_from_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->from_user_id(), target);
  }

  // repeated .tt_mts.HistoryMessageCountInfoResponse.HistoryMessageType2CountInfo countinfos = 2;
  for (int i = 0; i < this->countinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->countinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_mts.HistoryMessageCountInfoResponse.HistoryMessageUser2CountInfo)
  return target;
}

int HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 from_user_id = 1;
    if (has_from_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_user_id());
    }

  }
  // repeated .tt_mts.HistoryMessageCountInfoResponse.HistoryMessageType2CountInfo countinfos = 2;
  total_size += 1 * this->countinfos_size();
  for (int i = 0; i < this->countinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->countinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo::MergeFrom(const HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  countinfos_.MergeFrom(from.countinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_user_id()) {
      set_from_user_id(from.from_user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo::CopyFrom(const HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->countinfos())) return false;
  return true;
}

void HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo::Swap(HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo* other) {
  if (other != this) {
    std::swap(from_user_id_, other->from_user_id_);
    countinfos_.Swap(&other->countinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo_descriptor_;
  metadata.reflection = HistoryMessageCountInfoResponse_HistoryMessageUser2CountInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int HistoryMessageCountInfoResponse::kToUserIdFieldNumber;
const int HistoryMessageCountInfoResponse::kBeginTimeFieldNumber;
const int HistoryMessageCountInfoResponse::kTimeLengthFieldNumber;
const int HistoryMessageCountInfoResponse::kMessageTypesFieldNumber;
const int HistoryMessageCountInfoResponse::kMessageCountInfosFieldNumber;
#endif  // !_MSC_VER

HistoryMessageCountInfoResponse::HistoryMessageCountInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_mts.HistoryMessageCountInfoResponse)
}

void HistoryMessageCountInfoResponse::InitAsDefaultInstance() {
}

HistoryMessageCountInfoResponse::HistoryMessageCountInfoResponse(const HistoryMessageCountInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_mts.HistoryMessageCountInfoResponse)
}

void HistoryMessageCountInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  to_user_id_ = GOOGLE_ULONGLONG(0);
  begin_time_ = 0u;
  time_length_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryMessageCountInfoResponse::~HistoryMessageCountInfoResponse() {
  // @@protoc_insertion_point(destructor:tt_mts.HistoryMessageCountInfoResponse)
  SharedDtor();
}

void HistoryMessageCountInfoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HistoryMessageCountInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryMessageCountInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryMessageCountInfoResponse_descriptor_;
}

const HistoryMessageCountInfoResponse& HistoryMessageCountInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTransferServer_2eproto();
  return *default_instance_;
}

HistoryMessageCountInfoResponse* HistoryMessageCountInfoResponse::default_instance_ = NULL;

HistoryMessageCountInfoResponse* HistoryMessageCountInfoResponse::New() const {
  return new HistoryMessageCountInfoResponse;
}

void HistoryMessageCountInfoResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HistoryMessageCountInfoResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(to_user_id_, time_length_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  message_types_.Clear();
  message_count_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoryMessageCountInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_mts.HistoryMessageCountInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 to_user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_user_id_)));
          set_has_to_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_begin_time;
        break;
      }

      // optional uint32 begin_time = 2;
      case 2: {
        if (tag == 16) {
         parse_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time_length;
        break;
      }

      // optional uint32 time_length = 3;
      case 3: {
        if (tag == 24) {
         parse_time_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_length_)));
          set_has_time_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_message_types;
        break;
      }

      // repeated uint32 message_types = 4;
      case 4: {
        if (tag == 32) {
         parse_message_types:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_message_types())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_message_types())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_message_types;
        if (input->ExpectTag(42)) goto parse_message_count_infos;
        break;
      }

      // repeated .tt_mts.HistoryMessageCountInfoResponse.HistoryMessageUser2CountInfo message_count_infos = 5;
      case 5: {
        if (tag == 42) {
         parse_message_count_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_message_count_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_message_count_infos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tt_mts.HistoryMessageCountInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_mts.HistoryMessageCountInfoResponse)
  return false;
#undef DO_
}

void HistoryMessageCountInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_mts.HistoryMessageCountInfoResponse)
  // required uint64 to_user_id = 1;
  if (has_to_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->to_user_id(), output);
  }

  // optional uint32 begin_time = 2;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->begin_time(), output);
  }

  // optional uint32 time_length = 3;
  if (has_time_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_length(), output);
  }

  // repeated uint32 message_types = 4;
  for (int i = 0; i < this->message_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->message_types(i), output);
  }

  // repeated .tt_mts.HistoryMessageCountInfoResponse.HistoryMessageUser2CountInfo message_count_infos = 5;
  for (int i = 0; i < this->message_count_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->message_count_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_mts.HistoryMessageCountInfoResponse)
}

::google::protobuf::uint8* HistoryMessageCountInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_mts.HistoryMessageCountInfoResponse)
  // required uint64 to_user_id = 1;
  if (has_to_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->to_user_id(), target);
  }

  // optional uint32 begin_time = 2;
  if (has_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->begin_time(), target);
  }

  // optional uint32 time_length = 3;
  if (has_time_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_length(), target);
  }

  // repeated uint32 message_types = 4;
  for (int i = 0; i < this->message_types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->message_types(i), target);
  }

  // repeated .tt_mts.HistoryMessageCountInfoResponse.HistoryMessageUser2CountInfo message_count_infos = 5;
  for (int i = 0; i < this->message_count_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->message_count_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_mts.HistoryMessageCountInfoResponse)
  return target;
}

int HistoryMessageCountInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 to_user_id = 1;
    if (has_to_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_user_id());
    }

    // optional uint32 begin_time = 2;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begin_time());
    }

    // optional uint32 time_length = 3;
    if (has_time_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_length());
    }

  }
  // repeated uint32 message_types = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->message_types_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->message_types(i));
    }
    total_size += 1 * this->message_types_size() + data_size;
  }

  // repeated .tt_mts.HistoryMessageCountInfoResponse.HistoryMessageUser2CountInfo message_count_infos = 5;
  total_size += 1 * this->message_count_infos_size();
  for (int i = 0; i < this->message_count_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->message_count_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryMessageCountInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoryMessageCountInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoryMessageCountInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoryMessageCountInfoResponse::MergeFrom(const HistoryMessageCountInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  message_types_.MergeFrom(from.message_types_);
  message_count_infos_.MergeFrom(from.message_count_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_to_user_id()) {
      set_to_user_id(from.to_user_id());
    }
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
    if (from.has_time_length()) {
      set_time_length(from.time_length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoryMessageCountInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryMessageCountInfoResponse::CopyFrom(const HistoryMessageCountInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryMessageCountInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->message_count_infos())) return false;
  return true;
}

void HistoryMessageCountInfoResponse::Swap(HistoryMessageCountInfoResponse* other) {
  if (other != this) {
    std::swap(to_user_id_, other->to_user_id_);
    std::swap(begin_time_, other->begin_time_);
    std::swap(time_length_, other->time_length_);
    message_types_.Swap(&other->message_types_);
    message_count_infos_.Swap(&other->message_count_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoryMessageCountInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryMessageCountInfoResponse_descriptor_;
  metadata.reflection = HistoryMessageCountInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistoryMessageFromUserRequest::kToUserIdFieldNumber;
const int HistoryMessageFromUserRequest::kFromUserIdFieldNumber;
const int HistoryMessageFromUserRequest::kBeginTimeFieldNumber;
const int HistoryMessageFromUserRequest::kTimeLengthFieldNumber;
const int HistoryMessageFromUserRequest::kMessageTypesFieldNumber;
const int HistoryMessageFromUserRequest::kIsEquealMessageTypesFieldNumber;
const int HistoryMessageFromUserRequest::kMessageCountFieldNumber;
#endif  // !_MSC_VER

HistoryMessageFromUserRequest::HistoryMessageFromUserRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_mts.HistoryMessageFromUserRequest)
}

void HistoryMessageFromUserRequest::InitAsDefaultInstance() {
}

HistoryMessageFromUserRequest::HistoryMessageFromUserRequest(const HistoryMessageFromUserRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_mts.HistoryMessageFromUserRequest)
}

void HistoryMessageFromUserRequest::SharedCtor() {
  _cached_size_ = 0;
  to_user_id_ = GOOGLE_ULONGLONG(0);
  from_user_id_ = GOOGLE_ULONGLONG(9223372036854775792);
  begin_time_ = 0u;
  time_length_ = 0u;
  is_equeal_message_types_ = false;
  message_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryMessageFromUserRequest::~HistoryMessageFromUserRequest() {
  // @@protoc_insertion_point(destructor:tt_mts.HistoryMessageFromUserRequest)
  SharedDtor();
}

void HistoryMessageFromUserRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HistoryMessageFromUserRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryMessageFromUserRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryMessageFromUserRequest_descriptor_;
}

const HistoryMessageFromUserRequest& HistoryMessageFromUserRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTransferServer_2eproto();
  return *default_instance_;
}

HistoryMessageFromUserRequest* HistoryMessageFromUserRequest::default_instance_ = NULL;

HistoryMessageFromUserRequest* HistoryMessageFromUserRequest::New() const {
  return new HistoryMessageFromUserRequest;
}

void HistoryMessageFromUserRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HistoryMessageFromUserRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 111) {
    ZR_(begin_time_, time_length_);
    ZR_(is_equeal_message_types_, message_count_);
    to_user_id_ = GOOGLE_ULONGLONG(0);
    from_user_id_ = GOOGLE_ULONGLONG(9223372036854775792);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  message_types_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoryMessageFromUserRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_mts.HistoryMessageFromUserRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 to_user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_user_id_)));
          set_has_to_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_from_user_id;
        break;
      }

      // optional uint64 from_user_id = 2 [default = 9223372036854775792];
      case 2: {
        if (tag == 16) {
         parse_from_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_user_id_)));
          set_has_from_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_begin_time;
        break;
      }

      // optional uint32 begin_time = 3;
      case 3: {
        if (tag == 24) {
         parse_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time_length;
        break;
      }

      // optional uint32 time_length = 4;
      case 4: {
        if (tag == 32) {
         parse_time_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_length_)));
          set_has_time_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_message_types;
        break;
      }

      // repeated uint32 message_types = 5;
      case 5: {
        if (tag == 40) {
         parse_message_types:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_message_types())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_message_types())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_message_types;
        if (input->ExpectTag(48)) goto parse_is_equeal_message_types;
        break;
      }

      // optional bool is_equeal_message_types = 6;
      case 6: {
        if (tag == 48) {
         parse_is_equeal_message_types:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_equeal_message_types_)));
          set_has_is_equeal_message_types();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_message_count;
        break;
      }

      // optional uint32 message_count = 7;
      case 7: {
        if (tag == 56) {
         parse_message_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_count_)));
          set_has_message_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tt_mts.HistoryMessageFromUserRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_mts.HistoryMessageFromUserRequest)
  return false;
#undef DO_
}

void HistoryMessageFromUserRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_mts.HistoryMessageFromUserRequest)
  // required uint64 to_user_id = 1;
  if (has_to_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->to_user_id(), output);
  }

  // optional uint64 from_user_id = 2 [default = 9223372036854775792];
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->from_user_id(), output);
  }

  // optional uint32 begin_time = 3;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->begin_time(), output);
  }

  // optional uint32 time_length = 4;
  if (has_time_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time_length(), output);
  }

  // repeated uint32 message_types = 5;
  for (int i = 0; i < this->message_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->message_types(i), output);
  }

  // optional bool is_equeal_message_types = 6;
  if (has_is_equeal_message_types()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_equeal_message_types(), output);
  }

  // optional uint32 message_count = 7;
  if (has_message_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->message_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_mts.HistoryMessageFromUserRequest)
}

::google::protobuf::uint8* HistoryMessageFromUserRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_mts.HistoryMessageFromUserRequest)
  // required uint64 to_user_id = 1;
  if (has_to_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->to_user_id(), target);
  }

  // optional uint64 from_user_id = 2 [default = 9223372036854775792];
  if (has_from_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->from_user_id(), target);
  }

  // optional uint32 begin_time = 3;
  if (has_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->begin_time(), target);
  }

  // optional uint32 time_length = 4;
  if (has_time_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time_length(), target);
  }

  // repeated uint32 message_types = 5;
  for (int i = 0; i < this->message_types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->message_types(i), target);
  }

  // optional bool is_equeal_message_types = 6;
  if (has_is_equeal_message_types()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_equeal_message_types(), target);
  }

  // optional uint32 message_count = 7;
  if (has_message_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->message_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_mts.HistoryMessageFromUserRequest)
  return target;
}

int HistoryMessageFromUserRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 to_user_id = 1;
    if (has_to_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_user_id());
    }

    // optional uint64 from_user_id = 2 [default = 9223372036854775792];
    if (has_from_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_user_id());
    }

    // optional uint32 begin_time = 3;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begin_time());
    }

    // optional uint32 time_length = 4;
    if (has_time_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_length());
    }

    // optional bool is_equeal_message_types = 6;
    if (has_is_equeal_message_types()) {
      total_size += 1 + 1;
    }

    // optional uint32 message_count = 7;
    if (has_message_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_count());
    }

  }
  // repeated uint32 message_types = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->message_types_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->message_types(i));
    }
    total_size += 1 * this->message_types_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryMessageFromUserRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoryMessageFromUserRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoryMessageFromUserRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoryMessageFromUserRequest::MergeFrom(const HistoryMessageFromUserRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  message_types_.MergeFrom(from.message_types_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_to_user_id()) {
      set_to_user_id(from.to_user_id());
    }
    if (from.has_from_user_id()) {
      set_from_user_id(from.from_user_id());
    }
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
    if (from.has_time_length()) {
      set_time_length(from.time_length());
    }
    if (from.has_is_equeal_message_types()) {
      set_is_equeal_message_types(from.is_equeal_message_types());
    }
    if (from.has_message_count()) {
      set_message_count(from.message_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoryMessageFromUserRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryMessageFromUserRequest::CopyFrom(const HistoryMessageFromUserRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryMessageFromUserRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HistoryMessageFromUserRequest::Swap(HistoryMessageFromUserRequest* other) {
  if (other != this) {
    std::swap(to_user_id_, other->to_user_id_);
    std::swap(from_user_id_, other->from_user_id_);
    std::swap(begin_time_, other->begin_time_);
    std::swap(time_length_, other->time_length_);
    message_types_.Swap(&other->message_types_);
    std::swap(is_equeal_message_types_, other->is_equeal_message_types_);
    std::swap(message_count_, other->message_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoryMessageFromUserRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryMessageFromUserRequest_descriptor_;
  metadata.reflection = HistoryMessageFromUserRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistoryMessageFromUserResponse::kToUserIdFieldNumber;
const int HistoryMessageFromUserResponse::kFromUserIdFieldNumber;
const int HistoryMessageFromUserResponse::kMessageTypesFieldNumber;
const int HistoryMessageFromUserResponse::kIsEquealMessageTypesFieldNumber;
const int HistoryMessageFromUserResponse::kMessagesFieldNumber;
const int HistoryMessageFromUserResponse::kCurrentTimeFieldNumber;
const int HistoryMessageFromUserResponse::kTotalCountFieldNumber;
const int HistoryMessageFromUserResponse::kCountFieldNumber;
const int HistoryMessageFromUserResponse::kIndexFieldNumber;
#endif  // !_MSC_VER

HistoryMessageFromUserResponse::HistoryMessageFromUserResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_mts.HistoryMessageFromUserResponse)
}

void HistoryMessageFromUserResponse::InitAsDefaultInstance() {
}

HistoryMessageFromUserResponse::HistoryMessageFromUserResponse(const HistoryMessageFromUserResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_mts.HistoryMessageFromUserResponse)
}

void HistoryMessageFromUserResponse::SharedCtor() {
  _cached_size_ = 0;
  to_user_id_ = GOOGLE_ULONGLONG(0);
  from_user_id_ = GOOGLE_ULONGLONG(0);
  is_equeal_message_types_ = false;
  current_time_ = 0u;
  total_count_ = 0u;
  count_ = 0u;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryMessageFromUserResponse::~HistoryMessageFromUserResponse() {
  // @@protoc_insertion_point(destructor:tt_mts.HistoryMessageFromUserResponse)
  SharedDtor();
}

void HistoryMessageFromUserResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HistoryMessageFromUserResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryMessageFromUserResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryMessageFromUserResponse_descriptor_;
}

const HistoryMessageFromUserResponse& HistoryMessageFromUserResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTransferServer_2eproto();
  return *default_instance_;
}

HistoryMessageFromUserResponse* HistoryMessageFromUserResponse::default_instance_ = NULL;

HistoryMessageFromUserResponse* HistoryMessageFromUserResponse::New() const {
  return new HistoryMessageFromUserResponse;
}

void HistoryMessageFromUserResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HistoryMessageFromUserResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 235) {
    ZR_(to_user_id_, from_user_id_);
    ZR_(is_equeal_message_types_, count_);
  }
  index_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  message_types_.Clear();
  messages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoryMessageFromUserResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_mts.HistoryMessageFromUserResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 to_user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_user_id_)));
          set_has_to_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_from_user_id;
        break;
      }

      // optional uint64 from_user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_from_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_user_id_)));
          set_has_from_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_message_types;
        break;
      }

      // repeated uint32 message_types = 3;
      case 3: {
        if (tag == 24) {
         parse_message_types:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_message_types())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_message_types())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_message_types;
        if (input->ExpectTag(32)) goto parse_is_equeal_message_types;
        break;
      }

      // optional bool is_equeal_message_types = 4;
      case 4: {
        if (tag == 32) {
         parse_is_equeal_message_types:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_equeal_message_types_)));
          set_has_is_equeal_message_types();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_messages;
        break;
      }

      // repeated .tt_mts.DownlinkMessageRequest messages = 5;
      case 5: {
        if (tag == 42) {
         parse_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_messages;
        if (input->ExpectTag(48)) goto parse_current_time;
        break;
      }

      // optional uint32 current_time = 6;
      case 6: {
        if (tag == 48) {
         parse_current_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_time_)));
          set_has_current_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_total_count;
        break;
      }

      // optional uint32 total_count = 7;
      case 7: {
        if (tag == 56) {
         parse_total_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_count_)));
          set_has_total_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_count;
        break;
      }

      // optional uint32 count = 8;
      case 8: {
        if (tag == 64) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_index;
        break;
      }

      // optional uint32 index = 9;
      case 9: {
        if (tag == 72) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tt_mts.HistoryMessageFromUserResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_mts.HistoryMessageFromUserResponse)
  return false;
#undef DO_
}

void HistoryMessageFromUserResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_mts.HistoryMessageFromUserResponse)
  // required uint64 to_user_id = 1;
  if (has_to_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->to_user_id(), output);
  }

  // optional uint64 from_user_id = 2;
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->from_user_id(), output);
  }

  // repeated uint32 message_types = 3;
  for (int i = 0; i < this->message_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->message_types(i), output);
  }

  // optional bool is_equeal_message_types = 4;
  if (has_is_equeal_message_types()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_equeal_message_types(), output);
  }

  // repeated .tt_mts.DownlinkMessageRequest messages = 5;
  for (int i = 0; i < this->messages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->messages(i), output);
  }

  // optional uint32 current_time = 6;
  if (has_current_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->current_time(), output);
  }

  // optional uint32 total_count = 7;
  if (has_total_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->total_count(), output);
  }

  // optional uint32 count = 8;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->count(), output);
  }

  // optional uint32 index = 9;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_mts.HistoryMessageFromUserResponse)
}

::google::protobuf::uint8* HistoryMessageFromUserResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_mts.HistoryMessageFromUserResponse)
  // required uint64 to_user_id = 1;
  if (has_to_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->to_user_id(), target);
  }

  // optional uint64 from_user_id = 2;
  if (has_from_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->from_user_id(), target);
  }

  // repeated uint32 message_types = 3;
  for (int i = 0; i < this->message_types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->message_types(i), target);
  }

  // optional bool is_equeal_message_types = 4;
  if (has_is_equeal_message_types()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_equeal_message_types(), target);
  }

  // repeated .tt_mts.DownlinkMessageRequest messages = 5;
  for (int i = 0; i < this->messages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->messages(i), target);
  }

  // optional uint32 current_time = 6;
  if (has_current_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->current_time(), target);
  }

  // optional uint32 total_count = 7;
  if (has_total_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->total_count(), target);
  }

  // optional uint32 count = 8;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->count(), target);
  }

  // optional uint32 index = 9;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_mts.HistoryMessageFromUserResponse)
  return target;
}

int HistoryMessageFromUserResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 to_user_id = 1;
    if (has_to_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_user_id());
    }

    // optional uint64 from_user_id = 2;
    if (has_from_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_user_id());
    }

    // optional bool is_equeal_message_types = 4;
    if (has_is_equeal_message_types()) {
      total_size += 1 + 1;
    }

    // optional uint32 current_time = 6;
    if (has_current_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_time());
    }

    // optional uint32 total_count = 7;
    if (has_total_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_count());
    }

    // optional uint32 count = 8;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 index = 9;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  // repeated uint32 message_types = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->message_types_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->message_types(i));
    }
    total_size += 1 * this->message_types_size() + data_size;
  }

  // repeated .tt_mts.DownlinkMessageRequest messages = 5;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messages(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryMessageFromUserResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoryMessageFromUserResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoryMessageFromUserResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoryMessageFromUserResponse::MergeFrom(const HistoryMessageFromUserResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  message_types_.MergeFrom(from.message_types_);
  messages_.MergeFrom(from.messages_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_to_user_id()) {
      set_to_user_id(from.to_user_id());
    }
    if (from.has_from_user_id()) {
      set_from_user_id(from.from_user_id());
    }
    if (from.has_is_equeal_message_types()) {
      set_is_equeal_message_types(from.is_equeal_message_types());
    }
    if (from.has_current_time()) {
      set_current_time(from.current_time());
    }
    if (from.has_total_count()) {
      set_total_count(from.total_count());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoryMessageFromUserResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryMessageFromUserResponse::CopyFrom(const HistoryMessageFromUserResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryMessageFromUserResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->messages())) return false;
  return true;
}

void HistoryMessageFromUserResponse::Swap(HistoryMessageFromUserResponse* other) {
  if (other != this) {
    std::swap(to_user_id_, other->to_user_id_);
    std::swap(from_user_id_, other->from_user_id_);
    message_types_.Swap(&other->message_types_);
    std::swap(is_equeal_message_types_, other->is_equeal_message_types_);
    messages_.Swap(&other->messages_);
    std::swap(current_time_, other->current_time_);
    std::swap(total_count_, other->total_count_);
    std::swap(count_, other->count_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoryMessageFromUserResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryMessageFromUserResponse_descriptor_;
  metadata.reflection = HistoryMessageFromUserResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistoryGroupMessageRequest::kGroupIdFieldNumber;
const int HistoryGroupMessageRequest::kBeginTimeFieldNumber;
const int HistoryGroupMessageRequest::kTimeLengthFieldNumber;
const int HistoryGroupMessageRequest::kMessageCountFieldNumber;
#endif  // !_MSC_VER

HistoryGroupMessageRequest::HistoryGroupMessageRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_mts.HistoryGroupMessageRequest)
}

void HistoryGroupMessageRequest::InitAsDefaultInstance() {
  group_id_ = const_cast< ::tt_im_group::GroupId*>(&::tt_im_group::GroupId::default_instance());
}

HistoryGroupMessageRequest::HistoryGroupMessageRequest(const HistoryGroupMessageRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_mts.HistoryGroupMessageRequest)
}

void HistoryGroupMessageRequest::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = NULL;
  begin_time_ = 0u;
  time_length_ = 0u;
  message_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryGroupMessageRequest::~HistoryGroupMessageRequest() {
  // @@protoc_insertion_point(destructor:tt_mts.HistoryGroupMessageRequest)
  SharedDtor();
}

void HistoryGroupMessageRequest::SharedDtor() {
  if (this != default_instance_) {
    delete group_id_;
  }
}

void HistoryGroupMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryGroupMessageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryGroupMessageRequest_descriptor_;
}

const HistoryGroupMessageRequest& HistoryGroupMessageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTransferServer_2eproto();
  return *default_instance_;
}

HistoryGroupMessageRequest* HistoryGroupMessageRequest::default_instance_ = NULL;

HistoryGroupMessageRequest* HistoryGroupMessageRequest::New() const {
  return new HistoryGroupMessageRequest;
}

void HistoryGroupMessageRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HistoryGroupMessageRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(begin_time_, message_count_);
    if (has_group_id()) {
      if (group_id_ != NULL) group_id_->::tt_im_group::GroupId::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoryGroupMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_mts.HistoryGroupMessageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .tt_im_group.GroupId group_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_begin_time;
        break;
      }

      // optional uint32 begin_time = 2;
      case 2: {
        if (tag == 16) {
         parse_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time_length;
        break;
      }

      // optional uint32 time_length = 3;
      case 3: {
        if (tag == 24) {
         parse_time_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_length_)));
          set_has_time_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_message_count;
        break;
      }

      // optional uint32 message_count = 4;
      case 4: {
        if (tag == 32) {
         parse_message_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_count_)));
          set_has_message_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tt_mts.HistoryGroupMessageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_mts.HistoryGroupMessageRequest)
  return false;
#undef DO_
}

void HistoryGroupMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_mts.HistoryGroupMessageRequest)
  // required .tt_im_group.GroupId group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group_id(), output);
  }

  // optional uint32 begin_time = 2;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->begin_time(), output);
  }

  // optional uint32 time_length = 3;
  if (has_time_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_length(), output);
  }

  // optional uint32 message_count = 4;
  if (has_message_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->message_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_mts.HistoryGroupMessageRequest)
}

::google::protobuf::uint8* HistoryGroupMessageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_mts.HistoryGroupMessageRequest)
  // required .tt_im_group.GroupId group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->group_id(), target);
  }

  // optional uint32 begin_time = 2;
  if (has_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->begin_time(), target);
  }

  // optional uint32 time_length = 3;
  if (has_time_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_length(), target);
  }

  // optional uint32 message_count = 4;
  if (has_message_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->message_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_mts.HistoryGroupMessageRequest)
  return target;
}

int HistoryGroupMessageRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .tt_im_group.GroupId group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_id());
    }

    // optional uint32 begin_time = 2;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begin_time());
    }

    // optional uint32 time_length = 3;
    if (has_time_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_length());
    }

    // optional uint32 message_count = 4;
    if (has_message_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryGroupMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoryGroupMessageRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoryGroupMessageRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoryGroupMessageRequest::MergeFrom(const HistoryGroupMessageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      mutable_group_id()->::tt_im_group::GroupId::MergeFrom(from.group_id());
    }
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
    if (from.has_time_length()) {
      set_time_length(from.time_length());
    }
    if (from.has_message_count()) {
      set_message_count(from.message_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoryGroupMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryGroupMessageRequest::CopyFrom(const HistoryGroupMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryGroupMessageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_group_id()) {
    if (!this->group_id().IsInitialized()) return false;
  }
  return true;
}

void HistoryGroupMessageRequest::Swap(HistoryGroupMessageRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(begin_time_, other->begin_time_);
    std::swap(time_length_, other->time_length_);
    std::swap(message_count_, other->message_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoryGroupMessageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryGroupMessageRequest_descriptor_;
  metadata.reflection = HistoryGroupMessageRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistoryGroupMessageResponse::kGroupIdFieldNumber;
const int HistoryGroupMessageResponse::kMessagesFieldNumber;
const int HistoryGroupMessageResponse::kCurrentTimeFieldNumber;
const int HistoryGroupMessageResponse::kTotalCountFieldNumber;
const int HistoryGroupMessageResponse::kCountFieldNumber;
const int HistoryGroupMessageResponse::kIndexFieldNumber;
#endif  // !_MSC_VER

HistoryGroupMessageResponse::HistoryGroupMessageResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_mts.HistoryGroupMessageResponse)
}

void HistoryGroupMessageResponse::InitAsDefaultInstance() {
  group_id_ = const_cast< ::tt_im_group::GroupId*>(&::tt_im_group::GroupId::default_instance());
}

HistoryGroupMessageResponse::HistoryGroupMessageResponse(const HistoryGroupMessageResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_mts.HistoryGroupMessageResponse)
}

void HistoryGroupMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = NULL;
  current_time_ = 0u;
  total_count_ = 0u;
  count_ = 0u;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryGroupMessageResponse::~HistoryGroupMessageResponse() {
  // @@protoc_insertion_point(destructor:tt_mts.HistoryGroupMessageResponse)
  SharedDtor();
}

void HistoryGroupMessageResponse::SharedDtor() {
  if (this != default_instance_) {
    delete group_id_;
  }
}

void HistoryGroupMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryGroupMessageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryGroupMessageResponse_descriptor_;
}

const HistoryGroupMessageResponse& HistoryGroupMessageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTransferServer_2eproto();
  return *default_instance_;
}

HistoryGroupMessageResponse* HistoryGroupMessageResponse::default_instance_ = NULL;

HistoryGroupMessageResponse* HistoryGroupMessageResponse::New() const {
  return new HistoryGroupMessageResponse;
}

void HistoryGroupMessageResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HistoryGroupMessageResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 61) {
    ZR_(current_time_, index_);
    if (has_group_id()) {
      if (group_id_ != NULL) group_id_->::tt_im_group::GroupId::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  messages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoryGroupMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_mts.HistoryGroupMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .tt_im_group.GroupId group_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_messages;
        break;
      }

      // repeated .tt_mts.DownlinkGroupMessageRequest messages = 2;
      case 2: {
        if (tag == 18) {
         parse_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_messages;
        if (input->ExpectTag(24)) goto parse_current_time;
        break;
      }

      // optional uint32 current_time = 3;
      case 3: {
        if (tag == 24) {
         parse_current_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_time_)));
          set_has_current_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_total_count;
        break;
      }

      // optional uint32 total_count = 4;
      case 4: {
        if (tag == 32) {
         parse_total_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_count_)));
          set_has_total_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }

      // optional uint32 count = 5;
      case 5: {
        if (tag == 40) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_index;
        break;
      }

      // optional uint32 index = 6;
      case 6: {
        if (tag == 48) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tt_mts.HistoryGroupMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_mts.HistoryGroupMessageResponse)
  return false;
#undef DO_
}

void HistoryGroupMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_mts.HistoryGroupMessageResponse)
  // required .tt_im_group.GroupId group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group_id(), output);
  }

  // repeated .tt_mts.DownlinkGroupMessageRequest messages = 2;
  for (int i = 0; i < this->messages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->messages(i), output);
  }

  // optional uint32 current_time = 3;
  if (has_current_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->current_time(), output);
  }

  // optional uint32 total_count = 4;
  if (has_total_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->total_count(), output);
  }

  // optional uint32 count = 5;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->count(), output);
  }

  // optional uint32 index = 6;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_mts.HistoryGroupMessageResponse)
}

::google::protobuf::uint8* HistoryGroupMessageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_mts.HistoryGroupMessageResponse)
  // required .tt_im_group.GroupId group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->group_id(), target);
  }

  // repeated .tt_mts.DownlinkGroupMessageRequest messages = 2;
  for (int i = 0; i < this->messages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->messages(i), target);
  }

  // optional uint32 current_time = 3;
  if (has_current_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->current_time(), target);
  }

  // optional uint32 total_count = 4;
  if (has_total_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->total_count(), target);
  }

  // optional uint32 count = 5;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->count(), target);
  }

  // optional uint32 index = 6;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_mts.HistoryGroupMessageResponse)
  return target;
}

int HistoryGroupMessageResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .tt_im_group.GroupId group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_id());
    }

    // optional uint32 current_time = 3;
    if (has_current_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_time());
    }

    // optional uint32 total_count = 4;
    if (has_total_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_count());
    }

    // optional uint32 count = 5;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 index = 6;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  // repeated .tt_mts.DownlinkGroupMessageRequest messages = 2;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messages(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryGroupMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoryGroupMessageResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoryGroupMessageResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoryGroupMessageResponse::MergeFrom(const HistoryGroupMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  messages_.MergeFrom(from.messages_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      mutable_group_id()->::tt_im_group::GroupId::MergeFrom(from.group_id());
    }
    if (from.has_current_time()) {
      set_current_time(from.current_time());
    }
    if (from.has_total_count()) {
      set_total_count(from.total_count());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoryGroupMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryGroupMessageResponse::CopyFrom(const HistoryGroupMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryGroupMessageResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_group_id()) {
    if (!this->group_id().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->messages())) return false;
  return true;
}

void HistoryGroupMessageResponse::Swap(HistoryGroupMessageResponse* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    messages_.Swap(&other->messages_);
    std::swap(current_time_, other->current_time_);
    std::swap(total_count_, other->total_count_);
    std::swap(count_, other->count_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoryGroupMessageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryGroupMessageResponse_descriptor_;
  metadata.reflection = HistoryGroupMessageResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistorySysMessageRequest::kMessageTypeFieldNumber;
const int HistorySysMessageRequest::kBeginTimeFieldNumber;
const int HistorySysMessageRequest::kTimeLengthFieldNumber;
const int HistorySysMessageRequest::kMessageCountFieldNumber;
#endif  // !_MSC_VER

HistorySysMessageRequest::HistorySysMessageRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_mts.HistorySysMessageRequest)
}

void HistorySysMessageRequest::InitAsDefaultInstance() {
}

HistorySysMessageRequest::HistorySysMessageRequest(const HistorySysMessageRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_mts.HistorySysMessageRequest)
}

void HistorySysMessageRequest::SharedCtor() {
  _cached_size_ = 0;
  message_type_ = 0u;
  begin_time_ = 0u;
  time_length_ = 0u;
  message_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistorySysMessageRequest::~HistorySysMessageRequest() {
  // @@protoc_insertion_point(destructor:tt_mts.HistorySysMessageRequest)
  SharedDtor();
}

void HistorySysMessageRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HistorySysMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistorySysMessageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistorySysMessageRequest_descriptor_;
}

const HistorySysMessageRequest& HistorySysMessageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTransferServer_2eproto();
  return *default_instance_;
}

HistorySysMessageRequest* HistorySysMessageRequest::default_instance_ = NULL;

HistorySysMessageRequest* HistorySysMessageRequest::New() const {
  return new HistorySysMessageRequest;
}

void HistorySysMessageRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HistorySysMessageRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(message_type_, message_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistorySysMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_mts.HistorySysMessageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 message_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_type_)));
          set_has_message_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_begin_time;
        break;
      }

      // optional uint32 begin_time = 2;
      case 2: {
        if (tag == 16) {
         parse_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time_length;
        break;
      }

      // optional uint32 time_length = 3;
      case 3: {
        if (tag == 24) {
         parse_time_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_length_)));
          set_has_time_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_message_count;
        break;
      }

      // optional uint32 message_count = 4;
      case 4: {
        if (tag == 32) {
         parse_message_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_count_)));
          set_has_message_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tt_mts.HistorySysMessageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_mts.HistorySysMessageRequest)
  return false;
#undef DO_
}

void HistorySysMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_mts.HistorySysMessageRequest)
  // optional uint32 message_type = 1;
  if (has_message_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->message_type(), output);
  }

  // optional uint32 begin_time = 2;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->begin_time(), output);
  }

  // optional uint32 time_length = 3;
  if (has_time_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_length(), output);
  }

  // optional uint32 message_count = 4;
  if (has_message_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->message_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_mts.HistorySysMessageRequest)
}

::google::protobuf::uint8* HistorySysMessageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_mts.HistorySysMessageRequest)
  // optional uint32 message_type = 1;
  if (has_message_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->message_type(), target);
  }

  // optional uint32 begin_time = 2;
  if (has_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->begin_time(), target);
  }

  // optional uint32 time_length = 3;
  if (has_time_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_length(), target);
  }

  // optional uint32 message_count = 4;
  if (has_message_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->message_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_mts.HistorySysMessageRequest)
  return target;
}

int HistorySysMessageRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 message_type = 1;
    if (has_message_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_type());
    }

    // optional uint32 begin_time = 2;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begin_time());
    }

    // optional uint32 time_length = 3;
    if (has_time_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_length());
    }

    // optional uint32 message_count = 4;
    if (has_message_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistorySysMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistorySysMessageRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistorySysMessageRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistorySysMessageRequest::MergeFrom(const HistorySysMessageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_type()) {
      set_message_type(from.message_type());
    }
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
    if (from.has_time_length()) {
      set_time_length(from.time_length());
    }
    if (from.has_message_count()) {
      set_message_count(from.message_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistorySysMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistorySysMessageRequest::CopyFrom(const HistorySysMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistorySysMessageRequest::IsInitialized() const {

  return true;
}

void HistorySysMessageRequest::Swap(HistorySysMessageRequest* other) {
  if (other != this) {
    std::swap(message_type_, other->message_type_);
    std::swap(begin_time_, other->begin_time_);
    std::swap(time_length_, other->time_length_);
    std::swap(message_count_, other->message_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistorySysMessageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistorySysMessageRequest_descriptor_;
  metadata.reflection = HistorySysMessageRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistorySysMessageResponse::kMessageTypeFieldNumber;
const int HistorySysMessageResponse::kMessagesFieldNumber;
#endif  // !_MSC_VER

HistorySysMessageResponse::HistorySysMessageResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_mts.HistorySysMessageResponse)
}

void HistorySysMessageResponse::InitAsDefaultInstance() {
}

HistorySysMessageResponse::HistorySysMessageResponse(const HistorySysMessageResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_mts.HistorySysMessageResponse)
}

void HistorySysMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  message_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistorySysMessageResponse::~HistorySysMessageResponse() {
  // @@protoc_insertion_point(destructor:tt_mts.HistorySysMessageResponse)
  SharedDtor();
}

void HistorySysMessageResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HistorySysMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistorySysMessageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistorySysMessageResponse_descriptor_;
}

const HistorySysMessageResponse& HistorySysMessageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTransferServer_2eproto();
  return *default_instance_;
}

HistorySysMessageResponse* HistorySysMessageResponse::default_instance_ = NULL;

HistorySysMessageResponse* HistorySysMessageResponse::New() const {
  return new HistorySysMessageResponse;
}

void HistorySysMessageResponse::Clear() {
  message_type_ = 0u;
  messages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistorySysMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_mts.HistorySysMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 message_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_type_)));
          set_has_message_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_messages;
        break;
      }

      // repeated .tt_mts.DownlinkMessageRequest messages = 2;
      case 2: {
        if (tag == 18) {
         parse_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_messages;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tt_mts.HistorySysMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_mts.HistorySysMessageResponse)
  return false;
#undef DO_
}

void HistorySysMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_mts.HistorySysMessageResponse)
  // optional uint32 message_type = 1;
  if (has_message_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->message_type(), output);
  }

  // repeated .tt_mts.DownlinkMessageRequest messages = 2;
  for (int i = 0; i < this->messages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->messages(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_mts.HistorySysMessageResponse)
}

::google::protobuf::uint8* HistorySysMessageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_mts.HistorySysMessageResponse)
  // optional uint32 message_type = 1;
  if (has_message_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->message_type(), target);
  }

  // repeated .tt_mts.DownlinkMessageRequest messages = 2;
  for (int i = 0; i < this->messages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->messages(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_mts.HistorySysMessageResponse)
  return target;
}

int HistorySysMessageResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 message_type = 1;
    if (has_message_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_type());
    }

  }
  // repeated .tt_mts.DownlinkMessageRequest messages = 2;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messages(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistorySysMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistorySysMessageResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistorySysMessageResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistorySysMessageResponse::MergeFrom(const HistorySysMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  messages_.MergeFrom(from.messages_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_type()) {
      set_message_type(from.message_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistorySysMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistorySysMessageResponse::CopyFrom(const HistorySysMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistorySysMessageResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->messages())) return false;
  return true;
}

void HistorySysMessageResponse::Swap(HistorySysMessageResponse* other) {
  if (other != this) {
    std::swap(message_type_, other->message_type_);
    messages_.Swap(&other->messages_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistorySysMessageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistorySysMessageResponse_descriptor_;
  metadata.reflection = HistorySysMessageResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MTS_DEBUG_UserInfo::kUserIdFieldNumber;
const int MTS_DEBUG_UserInfo::kUserIpFieldNumber;
const int MTS_DEBUG_UserInfo::kUserPortFieldNumber;
const int MTS_DEBUG_UserInfo::kLoginTimeFieldNumber;
#endif  // !_MSC_VER

MTS_DEBUG_UserInfo::MTS_DEBUG_UserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_mts.MTS_DEBUG_UserInfo)
}

void MTS_DEBUG_UserInfo::InitAsDefaultInstance() {
}

MTS_DEBUG_UserInfo::MTS_DEBUG_UserInfo(const MTS_DEBUG_UserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_mts.MTS_DEBUG_UserInfo)
}

void MTS_DEBUG_UserInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  user_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_port_ = 0u;
  login_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MTS_DEBUG_UserInfo::~MTS_DEBUG_UserInfo() {
  // @@protoc_insertion_point(destructor:tt_mts.MTS_DEBUG_UserInfo)
  SharedDtor();
}

void MTS_DEBUG_UserInfo::SharedDtor() {
  if (user_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_ip_;
  }
  if (this != default_instance_) {
  }
}

void MTS_DEBUG_UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MTS_DEBUG_UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MTS_DEBUG_UserInfo_descriptor_;
}

const MTS_DEBUG_UserInfo& MTS_DEBUG_UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTransferServer_2eproto();
  return *default_instance_;
}

MTS_DEBUG_UserInfo* MTS_DEBUG_UserInfo::default_instance_ = NULL;

MTS_DEBUG_UserInfo* MTS_DEBUG_UserInfo::New() const {
  return new MTS_DEBUG_UserInfo;
}

void MTS_DEBUG_UserInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MTS_DEBUG_UserInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(user_port_, login_time_);
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_user_ip()) {
      if (user_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_ip_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MTS_DEBUG_UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_mts.MTS_DEBUG_UserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_ip;
        break;
      }

      // required string user_ip = 2;
      case 2: {
        if (tag == 18) {
         parse_user_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_ip().data(), this->user_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_user_port;
        break;
      }

      // required uint32 user_port = 3;
      case 3: {
        if (tag == 24) {
         parse_user_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_port_)));
          set_has_user_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_login_time;
        break;
      }

      // optional uint32 login_time = 4;
      case 4: {
        if (tag == 32) {
         parse_login_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &login_time_)));
          set_has_login_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tt_mts.MTS_DEBUG_UserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_mts.MTS_DEBUG_UserInfo)
  return false;
#undef DO_
}

void MTS_DEBUG_UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_mts.MTS_DEBUG_UserInfo)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required string user_ip = 2;
  if (has_user_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_ip().data(), this->user_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_ip(), output);
  }

  // required uint32 user_port = 3;
  if (has_user_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->user_port(), output);
  }

  // optional uint32 login_time = 4;
  if (has_login_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->login_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_mts.MTS_DEBUG_UserInfo)
}

::google::protobuf::uint8* MTS_DEBUG_UserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_mts.MTS_DEBUG_UserInfo)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required string user_ip = 2;
  if (has_user_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_ip().data(), this->user_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_ip(), target);
  }

  // required uint32 user_port = 3;
  if (has_user_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->user_port(), target);
  }

  // optional uint32 login_time = 4;
  if (has_login_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->login_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_mts.MTS_DEBUG_UserInfo)
  return target;
}

int MTS_DEBUG_UserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required string user_ip = 2;
    if (has_user_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_ip());
    }

    // required uint32 user_port = 3;
    if (has_user_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_port());
    }

    // optional uint32 login_time = 4;
    if (has_login_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->login_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MTS_DEBUG_UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MTS_DEBUG_UserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MTS_DEBUG_UserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MTS_DEBUG_UserInfo::MergeFrom(const MTS_DEBUG_UserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_ip()) {
      set_user_ip(from.user_ip());
    }
    if (from.has_user_port()) {
      set_user_port(from.user_port());
    }
    if (from.has_login_time()) {
      set_login_time(from.login_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MTS_DEBUG_UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MTS_DEBUG_UserInfo::CopyFrom(const MTS_DEBUG_UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MTS_DEBUG_UserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MTS_DEBUG_UserInfo::Swap(MTS_DEBUG_UserInfo* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(user_ip_, other->user_ip_);
    std::swap(user_port_, other->user_port_);
    std::swap(login_time_, other->login_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MTS_DEBUG_UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MTS_DEBUG_UserInfo_descriptor_;
  metadata.reflection = MTS_DEBUG_UserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MTS_DEBUG_ServiceInfo::kServeTypeFieldNumber;
const int MTS_DEBUG_ServiceInfo::kServeIpFieldNumber;
const int MTS_DEBUG_ServiceInfo::kServePortFieldNumber;
const int MTS_DEBUG_ServiceInfo::kConnectTimeFieldNumber;
#endif  // !_MSC_VER

MTS_DEBUG_ServiceInfo::MTS_DEBUG_ServiceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_mts.MTS_DEBUG_ServiceInfo)
}

void MTS_DEBUG_ServiceInfo::InitAsDefaultInstance() {
}

MTS_DEBUG_ServiceInfo::MTS_DEBUG_ServiceInfo(const MTS_DEBUG_ServiceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_mts.MTS_DEBUG_ServiceInfo)
}

void MTS_DEBUG_ServiceInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serve_type_ = 0u;
  serve_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serve_port_ = 0u;
  connect_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MTS_DEBUG_ServiceInfo::~MTS_DEBUG_ServiceInfo() {
  // @@protoc_insertion_point(destructor:tt_mts.MTS_DEBUG_ServiceInfo)
  SharedDtor();
}

void MTS_DEBUG_ServiceInfo::SharedDtor() {
  if (serve_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serve_ip_;
  }
  if (this != default_instance_) {
  }
}

void MTS_DEBUG_ServiceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MTS_DEBUG_ServiceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MTS_DEBUG_ServiceInfo_descriptor_;
}

const MTS_DEBUG_ServiceInfo& MTS_DEBUG_ServiceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTransferServer_2eproto();
  return *default_instance_;
}

MTS_DEBUG_ServiceInfo* MTS_DEBUG_ServiceInfo::default_instance_ = NULL;

MTS_DEBUG_ServiceInfo* MTS_DEBUG_ServiceInfo::New() const {
  return new MTS_DEBUG_ServiceInfo;
}

void MTS_DEBUG_ServiceInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MTS_DEBUG_ServiceInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(serve_type_, connect_time_);
    if (has_serve_ip()) {
      if (serve_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serve_ip_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MTS_DEBUG_ServiceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_mts.MTS_DEBUG_ServiceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 serve_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serve_type_)));
          set_has_serve_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_serve_ip;
        break;
      }

      // required string serve_ip = 2;
      case 2: {
        if (tag == 18) {
         parse_serve_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serve_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serve_ip().data(), this->serve_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serve_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_serve_port;
        break;
      }

      // required uint32 serve_port = 3;
      case 3: {
        if (tag == 24) {
         parse_serve_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serve_port_)));
          set_has_serve_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_connect_time;
        break;
      }

      // optional uint32 connect_time = 4;
      case 4: {
        if (tag == 32) {
         parse_connect_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connect_time_)));
          set_has_connect_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tt_mts.MTS_DEBUG_ServiceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_mts.MTS_DEBUG_ServiceInfo)
  return false;
#undef DO_
}

void MTS_DEBUG_ServiceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_mts.MTS_DEBUG_ServiceInfo)
  // required uint32 serve_type = 1;
  if (has_serve_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serve_type(), output);
  }

  // required string serve_ip = 2;
  if (has_serve_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serve_ip().data(), this->serve_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serve_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serve_ip(), output);
  }

  // required uint32 serve_port = 3;
  if (has_serve_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serve_port(), output);
  }

  // optional uint32 connect_time = 4;
  if (has_connect_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->connect_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_mts.MTS_DEBUG_ServiceInfo)
}

::google::protobuf::uint8* MTS_DEBUG_ServiceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_mts.MTS_DEBUG_ServiceInfo)
  // required uint32 serve_type = 1;
  if (has_serve_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serve_type(), target);
  }

  // required string serve_ip = 2;
  if (has_serve_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serve_ip().data(), this->serve_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serve_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serve_ip(), target);
  }

  // required uint32 serve_port = 3;
  if (has_serve_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serve_port(), target);
  }

  // optional uint32 connect_time = 4;
  if (has_connect_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->connect_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_mts.MTS_DEBUG_ServiceInfo)
  return target;
}

int MTS_DEBUG_ServiceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 serve_type = 1;
    if (has_serve_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serve_type());
    }

    // required string serve_ip = 2;
    if (has_serve_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serve_ip());
    }

    // required uint32 serve_port = 3;
    if (has_serve_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serve_port());
    }

    // optional uint32 connect_time = 4;
    if (has_connect_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->connect_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MTS_DEBUG_ServiceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MTS_DEBUG_ServiceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MTS_DEBUG_ServiceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MTS_DEBUG_ServiceInfo::MergeFrom(const MTS_DEBUG_ServiceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serve_type()) {
      set_serve_type(from.serve_type());
    }
    if (from.has_serve_ip()) {
      set_serve_ip(from.serve_ip());
    }
    if (from.has_serve_port()) {
      set_serve_port(from.serve_port());
    }
    if (from.has_connect_time()) {
      set_connect_time(from.connect_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MTS_DEBUG_ServiceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MTS_DEBUG_ServiceInfo::CopyFrom(const MTS_DEBUG_ServiceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MTS_DEBUG_ServiceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MTS_DEBUG_ServiceInfo::Swap(MTS_DEBUG_ServiceInfo* other) {
  if (other != this) {
    std::swap(serve_type_, other->serve_type_);
    std::swap(serve_ip_, other->serve_ip_);
    std::swap(serve_port_, other->serve_port_);
    std::swap(connect_time_, other->connect_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MTS_DEBUG_ServiceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MTS_DEBUG_ServiceInfo_descriptor_;
  metadata.reflection = MTS_DEBUG_ServiceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MTS_DEBUG_ListUsersRequest::MTS_DEBUG_ListUsersRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_mts.MTS_DEBUG_ListUsersRequest)
}

void MTS_DEBUG_ListUsersRequest::InitAsDefaultInstance() {
}

MTS_DEBUG_ListUsersRequest::MTS_DEBUG_ListUsersRequest(const MTS_DEBUG_ListUsersRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_mts.MTS_DEBUG_ListUsersRequest)
}

void MTS_DEBUG_ListUsersRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MTS_DEBUG_ListUsersRequest::~MTS_DEBUG_ListUsersRequest() {
  // @@protoc_insertion_point(destructor:tt_mts.MTS_DEBUG_ListUsersRequest)
  SharedDtor();
}

void MTS_DEBUG_ListUsersRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MTS_DEBUG_ListUsersRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MTS_DEBUG_ListUsersRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MTS_DEBUG_ListUsersRequest_descriptor_;
}

const MTS_DEBUG_ListUsersRequest& MTS_DEBUG_ListUsersRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTransferServer_2eproto();
  return *default_instance_;
}

MTS_DEBUG_ListUsersRequest* MTS_DEBUG_ListUsersRequest::default_instance_ = NULL;

MTS_DEBUG_ListUsersRequest* MTS_DEBUG_ListUsersRequest::New() const {
  return new MTS_DEBUG_ListUsersRequest;
}

void MTS_DEBUG_ListUsersRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MTS_DEBUG_ListUsersRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_mts.MTS_DEBUG_ListUsersRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:tt_mts.MTS_DEBUG_ListUsersRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_mts.MTS_DEBUG_ListUsersRequest)
  return false;
#undef DO_
}

void MTS_DEBUG_ListUsersRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_mts.MTS_DEBUG_ListUsersRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_mts.MTS_DEBUG_ListUsersRequest)
}

::google::protobuf::uint8* MTS_DEBUG_ListUsersRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_mts.MTS_DEBUG_ListUsersRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_mts.MTS_DEBUG_ListUsersRequest)
  return target;
}

int MTS_DEBUG_ListUsersRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MTS_DEBUG_ListUsersRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MTS_DEBUG_ListUsersRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MTS_DEBUG_ListUsersRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MTS_DEBUG_ListUsersRequest::MergeFrom(const MTS_DEBUG_ListUsersRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MTS_DEBUG_ListUsersRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MTS_DEBUG_ListUsersRequest::CopyFrom(const MTS_DEBUG_ListUsersRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MTS_DEBUG_ListUsersRequest::IsInitialized() const {

  return true;
}

void MTS_DEBUG_ListUsersRequest::Swap(MTS_DEBUG_ListUsersRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MTS_DEBUG_ListUsersRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MTS_DEBUG_ListUsersRequest_descriptor_;
  metadata.reflection = MTS_DEBUG_ListUsersRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MTS_DEBUG_ListUsersResponse::kUsersFieldNumber;
#endif  // !_MSC_VER

MTS_DEBUG_ListUsersResponse::MTS_DEBUG_ListUsersResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_mts.MTS_DEBUG_ListUsersResponse)
}

void MTS_DEBUG_ListUsersResponse::InitAsDefaultInstance() {
}

MTS_DEBUG_ListUsersResponse::MTS_DEBUG_ListUsersResponse(const MTS_DEBUG_ListUsersResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_mts.MTS_DEBUG_ListUsersResponse)
}

void MTS_DEBUG_ListUsersResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MTS_DEBUG_ListUsersResponse::~MTS_DEBUG_ListUsersResponse() {
  // @@protoc_insertion_point(destructor:tt_mts.MTS_DEBUG_ListUsersResponse)
  SharedDtor();
}

void MTS_DEBUG_ListUsersResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MTS_DEBUG_ListUsersResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MTS_DEBUG_ListUsersResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MTS_DEBUG_ListUsersResponse_descriptor_;
}

const MTS_DEBUG_ListUsersResponse& MTS_DEBUG_ListUsersResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTransferServer_2eproto();
  return *default_instance_;
}

MTS_DEBUG_ListUsersResponse* MTS_DEBUG_ListUsersResponse::default_instance_ = NULL;

MTS_DEBUG_ListUsersResponse* MTS_DEBUG_ListUsersResponse::New() const {
  return new MTS_DEBUG_ListUsersResponse;
}

void MTS_DEBUG_ListUsersResponse::Clear() {
  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MTS_DEBUG_ListUsersResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_mts.MTS_DEBUG_ListUsersResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tt_mts.MTS_DEBUG_UserInfo users = 1;
      case 1: {
        if (tag == 10) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_users;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tt_mts.MTS_DEBUG_ListUsersResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_mts.MTS_DEBUG_ListUsersResponse)
  return false;
#undef DO_
}

void MTS_DEBUG_ListUsersResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_mts.MTS_DEBUG_ListUsersResponse)
  // repeated .tt_mts.MTS_DEBUG_UserInfo users = 1;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->users(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_mts.MTS_DEBUG_ListUsersResponse)
}

::google::protobuf::uint8* MTS_DEBUG_ListUsersResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_mts.MTS_DEBUG_ListUsersResponse)
  // repeated .tt_mts.MTS_DEBUG_UserInfo users = 1;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->users(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_mts.MTS_DEBUG_ListUsersResponse)
  return target;
}

int MTS_DEBUG_ListUsersResponse::ByteSize() const {
  int total_size = 0;

  // repeated .tt_mts.MTS_DEBUG_UserInfo users = 1;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MTS_DEBUG_ListUsersResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MTS_DEBUG_ListUsersResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MTS_DEBUG_ListUsersResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MTS_DEBUG_ListUsersResponse::MergeFrom(const MTS_DEBUG_ListUsersResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MTS_DEBUG_ListUsersResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MTS_DEBUG_ListUsersResponse::CopyFrom(const MTS_DEBUG_ListUsersResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MTS_DEBUG_ListUsersResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->users())) return false;
  return true;
}

void MTS_DEBUG_ListUsersResponse::Swap(MTS_DEBUG_ListUsersResponse* other) {
  if (other != this) {
    users_.Swap(&other->users_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MTS_DEBUG_ListUsersResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MTS_DEBUG_ListUsersResponse_descriptor_;
  metadata.reflection = MTS_DEBUG_ListUsersResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MTS_DEBUG_ListOtherServicesRequest::MTS_DEBUG_ListOtherServicesRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_mts.MTS_DEBUG_ListOtherServicesRequest)
}

void MTS_DEBUG_ListOtherServicesRequest::InitAsDefaultInstance() {
}

MTS_DEBUG_ListOtherServicesRequest::MTS_DEBUG_ListOtherServicesRequest(const MTS_DEBUG_ListOtherServicesRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_mts.MTS_DEBUG_ListOtherServicesRequest)
}

void MTS_DEBUG_ListOtherServicesRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MTS_DEBUG_ListOtherServicesRequest::~MTS_DEBUG_ListOtherServicesRequest() {
  // @@protoc_insertion_point(destructor:tt_mts.MTS_DEBUG_ListOtherServicesRequest)
  SharedDtor();
}

void MTS_DEBUG_ListOtherServicesRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MTS_DEBUG_ListOtherServicesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MTS_DEBUG_ListOtherServicesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MTS_DEBUG_ListOtherServicesRequest_descriptor_;
}

const MTS_DEBUG_ListOtherServicesRequest& MTS_DEBUG_ListOtherServicesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTransferServer_2eproto();
  return *default_instance_;
}

MTS_DEBUG_ListOtherServicesRequest* MTS_DEBUG_ListOtherServicesRequest::default_instance_ = NULL;

MTS_DEBUG_ListOtherServicesRequest* MTS_DEBUG_ListOtherServicesRequest::New() const {
  return new MTS_DEBUG_ListOtherServicesRequest;
}

void MTS_DEBUG_ListOtherServicesRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MTS_DEBUG_ListOtherServicesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_mts.MTS_DEBUG_ListOtherServicesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:tt_mts.MTS_DEBUG_ListOtherServicesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_mts.MTS_DEBUG_ListOtherServicesRequest)
  return false;
#undef DO_
}

void MTS_DEBUG_ListOtherServicesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_mts.MTS_DEBUG_ListOtherServicesRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_mts.MTS_DEBUG_ListOtherServicesRequest)
}

::google::protobuf::uint8* MTS_DEBUG_ListOtherServicesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_mts.MTS_DEBUG_ListOtherServicesRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_mts.MTS_DEBUG_ListOtherServicesRequest)
  return target;
}

int MTS_DEBUG_ListOtherServicesRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MTS_DEBUG_ListOtherServicesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MTS_DEBUG_ListOtherServicesRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MTS_DEBUG_ListOtherServicesRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MTS_DEBUG_ListOtherServicesRequest::MergeFrom(const MTS_DEBUG_ListOtherServicesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MTS_DEBUG_ListOtherServicesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MTS_DEBUG_ListOtherServicesRequest::CopyFrom(const MTS_DEBUG_ListOtherServicesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MTS_DEBUG_ListOtherServicesRequest::IsInitialized() const {

  return true;
}

void MTS_DEBUG_ListOtherServicesRequest::Swap(MTS_DEBUG_ListOtherServicesRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MTS_DEBUG_ListOtherServicesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MTS_DEBUG_ListOtherServicesRequest_descriptor_;
  metadata.reflection = MTS_DEBUG_ListOtherServicesRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MTS_DEBUG_ListOtherServicesResponse::kServicesFieldNumber;
#endif  // !_MSC_VER

MTS_DEBUG_ListOtherServicesResponse::MTS_DEBUG_ListOtherServicesResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_mts.MTS_DEBUG_ListOtherServicesResponse)
}

void MTS_DEBUG_ListOtherServicesResponse::InitAsDefaultInstance() {
}

MTS_DEBUG_ListOtherServicesResponse::MTS_DEBUG_ListOtherServicesResponse(const MTS_DEBUG_ListOtherServicesResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_mts.MTS_DEBUG_ListOtherServicesResponse)
}

void MTS_DEBUG_ListOtherServicesResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MTS_DEBUG_ListOtherServicesResponse::~MTS_DEBUG_ListOtherServicesResponse() {
  // @@protoc_insertion_point(destructor:tt_mts.MTS_DEBUG_ListOtherServicesResponse)
  SharedDtor();
}

void MTS_DEBUG_ListOtherServicesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MTS_DEBUG_ListOtherServicesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MTS_DEBUG_ListOtherServicesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MTS_DEBUG_ListOtherServicesResponse_descriptor_;
}

const MTS_DEBUG_ListOtherServicesResponse& MTS_DEBUG_ListOtherServicesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTransferServer_2eproto();
  return *default_instance_;
}

MTS_DEBUG_ListOtherServicesResponse* MTS_DEBUG_ListOtherServicesResponse::default_instance_ = NULL;

MTS_DEBUG_ListOtherServicesResponse* MTS_DEBUG_ListOtherServicesResponse::New() const {
  return new MTS_DEBUG_ListOtherServicesResponse;
}

void MTS_DEBUG_ListOtherServicesResponse::Clear() {
  services_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MTS_DEBUG_ListOtherServicesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_mts.MTS_DEBUG_ListOtherServicesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tt_mts.MTS_DEBUG_ServiceInfo services = 1;
      case 1: {
        if (tag == 10) {
         parse_services:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_services()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_services;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tt_mts.MTS_DEBUG_ListOtherServicesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_mts.MTS_DEBUG_ListOtherServicesResponse)
  return false;
#undef DO_
}

void MTS_DEBUG_ListOtherServicesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_mts.MTS_DEBUG_ListOtherServicesResponse)
  // repeated .tt_mts.MTS_DEBUG_ServiceInfo services = 1;
  for (int i = 0; i < this->services_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->services(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_mts.MTS_DEBUG_ListOtherServicesResponse)
}

::google::protobuf::uint8* MTS_DEBUG_ListOtherServicesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_mts.MTS_DEBUG_ListOtherServicesResponse)
  // repeated .tt_mts.MTS_DEBUG_ServiceInfo services = 1;
  for (int i = 0; i < this->services_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->services(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_mts.MTS_DEBUG_ListOtherServicesResponse)
  return target;
}

int MTS_DEBUG_ListOtherServicesResponse::ByteSize() const {
  int total_size = 0;

  // repeated .tt_mts.MTS_DEBUG_ServiceInfo services = 1;
  total_size += 1 * this->services_size();
  for (int i = 0; i < this->services_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->services(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MTS_DEBUG_ListOtherServicesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MTS_DEBUG_ListOtherServicesResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MTS_DEBUG_ListOtherServicesResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MTS_DEBUG_ListOtherServicesResponse::MergeFrom(const MTS_DEBUG_ListOtherServicesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  services_.MergeFrom(from.services_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MTS_DEBUG_ListOtherServicesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MTS_DEBUG_ListOtherServicesResponse::CopyFrom(const MTS_DEBUG_ListOtherServicesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MTS_DEBUG_ListOtherServicesResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->services())) return false;
  return true;
}

void MTS_DEBUG_ListOtherServicesResponse::Swap(MTS_DEBUG_ListOtherServicesResponse* other) {
  if (other != this) {
    services_.Swap(&other->services_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MTS_DEBUG_ListOtherServicesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MTS_DEBUG_ListOtherServicesResponse_descriptor_;
  metadata.reflection = MTS_DEBUG_ListOtherServicesResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MTS_DEBUG_ListGroupsBelongToUserRequest::kUserIdFieldNumber;
#endif  // !_MSC_VER

MTS_DEBUG_ListGroupsBelongToUserRequest::MTS_DEBUG_ListGroupsBelongToUserRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_mts.MTS_DEBUG_ListGroupsBelongToUserRequest)
}

void MTS_DEBUG_ListGroupsBelongToUserRequest::InitAsDefaultInstance() {
}

MTS_DEBUG_ListGroupsBelongToUserRequest::MTS_DEBUG_ListGroupsBelongToUserRequest(const MTS_DEBUG_ListGroupsBelongToUserRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_mts.MTS_DEBUG_ListGroupsBelongToUserRequest)
}

void MTS_DEBUG_ListGroupsBelongToUserRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MTS_DEBUG_ListGroupsBelongToUserRequest::~MTS_DEBUG_ListGroupsBelongToUserRequest() {
  // @@protoc_insertion_point(destructor:tt_mts.MTS_DEBUG_ListGroupsBelongToUserRequest)
  SharedDtor();
}

void MTS_DEBUG_ListGroupsBelongToUserRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MTS_DEBUG_ListGroupsBelongToUserRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MTS_DEBUG_ListGroupsBelongToUserRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MTS_DEBUG_ListGroupsBelongToUserRequest_descriptor_;
}

const MTS_DEBUG_ListGroupsBelongToUserRequest& MTS_DEBUG_ListGroupsBelongToUserRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTransferServer_2eproto();
  return *default_instance_;
}

MTS_DEBUG_ListGroupsBelongToUserRequest* MTS_DEBUG_ListGroupsBelongToUserRequest::default_instance_ = NULL;

MTS_DEBUG_ListGroupsBelongToUserRequest* MTS_DEBUG_ListGroupsBelongToUserRequest::New() const {
  return new MTS_DEBUG_ListGroupsBelongToUserRequest;
}

void MTS_DEBUG_ListGroupsBelongToUserRequest::Clear() {
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MTS_DEBUG_ListGroupsBelongToUserRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_mts.MTS_DEBUG_ListGroupsBelongToUserRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tt_mts.MTS_DEBUG_ListGroupsBelongToUserRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_mts.MTS_DEBUG_ListGroupsBelongToUserRequest)
  return false;
#undef DO_
}

void MTS_DEBUG_ListGroupsBelongToUserRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_mts.MTS_DEBUG_ListGroupsBelongToUserRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_mts.MTS_DEBUG_ListGroupsBelongToUserRequest)
}

::google::protobuf::uint8* MTS_DEBUG_ListGroupsBelongToUserRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_mts.MTS_DEBUG_ListGroupsBelongToUserRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_mts.MTS_DEBUG_ListGroupsBelongToUserRequest)
  return target;
}

int MTS_DEBUG_ListGroupsBelongToUserRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MTS_DEBUG_ListGroupsBelongToUserRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MTS_DEBUG_ListGroupsBelongToUserRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MTS_DEBUG_ListGroupsBelongToUserRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MTS_DEBUG_ListGroupsBelongToUserRequest::MergeFrom(const MTS_DEBUG_ListGroupsBelongToUserRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MTS_DEBUG_ListGroupsBelongToUserRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MTS_DEBUG_ListGroupsBelongToUserRequest::CopyFrom(const MTS_DEBUG_ListGroupsBelongToUserRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MTS_DEBUG_ListGroupsBelongToUserRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MTS_DEBUG_ListGroupsBelongToUserRequest::Swap(MTS_DEBUG_ListGroupsBelongToUserRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MTS_DEBUG_ListGroupsBelongToUserRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MTS_DEBUG_ListGroupsBelongToUserRequest_descriptor_;
  metadata.reflection = MTS_DEBUG_ListGroupsBelongToUserRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MTS_DEBUG_ListGroupsBelongToUserResponse::kUserIdFieldNumber;
const int MTS_DEBUG_ListGroupsBelongToUserResponse::kGroupIdsFieldNumber;
#endif  // !_MSC_VER

MTS_DEBUG_ListGroupsBelongToUserResponse::MTS_DEBUG_ListGroupsBelongToUserResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_mts.MTS_DEBUG_ListGroupsBelongToUserResponse)
}

void MTS_DEBUG_ListGroupsBelongToUserResponse::InitAsDefaultInstance() {
}

MTS_DEBUG_ListGroupsBelongToUserResponse::MTS_DEBUG_ListGroupsBelongToUserResponse(const MTS_DEBUG_ListGroupsBelongToUserResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_mts.MTS_DEBUG_ListGroupsBelongToUserResponse)
}

void MTS_DEBUG_ListGroupsBelongToUserResponse::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MTS_DEBUG_ListGroupsBelongToUserResponse::~MTS_DEBUG_ListGroupsBelongToUserResponse() {
  // @@protoc_insertion_point(destructor:tt_mts.MTS_DEBUG_ListGroupsBelongToUserResponse)
  SharedDtor();
}

void MTS_DEBUG_ListGroupsBelongToUserResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MTS_DEBUG_ListGroupsBelongToUserResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MTS_DEBUG_ListGroupsBelongToUserResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MTS_DEBUG_ListGroupsBelongToUserResponse_descriptor_;
}

const MTS_DEBUG_ListGroupsBelongToUserResponse& MTS_DEBUG_ListGroupsBelongToUserResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTransferServer_2eproto();
  return *default_instance_;
}

MTS_DEBUG_ListGroupsBelongToUserResponse* MTS_DEBUG_ListGroupsBelongToUserResponse::default_instance_ = NULL;

MTS_DEBUG_ListGroupsBelongToUserResponse* MTS_DEBUG_ListGroupsBelongToUserResponse::New() const {
  return new MTS_DEBUG_ListGroupsBelongToUserResponse;
}

void MTS_DEBUG_ListGroupsBelongToUserResponse::Clear() {
  user_id_ = GOOGLE_ULONGLONG(0);
  group_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MTS_DEBUG_ListGroupsBelongToUserResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_mts.MTS_DEBUG_ListGroupsBelongToUserResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_group_ids;
        break;
      }

      // repeated .tt_im_group.GroupId group_ids = 2;
      case 2: {
        if (tag == 18) {
         parse_group_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_group_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tt_mts.MTS_DEBUG_ListGroupsBelongToUserResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_mts.MTS_DEBUG_ListGroupsBelongToUserResponse)
  return false;
#undef DO_
}

void MTS_DEBUG_ListGroupsBelongToUserResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_mts.MTS_DEBUG_ListGroupsBelongToUserResponse)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // repeated .tt_im_group.GroupId group_ids = 2;
  for (int i = 0; i < this->group_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->group_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_mts.MTS_DEBUG_ListGroupsBelongToUserResponse)
}

::google::protobuf::uint8* MTS_DEBUG_ListGroupsBelongToUserResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_mts.MTS_DEBUG_ListGroupsBelongToUserResponse)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // repeated .tt_im_group.GroupId group_ids = 2;
  for (int i = 0; i < this->group_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->group_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_mts.MTS_DEBUG_ListGroupsBelongToUserResponse)
  return target;
}

int MTS_DEBUG_ListGroupsBelongToUserResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

  }
  // repeated .tt_im_group.GroupId group_ids = 2;
  total_size += 1 * this->group_ids_size();
  for (int i = 0; i < this->group_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group_ids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MTS_DEBUG_ListGroupsBelongToUserResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MTS_DEBUG_ListGroupsBelongToUserResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MTS_DEBUG_ListGroupsBelongToUserResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MTS_DEBUG_ListGroupsBelongToUserResponse::MergeFrom(const MTS_DEBUG_ListGroupsBelongToUserResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_ids_.MergeFrom(from.group_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MTS_DEBUG_ListGroupsBelongToUserResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MTS_DEBUG_ListGroupsBelongToUserResponse::CopyFrom(const MTS_DEBUG_ListGroupsBelongToUserResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MTS_DEBUG_ListGroupsBelongToUserResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->group_ids())) return false;
  return true;
}

void MTS_DEBUG_ListGroupsBelongToUserResponse::Swap(MTS_DEBUG_ListGroupsBelongToUserResponse* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    group_ids_.Swap(&other->group_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MTS_DEBUG_ListGroupsBelongToUserResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MTS_DEBUG_ListGroupsBelongToUserResponse_descriptor_;
  metadata.reflection = MTS_DEBUG_ListGroupsBelongToUserResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MTS_DEBUG_ListGroupsBelongToGroupserverRequest::kGroupserverIpFieldNumber;
const int MTS_DEBUG_ListGroupsBelongToGroupserverRequest::kGroupserverPortFieldNumber;
#endif  // !_MSC_VER

MTS_DEBUG_ListGroupsBelongToGroupserverRequest::MTS_DEBUG_ListGroupsBelongToGroupserverRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_mts.MTS_DEBUG_ListGroupsBelongToGroupserverRequest)
}

void MTS_DEBUG_ListGroupsBelongToGroupserverRequest::InitAsDefaultInstance() {
}

MTS_DEBUG_ListGroupsBelongToGroupserverRequest::MTS_DEBUG_ListGroupsBelongToGroupserverRequest(const MTS_DEBUG_ListGroupsBelongToGroupserverRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_mts.MTS_DEBUG_ListGroupsBelongToGroupserverRequest)
}

void MTS_DEBUG_ListGroupsBelongToGroupserverRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  groupserver_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupserver_port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MTS_DEBUG_ListGroupsBelongToGroupserverRequest::~MTS_DEBUG_ListGroupsBelongToGroupserverRequest() {
  // @@protoc_insertion_point(destructor:tt_mts.MTS_DEBUG_ListGroupsBelongToGroupserverRequest)
  SharedDtor();
}

void MTS_DEBUG_ListGroupsBelongToGroupserverRequest::SharedDtor() {
  if (groupserver_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete groupserver_ip_;
  }
  if (this != default_instance_) {
  }
}

void MTS_DEBUG_ListGroupsBelongToGroupserverRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MTS_DEBUG_ListGroupsBelongToGroupserverRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MTS_DEBUG_ListGroupsBelongToGroupserverRequest_descriptor_;
}

const MTS_DEBUG_ListGroupsBelongToGroupserverRequest& MTS_DEBUG_ListGroupsBelongToGroupserverRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTransferServer_2eproto();
  return *default_instance_;
}

MTS_DEBUG_ListGroupsBelongToGroupserverRequest* MTS_DEBUG_ListGroupsBelongToGroupserverRequest::default_instance_ = NULL;

MTS_DEBUG_ListGroupsBelongToGroupserverRequest* MTS_DEBUG_ListGroupsBelongToGroupserverRequest::New() const {
  return new MTS_DEBUG_ListGroupsBelongToGroupserverRequest;
}

void MTS_DEBUG_ListGroupsBelongToGroupserverRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_groupserver_ip()) {
      if (groupserver_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        groupserver_ip_->clear();
      }
    }
    groupserver_port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MTS_DEBUG_ListGroupsBelongToGroupserverRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_mts.MTS_DEBUG_ListGroupsBelongToGroupserverRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string groupserver_ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupserver_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupserver_ip().data(), this->groupserver_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "groupserver_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_groupserver_port;
        break;
      }

      // optional uint32 groupserver_port = 2;
      case 2: {
        if (tag == 16) {
         parse_groupserver_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupserver_port_)));
          set_has_groupserver_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tt_mts.MTS_DEBUG_ListGroupsBelongToGroupserverRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_mts.MTS_DEBUG_ListGroupsBelongToGroupserverRequest)
  return false;
#undef DO_
}

void MTS_DEBUG_ListGroupsBelongToGroupserverRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_mts.MTS_DEBUG_ListGroupsBelongToGroupserverRequest)
  // required string groupserver_ip = 1;
  if (has_groupserver_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupserver_ip().data(), this->groupserver_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "groupserver_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->groupserver_ip(), output);
  }

  // optional uint32 groupserver_port = 2;
  if (has_groupserver_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->groupserver_port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_mts.MTS_DEBUG_ListGroupsBelongToGroupserverRequest)
}

::google::protobuf::uint8* MTS_DEBUG_ListGroupsBelongToGroupserverRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_mts.MTS_DEBUG_ListGroupsBelongToGroupserverRequest)
  // required string groupserver_ip = 1;
  if (has_groupserver_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupserver_ip().data(), this->groupserver_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "groupserver_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->groupserver_ip(), target);
  }

  // optional uint32 groupserver_port = 2;
  if (has_groupserver_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->groupserver_port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_mts.MTS_DEBUG_ListGroupsBelongToGroupserverRequest)
  return target;
}

int MTS_DEBUG_ListGroupsBelongToGroupserverRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string groupserver_ip = 1;
    if (has_groupserver_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupserver_ip());
    }

    // optional uint32 groupserver_port = 2;
    if (has_groupserver_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupserver_port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MTS_DEBUG_ListGroupsBelongToGroupserverRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MTS_DEBUG_ListGroupsBelongToGroupserverRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MTS_DEBUG_ListGroupsBelongToGroupserverRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MTS_DEBUG_ListGroupsBelongToGroupserverRequest::MergeFrom(const MTS_DEBUG_ListGroupsBelongToGroupserverRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupserver_ip()) {
      set_groupserver_ip(from.groupserver_ip());
    }
    if (from.has_groupserver_port()) {
      set_groupserver_port(from.groupserver_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MTS_DEBUG_ListGroupsBelongToGroupserverRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MTS_DEBUG_ListGroupsBelongToGroupserverRequest::CopyFrom(const MTS_DEBUG_ListGroupsBelongToGroupserverRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MTS_DEBUG_ListGroupsBelongToGroupserverRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MTS_DEBUG_ListGroupsBelongToGroupserverRequest::Swap(MTS_DEBUG_ListGroupsBelongToGroupserverRequest* other) {
  if (other != this) {
    std::swap(groupserver_ip_, other->groupserver_ip_);
    std::swap(groupserver_port_, other->groupserver_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MTS_DEBUG_ListGroupsBelongToGroupserverRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MTS_DEBUG_ListGroupsBelongToGroupserverRequest_descriptor_;
  metadata.reflection = MTS_DEBUG_ListGroupsBelongToGroupserverRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MTS_DEBUG_ListGroupsBelongToGroupserverResponse::kGroupserverIpFieldNumber;
const int MTS_DEBUG_ListGroupsBelongToGroupserverResponse::kGroupserverPortFieldNumber;
const int MTS_DEBUG_ListGroupsBelongToGroupserverResponse::kGroupIdsFieldNumber;
#endif  // !_MSC_VER

MTS_DEBUG_ListGroupsBelongToGroupserverResponse::MTS_DEBUG_ListGroupsBelongToGroupserverResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_mts.MTS_DEBUG_ListGroupsBelongToGroupserverResponse)
}

void MTS_DEBUG_ListGroupsBelongToGroupserverResponse::InitAsDefaultInstance() {
}

MTS_DEBUG_ListGroupsBelongToGroupserverResponse::MTS_DEBUG_ListGroupsBelongToGroupserverResponse(const MTS_DEBUG_ListGroupsBelongToGroupserverResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_mts.MTS_DEBUG_ListGroupsBelongToGroupserverResponse)
}

void MTS_DEBUG_ListGroupsBelongToGroupserverResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  groupserver_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupserver_port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MTS_DEBUG_ListGroupsBelongToGroupserverResponse::~MTS_DEBUG_ListGroupsBelongToGroupserverResponse() {
  // @@protoc_insertion_point(destructor:tt_mts.MTS_DEBUG_ListGroupsBelongToGroupserverResponse)
  SharedDtor();
}

void MTS_DEBUG_ListGroupsBelongToGroupserverResponse::SharedDtor() {
  if (groupserver_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete groupserver_ip_;
  }
  if (this != default_instance_) {
  }
}

void MTS_DEBUG_ListGroupsBelongToGroupserverResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MTS_DEBUG_ListGroupsBelongToGroupserverResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MTS_DEBUG_ListGroupsBelongToGroupserverResponse_descriptor_;
}

const MTS_DEBUG_ListGroupsBelongToGroupserverResponse& MTS_DEBUG_ListGroupsBelongToGroupserverResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTransferServer_2eproto();
  return *default_instance_;
}

MTS_DEBUG_ListGroupsBelongToGroupserverResponse* MTS_DEBUG_ListGroupsBelongToGroupserverResponse::default_instance_ = NULL;

MTS_DEBUG_ListGroupsBelongToGroupserverResponse* MTS_DEBUG_ListGroupsBelongToGroupserverResponse::New() const {
  return new MTS_DEBUG_ListGroupsBelongToGroupserverResponse;
}

void MTS_DEBUG_ListGroupsBelongToGroupserverResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_groupserver_ip()) {
      if (groupserver_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        groupserver_ip_->clear();
      }
    }
    groupserver_port_ = 0u;
  }
  group_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MTS_DEBUG_ListGroupsBelongToGroupserverResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_mts.MTS_DEBUG_ListGroupsBelongToGroupserverResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string groupserver_ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupserver_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupserver_ip().data(), this->groupserver_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "groupserver_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_groupserver_port;
        break;
      }

      // optional uint32 groupserver_port = 2;
      case 2: {
        if (tag == 16) {
         parse_groupserver_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupserver_port_)));
          set_has_groupserver_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_group_ids;
        break;
      }

      // repeated .tt_im_group.GroupId group_ids = 3;
      case 3: {
        if (tag == 26) {
         parse_group_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_group_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tt_mts.MTS_DEBUG_ListGroupsBelongToGroupserverResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_mts.MTS_DEBUG_ListGroupsBelongToGroupserverResponse)
  return false;
#undef DO_
}

void MTS_DEBUG_ListGroupsBelongToGroupserverResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_mts.MTS_DEBUG_ListGroupsBelongToGroupserverResponse)
  // required string groupserver_ip = 1;
  if (has_groupserver_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupserver_ip().data(), this->groupserver_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "groupserver_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->groupserver_ip(), output);
  }

  // optional uint32 groupserver_port = 2;
  if (has_groupserver_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->groupserver_port(), output);
  }

  // repeated .tt_im_group.GroupId group_ids = 3;
  for (int i = 0; i < this->group_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->group_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_mts.MTS_DEBUG_ListGroupsBelongToGroupserverResponse)
}

::google::protobuf::uint8* MTS_DEBUG_ListGroupsBelongToGroupserverResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_mts.MTS_DEBUG_ListGroupsBelongToGroupserverResponse)
  // required string groupserver_ip = 1;
  if (has_groupserver_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupserver_ip().data(), this->groupserver_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "groupserver_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->groupserver_ip(), target);
  }

  // optional uint32 groupserver_port = 2;
  if (has_groupserver_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->groupserver_port(), target);
  }

  // repeated .tt_im_group.GroupId group_ids = 3;
  for (int i = 0; i < this->group_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->group_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_mts.MTS_DEBUG_ListGroupsBelongToGroupserverResponse)
  return target;
}

int MTS_DEBUG_ListGroupsBelongToGroupserverResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string groupserver_ip = 1;
    if (has_groupserver_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupserver_ip());
    }

    // optional uint32 groupserver_port = 2;
    if (has_groupserver_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupserver_port());
    }

  }
  // repeated .tt_im_group.GroupId group_ids = 3;
  total_size += 1 * this->group_ids_size();
  for (int i = 0; i < this->group_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group_ids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MTS_DEBUG_ListGroupsBelongToGroupserverResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MTS_DEBUG_ListGroupsBelongToGroupserverResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MTS_DEBUG_ListGroupsBelongToGroupserverResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MTS_DEBUG_ListGroupsBelongToGroupserverResponse::MergeFrom(const MTS_DEBUG_ListGroupsBelongToGroupserverResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_ids_.MergeFrom(from.group_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupserver_ip()) {
      set_groupserver_ip(from.groupserver_ip());
    }
    if (from.has_groupserver_port()) {
      set_groupserver_port(from.groupserver_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MTS_DEBUG_ListGroupsBelongToGroupserverResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MTS_DEBUG_ListGroupsBelongToGroupserverResponse::CopyFrom(const MTS_DEBUG_ListGroupsBelongToGroupserverResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MTS_DEBUG_ListGroupsBelongToGroupserverResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->group_ids())) return false;
  return true;
}

void MTS_DEBUG_ListGroupsBelongToGroupserverResponse::Swap(MTS_DEBUG_ListGroupsBelongToGroupserverResponse* other) {
  if (other != this) {
    std::swap(groupserver_ip_, other->groupserver_ip_);
    std::swap(groupserver_port_, other->groupserver_port_);
    group_ids_.Swap(&other->group_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MTS_DEBUG_ListGroupsBelongToGroupserverResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MTS_DEBUG_ListGroupsBelongToGroupserverResponse_descriptor_;
  metadata.reflection = MTS_DEBUG_ListGroupsBelongToGroupserverResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MTS_DEBUG_ListUsersBelongToGroupRequest::kGroupIdFieldNumber;
#endif  // !_MSC_VER

MTS_DEBUG_ListUsersBelongToGroupRequest::MTS_DEBUG_ListUsersBelongToGroupRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_mts.MTS_DEBUG_ListUsersBelongToGroupRequest)
}

void MTS_DEBUG_ListUsersBelongToGroupRequest::InitAsDefaultInstance() {
  group_id_ = const_cast< ::tt_im_group::GroupId*>(&::tt_im_group::GroupId::default_instance());
}

MTS_DEBUG_ListUsersBelongToGroupRequest::MTS_DEBUG_ListUsersBelongToGroupRequest(const MTS_DEBUG_ListUsersBelongToGroupRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_mts.MTS_DEBUG_ListUsersBelongToGroupRequest)
}

void MTS_DEBUG_ListUsersBelongToGroupRequest::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MTS_DEBUG_ListUsersBelongToGroupRequest::~MTS_DEBUG_ListUsersBelongToGroupRequest() {
  // @@protoc_insertion_point(destructor:tt_mts.MTS_DEBUG_ListUsersBelongToGroupRequest)
  SharedDtor();
}

void MTS_DEBUG_ListUsersBelongToGroupRequest::SharedDtor() {
  if (this != default_instance_) {
    delete group_id_;
  }
}

void MTS_DEBUG_ListUsersBelongToGroupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MTS_DEBUG_ListUsersBelongToGroupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MTS_DEBUG_ListUsersBelongToGroupRequest_descriptor_;
}

const MTS_DEBUG_ListUsersBelongToGroupRequest& MTS_DEBUG_ListUsersBelongToGroupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTransferServer_2eproto();
  return *default_instance_;
}

MTS_DEBUG_ListUsersBelongToGroupRequest* MTS_DEBUG_ListUsersBelongToGroupRequest::default_instance_ = NULL;

MTS_DEBUG_ListUsersBelongToGroupRequest* MTS_DEBUG_ListUsersBelongToGroupRequest::New() const {
  return new MTS_DEBUG_ListUsersBelongToGroupRequest;
}

void MTS_DEBUG_ListUsersBelongToGroupRequest::Clear() {
  if (has_group_id()) {
    if (group_id_ != NULL) group_id_->::tt_im_group::GroupId::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MTS_DEBUG_ListUsersBelongToGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_mts.MTS_DEBUG_ListUsersBelongToGroupRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .tt_im_group.GroupId group_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tt_mts.MTS_DEBUG_ListUsersBelongToGroupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_mts.MTS_DEBUG_ListUsersBelongToGroupRequest)
  return false;
#undef DO_
}

void MTS_DEBUG_ListUsersBelongToGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_mts.MTS_DEBUG_ListUsersBelongToGroupRequest)
  // required .tt_im_group.GroupId group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_mts.MTS_DEBUG_ListUsersBelongToGroupRequest)
}

::google::protobuf::uint8* MTS_DEBUG_ListUsersBelongToGroupRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_mts.MTS_DEBUG_ListUsersBelongToGroupRequest)
  // required .tt_im_group.GroupId group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_mts.MTS_DEBUG_ListUsersBelongToGroupRequest)
  return target;
}

int MTS_DEBUG_ListUsersBelongToGroupRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .tt_im_group.GroupId group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MTS_DEBUG_ListUsersBelongToGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MTS_DEBUG_ListUsersBelongToGroupRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MTS_DEBUG_ListUsersBelongToGroupRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MTS_DEBUG_ListUsersBelongToGroupRequest::MergeFrom(const MTS_DEBUG_ListUsersBelongToGroupRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      mutable_group_id()->::tt_im_group::GroupId::MergeFrom(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MTS_DEBUG_ListUsersBelongToGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MTS_DEBUG_ListUsersBelongToGroupRequest::CopyFrom(const MTS_DEBUG_ListUsersBelongToGroupRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MTS_DEBUG_ListUsersBelongToGroupRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_group_id()) {
    if (!this->group_id().IsInitialized()) return false;
  }
  return true;
}

void MTS_DEBUG_ListUsersBelongToGroupRequest::Swap(MTS_DEBUG_ListUsersBelongToGroupRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MTS_DEBUG_ListUsersBelongToGroupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MTS_DEBUG_ListUsersBelongToGroupRequest_descriptor_;
  metadata.reflection = MTS_DEBUG_ListUsersBelongToGroupRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MTS_DEBUG_ListUsersBelongToGroupResponse::kGroupIdFieldNumber;
const int MTS_DEBUG_ListUsersBelongToGroupResponse::kUsersFieldNumber;
#endif  // !_MSC_VER

MTS_DEBUG_ListUsersBelongToGroupResponse::MTS_DEBUG_ListUsersBelongToGroupResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_mts.MTS_DEBUG_ListUsersBelongToGroupResponse)
}

void MTS_DEBUG_ListUsersBelongToGroupResponse::InitAsDefaultInstance() {
  group_id_ = const_cast< ::tt_im_group::GroupId*>(&::tt_im_group::GroupId::default_instance());
}

MTS_DEBUG_ListUsersBelongToGroupResponse::MTS_DEBUG_ListUsersBelongToGroupResponse(const MTS_DEBUG_ListUsersBelongToGroupResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_mts.MTS_DEBUG_ListUsersBelongToGroupResponse)
}

void MTS_DEBUG_ListUsersBelongToGroupResponse::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MTS_DEBUG_ListUsersBelongToGroupResponse::~MTS_DEBUG_ListUsersBelongToGroupResponse() {
  // @@protoc_insertion_point(destructor:tt_mts.MTS_DEBUG_ListUsersBelongToGroupResponse)
  SharedDtor();
}

void MTS_DEBUG_ListUsersBelongToGroupResponse::SharedDtor() {
  if (this != default_instance_) {
    delete group_id_;
  }
}

void MTS_DEBUG_ListUsersBelongToGroupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MTS_DEBUG_ListUsersBelongToGroupResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MTS_DEBUG_ListUsersBelongToGroupResponse_descriptor_;
}

const MTS_DEBUG_ListUsersBelongToGroupResponse& MTS_DEBUG_ListUsersBelongToGroupResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTransferServer_2eproto();
  return *default_instance_;
}

MTS_DEBUG_ListUsersBelongToGroupResponse* MTS_DEBUG_ListUsersBelongToGroupResponse::default_instance_ = NULL;

MTS_DEBUG_ListUsersBelongToGroupResponse* MTS_DEBUG_ListUsersBelongToGroupResponse::New() const {
  return new MTS_DEBUG_ListUsersBelongToGroupResponse;
}

void MTS_DEBUG_ListUsersBelongToGroupResponse::Clear() {
  if (has_group_id()) {
    if (group_id_ != NULL) group_id_->::tt_im_group::GroupId::Clear();
  }
  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MTS_DEBUG_ListUsersBelongToGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_mts.MTS_DEBUG_ListUsersBelongToGroupResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .tt_im_group.GroupId group_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_users;
        break;
      }

      // repeated .tt_mts.MTS_DEBUG_UserInfo users = 2;
      case 2: {
        if (tag == 18) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_users;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tt_mts.MTS_DEBUG_ListUsersBelongToGroupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_mts.MTS_DEBUG_ListUsersBelongToGroupResponse)
  return false;
#undef DO_
}

void MTS_DEBUG_ListUsersBelongToGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_mts.MTS_DEBUG_ListUsersBelongToGroupResponse)
  // required .tt_im_group.GroupId group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group_id(), output);
  }

  // repeated .tt_mts.MTS_DEBUG_UserInfo users = 2;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->users(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_mts.MTS_DEBUG_ListUsersBelongToGroupResponse)
}

::google::protobuf::uint8* MTS_DEBUG_ListUsersBelongToGroupResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_mts.MTS_DEBUG_ListUsersBelongToGroupResponse)
  // required .tt_im_group.GroupId group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->group_id(), target);
  }

  // repeated .tt_mts.MTS_DEBUG_UserInfo users = 2;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->users(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_mts.MTS_DEBUG_ListUsersBelongToGroupResponse)
  return target;
}

int MTS_DEBUG_ListUsersBelongToGroupResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .tt_im_group.GroupId group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_id());
    }

  }
  // repeated .tt_mts.MTS_DEBUG_UserInfo users = 2;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MTS_DEBUG_ListUsersBelongToGroupResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MTS_DEBUG_ListUsersBelongToGroupResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MTS_DEBUG_ListUsersBelongToGroupResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MTS_DEBUG_ListUsersBelongToGroupResponse::MergeFrom(const MTS_DEBUG_ListUsersBelongToGroupResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      mutable_group_id()->::tt_im_group::GroupId::MergeFrom(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MTS_DEBUG_ListUsersBelongToGroupResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MTS_DEBUG_ListUsersBelongToGroupResponse::CopyFrom(const MTS_DEBUG_ListUsersBelongToGroupResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MTS_DEBUG_ListUsersBelongToGroupResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_group_id()) {
    if (!this->group_id().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->users())) return false;
  return true;
}

void MTS_DEBUG_ListUsersBelongToGroupResponse::Swap(MTS_DEBUG_ListUsersBelongToGroupResponse* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    users_.Swap(&other->users_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MTS_DEBUG_ListUsersBelongToGroupResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MTS_DEBUG_ListUsersBelongToGroupResponse_descriptor_;
  metadata.reflection = MTS_DEBUG_ListUsersBelongToGroupResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tt_mts

// @@protoc_insertion_point(global_scope)
