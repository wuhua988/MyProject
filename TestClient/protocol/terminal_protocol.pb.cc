// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: terminal_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "terminal_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TerminalProtocol {

namespace {

const ::google::protobuf::Descriptor* Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Result_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Redirect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Redirect_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeepaliveRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeepaliveRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogoutRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogoutRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogoutResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogoutResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFriendListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFriendListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFriendListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFriendListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFriendBasicInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFriendBasicInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendBasicInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendBasicInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFriendBasicInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFriendBasicInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUserInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUserInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUserInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUserInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeOnlineStateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeOnlineStateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendOnlineStateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendOnlineStateNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendsOnlineStateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendsOnlineStateNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGroupListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGroupListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupListItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupListItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGroupListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGroupListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateGroupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateGroupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateGroupResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateGroupResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinGroupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinGroupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinGroupResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinGroupResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinGroupVerifyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinGroupVerifyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinGroupVerifyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinGroupVerifyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinGroupConfirmRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinGroupConfirmRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinGroupNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinGroupNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExitGroupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExitGroupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExitGroupResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExitGroupResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGroupUserListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGroupUserListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGroupUserListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGroupUserListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGroupUserInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGroupUserInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGroupUserInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGroupUserInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchGroupUserListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchGroupUserListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchGroupUserListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchGroupUserListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddFriendRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddFriendRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddFriendResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddFriendResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddFriendVerifyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddFriendVerifyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddFriendVerifyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddFriendVerifyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddFriendConfirmRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddFriendConfirmRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddFriendNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddFriendNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteFriendRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteFriendRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteFriendNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteFriendNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateFriendBranchRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateFriendBranchRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddBranchRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddBranchRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddBranchResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddBranchResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteBranchRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteBranchRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateBranchNameRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateBranchNameRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* KickoutGroupUserRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KickoutGroupUserRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetGroupManagerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetGroupManagerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateFriendRemarkRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateFriendRemarkRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBranchListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBranchListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserIdRemarkItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserIdRemarkItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* BranchListItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BranchListItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBranchListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBranchListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetFriendOptionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetFriendOptionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupManagerVerifyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupManagerVerifyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupManagerVerifyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupManagerVerifyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteGroupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteGroupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteGroupResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteGroupResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateGroupRemarkRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateGroupRemarkRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateGroupInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateGroupInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateGroupOptionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateGroupOptionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGroupOptionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGroupOptionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGroupOptionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGroupOptionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateGroupNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateGroupNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGroupInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGroupInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGroupInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGroupInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateGroupNoticeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateGroupNoticeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateUserInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateUserInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateUserMoodRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateUserMoodRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateUserNickNameRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateUserNickNameRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateAvatarRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateAvatarRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* KickUserOffline_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KickUserOffline_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUserOnlineStateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUserOnlineStateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserOnlineStateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserOnlineStateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUserOnlineStateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUserOnlineStateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGroupUserCardRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGroupUserCardRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGroupUserCardResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGroupUserCardResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateGroupUserCardRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateGroupUserCardRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetGroupMsgModeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetGroupMsgModeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetGroupTalkModeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetGroupTalkModeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFriendVerifyInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFriendVerifyInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFriendVerifyInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFriendVerifyInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGroupManagerListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGroupManagerListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGroupManagerListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGroupManagerListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteHistoryMessageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteHistoryMessageRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_terminal_5fprotocol_2eproto() {
  protobuf_AddDesc_terminal_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "terminal_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  Result_descriptor_ = file->message_type(0);
  static const int Result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, msg_),
  };
  Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Result_descriptor_,
      Result::default_instance_,
      Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Result));
  LoginRequest_descriptor_ = file->message_type(1);
  static const int LoginRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, login_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, online_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, terminal_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, mac_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, has_camera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, login_type_),
  };
  LoginRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRequest_descriptor_,
      LoginRequest::default_instance_,
      LoginRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRequest));
  Redirect_descriptor_ = file->message_type(2);
  static const int Redirect_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Redirect, server_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Redirect, server_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Redirect, app_id_),
  };
  Redirect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Redirect_descriptor_,
      Redirect::default_instance_,
      Redirect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Redirect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Redirect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Redirect));
  LoginResponse_descriptor_ = file->message_type(3);
  static const int LoginResponse_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, tt_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, avatar_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, mts_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, mts_port_),
  };
  LoginResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginResponse_descriptor_,
      LoginResponse::default_instance_,
      LoginResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginResponse));
  KeepaliveRequest_descriptor_ = file->message_type(4);
  static const int KeepaliveRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepaliveRequest, user_id_),
  };
  KeepaliveRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeepaliveRequest_descriptor_,
      KeepaliveRequest::default_instance_,
      KeepaliveRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepaliveRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepaliveRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeepaliveRequest));
  LogoutRequest_descriptor_ = file->message_type(5);
  static const int LogoutRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRequest, terminal_type_),
  };
  LogoutRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogoutRequest_descriptor_,
      LogoutRequest::default_instance_,
      LogoutRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogoutRequest));
  LogoutResponse_descriptor_ = file->message_type(6);
  static const int LogoutResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutResponse, user_id_),
  };
  LogoutResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogoutResponse_descriptor_,
      LogoutResponse::default_instance_,
      LogoutResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogoutResponse));
  GetFriendListRequest_descriptor_ = file->message_type(7);
  static const int GetFriendListRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendListRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendListRequest, version_id_),
  };
  GetFriendListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFriendListRequest_descriptor_,
      GetFriendListRequest::default_instance_,
      GetFriendListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFriendListRequest));
  GetFriendListResponse_descriptor_ = file->message_type(8);
  static const int GetFriendListResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendListResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendListResponse, version_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendListResponse, friend_id_),
  };
  GetFriendListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFriendListResponse_descriptor_,
      GetFriendListResponse::default_instance_,
      GetFriendListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFriendListResponse));
  GetFriendBasicInfoRequest_descriptor_ = file->message_type(9);
  static const int GetFriendBasicInfoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendBasicInfoRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendBasicInfoRequest, friend_id_),
  };
  GetFriendBasicInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFriendBasicInfoRequest_descriptor_,
      GetFriendBasicInfoRequest::default_instance_,
      GetFriendBasicInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendBasicInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendBasicInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFriendBasicInfoRequest));
  FriendBasicInfo_descriptor_ = file->message_type(10);
  static const int FriendBasicInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendBasicInfo, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendBasicInfo, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendBasicInfo, avatar_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendBasicInfo, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendBasicInfo, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendBasicInfo, level_),
  };
  FriendBasicInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendBasicInfo_descriptor_,
      FriendBasicInfo::default_instance_,
      FriendBasicInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendBasicInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendBasicInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendBasicInfo));
  GetFriendBasicInfoResponse_descriptor_ = file->message_type(11);
  static const int GetFriendBasicInfoResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendBasicInfoResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendBasicInfoResponse, friend_info_),
  };
  GetFriendBasicInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFriendBasicInfoResponse_descriptor_,
      GetFriendBasicInfoResponse::default_instance_,
      GetFriendBasicInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendBasicInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendBasicInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFriendBasicInfoResponse));
  GetUserInfoRequest_descriptor_ = file->message_type(12);
  static const int GetUserInfoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoRequest, friend_id_),
  };
  GetUserInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUserInfoRequest_descriptor_,
      GetUserInfoRequest::default_instance_,
      GetUserInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUserInfoRequest));
  GetUserInfoResponse_descriptor_ = file->message_type(13);
  static const int GetUserInfoResponse_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoResponse, tt_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoResponse, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoResponse, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoResponse, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoResponse, mobile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoResponse, birthday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoResponse, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoResponse, user_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoResponse, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoResponse, constellation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoResponse, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoResponse, like_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoResponse, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoResponse, personal_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoResponse, real_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoResponse, friend_id_),
  };
  GetUserInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUserInfoResponse_descriptor_,
      GetUserInfoResponse::default_instance_,
      GetUserInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUserInfoResponse));
  ChangeOnlineStateRequest_descriptor_ = file->message_type(14);
  static const int ChangeOnlineStateRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeOnlineStateRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeOnlineStateRequest, terminal_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeOnlineStateRequest, online_state_),
  };
  ChangeOnlineStateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeOnlineStateRequest_descriptor_,
      ChangeOnlineStateRequest::default_instance_,
      ChangeOnlineStateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeOnlineStateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeOnlineStateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeOnlineStateRequest));
  FriendOnlineStateNotify_descriptor_ = file->message_type(15);
  static const int FriendOnlineStateNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendOnlineStateNotify, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendOnlineStateNotify, terminal_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendOnlineStateNotify, online_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendOnlineStateNotify, mts_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendOnlineStateNotify, mts_port_),
  };
  FriendOnlineStateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendOnlineStateNotify_descriptor_,
      FriendOnlineStateNotify::default_instance_,
      FriendOnlineStateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendOnlineStateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendOnlineStateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendOnlineStateNotify));
  FriendsOnlineStateNotify_descriptor_ = file->message_type(16);
  static const int FriendsOnlineStateNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsOnlineStateNotify, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsOnlineStateNotify, sum_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsOnlineStateNotify, cur_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsOnlineStateNotify, friend_state_),
  };
  FriendsOnlineStateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendsOnlineStateNotify_descriptor_,
      FriendsOnlineStateNotify::default_instance_,
      FriendsOnlineStateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsOnlineStateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsOnlineStateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendsOnlineStateNotify));
  GetGroupListRequest_descriptor_ = file->message_type(17);
  static const int GetGroupListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupListRequest, user_id_),
  };
  GetGroupListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGroupListRequest_descriptor_,
      GetGroupListRequest::default_instance_,
      GetGroupListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGroupListRequest));
  GroupListItem_descriptor_ = file->message_type(18);
  static const int GroupListItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupListItem, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupListItem, group_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupListItem, remark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupListItem, avatar_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupListItem, avatar_),
  };
  GroupListItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupListItem_descriptor_,
      GroupListItem::default_instance_,
      GroupListItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupListItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupListItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupListItem));
  GetGroupListResponse_descriptor_ = file->message_type(19);
  static const int GetGroupListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupListResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupListResponse, group_item_),
  };
  GetGroupListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGroupListResponse_descriptor_,
      GetGroupListResponse::default_instance_,
      GetGroupListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGroupListResponse));
  CreateGroupRequest_descriptor_ = file->message_type(20);
  static const int CreateGroupRequest_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupRequest, group_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupRequest, group_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupRequest, group_icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupRequest, verify_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupRequest, group_intro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupRequest, group_sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupRequest, avatar_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupRequest, sub_type_),
  };
  CreateGroupRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateGroupRequest_descriptor_,
      CreateGroupRequest::default_instance_,
      CreateGroupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateGroupRequest));
  CreateGroupResponse_descriptor_ = file->message_type(21);
  static const int CreateGroupResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupResponse, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupResponse, group_number_),
  };
  CreateGroupResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateGroupResponse_descriptor_,
      CreateGroupResponse::default_instance_,
      CreateGroupResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateGroupResponse));
  JoinGroupRequest_descriptor_ = file->message_type(22);
  static const int JoinGroupRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupRequest, group_id_),
  };
  JoinGroupRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinGroupRequest_descriptor_,
      JoinGroupRequest::default_instance_,
      JoinGroupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinGroupRequest));
  JoinGroupResponse_descriptor_ = file->message_type(23);
  static const int JoinGroupResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupResponse, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupResponse, verify_type_),
  };
  JoinGroupResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinGroupResponse_descriptor_,
      JoinGroupResponse::default_instance_,
      JoinGroupResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinGroupResponse));
  JoinGroupVerifyRequest_descriptor_ = file->message_type(24);
  static const int JoinGroupVerifyRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupVerifyRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupVerifyRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupVerifyRequest, verify_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupVerifyRequest, verify_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupVerifyRequest, group_manager_id_),
  };
  JoinGroupVerifyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinGroupVerifyRequest_descriptor_,
      JoinGroupVerifyRequest::default_instance_,
      JoinGroupVerifyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupVerifyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupVerifyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinGroupVerifyRequest));
  JoinGroupVerifyResponse_descriptor_ = file->message_type(25);
  static const int JoinGroupVerifyResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupVerifyResponse, result_),
  };
  JoinGroupVerifyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinGroupVerifyResponse_descriptor_,
      JoinGroupVerifyResponse::default_instance_,
      JoinGroupVerifyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupVerifyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupVerifyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinGroupVerifyResponse));
  JoinGroupConfirmRequest_descriptor_ = file->message_type(26);
  static const int JoinGroupConfirmRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupConfirmRequest, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupConfirmRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupConfirmRequest, group_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupConfirmRequest, group_id_),
  };
  JoinGroupConfirmRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinGroupConfirmRequest_descriptor_,
      JoinGroupConfirmRequest::default_instance_,
      JoinGroupConfirmRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupConfirmRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupConfirmRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinGroupConfirmRequest));
  JoinGroupNotify_descriptor_ = file->message_type(27);
  static const int JoinGroupNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupNotify, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupNotify, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupNotify, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupNotify, group_manager_id_),
  };
  JoinGroupNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinGroupNotify_descriptor_,
      JoinGroupNotify::default_instance_,
      JoinGroupNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinGroupNotify));
  ExitGroupRequest_descriptor_ = file->message_type(28);
  static const int ExitGroupRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitGroupRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitGroupRequest, group_id_),
  };
  ExitGroupRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExitGroupRequest_descriptor_,
      ExitGroupRequest::default_instance_,
      ExitGroupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitGroupRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitGroupRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExitGroupRequest));
  ExitGroupResponse_descriptor_ = file->message_type(29);
  static const int ExitGroupResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitGroupResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitGroupResponse, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitGroupResponse, result_),
  };
  ExitGroupResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExitGroupResponse_descriptor_,
      ExitGroupResponse::default_instance_,
      ExitGroupResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitGroupResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitGroupResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExitGroupResponse));
  GetGroupUserListRequest_descriptor_ = file->message_type(30);
  static const int GetGroupUserListRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserListRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserListRequest, group_id_),
  };
  GetGroupUserListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGroupUserListRequest_descriptor_,
      GetGroupUserListRequest::default_instance_,
      GetGroupUserListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGroupUserListRequest));
  GetGroupUserListResponse_descriptor_ = file->message_type(31);
  static const int GetGroupUserListResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserListResponse, user_id_),
  };
  GetGroupUserListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGroupUserListResponse_descriptor_,
      GetGroupUserListResponse::default_instance_,
      GetGroupUserListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGroupUserListResponse));
  GetGroupUserInfoRequest_descriptor_ = file->message_type(32);
  static const int GetGroupUserInfoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserInfoRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserInfoRequest, user_id_),
  };
  GetGroupUserInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGroupUserInfoRequest_descriptor_,
      GetGroupUserInfoRequest::default_instance_,
      GetGroupUserInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGroupUserInfoRequest));
  GroupUserInfo_descriptor_ = file->message_type(33);
  static const int GroupUserInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupUserInfo, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupUserInfo, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupUserInfo, online_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupUserInfo, avatar_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupUserInfo, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupUserInfo, role_),
  };
  GroupUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupUserInfo_descriptor_,
      GroupUserInfo::default_instance_,
      GroupUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupUserInfo));
  GetGroupUserInfoResponse_descriptor_ = file->message_type(34);
  static const int GetGroupUserInfoResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserInfoResponse, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserInfoResponse, user_info_),
  };
  GetGroupUserInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGroupUserInfoResponse_descriptor_,
      GetGroupUserInfoResponse::default_instance_,
      GetGroupUserInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGroupUserInfoResponse));
  SearchGroupUserListRequest_descriptor_ = file->message_type(35);
  static const int SearchGroupUserListRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchGroupUserListRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchGroupUserListRequest, search_string_),
  };
  SearchGroupUserListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchGroupUserListRequest_descriptor_,
      SearchGroupUserListRequest::default_instance_,
      SearchGroupUserListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchGroupUserListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchGroupUserListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchGroupUserListRequest));
  SearchGroupUserListResponse_descriptor_ = file->message_type(36);
  static const int SearchGroupUserListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchGroupUserListResponse, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchGroupUserListResponse, list_item_),
  };
  SearchGroupUserListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchGroupUserListResponse_descriptor_,
      SearchGroupUserListResponse::default_instance_,
      SearchGroupUserListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchGroupUserListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchGroupUserListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchGroupUserListResponse));
  AddFriendRequest_descriptor_ = file->message_type(37);
  static const int AddFriendRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendRequest, friend_id_),
  };
  AddFriendRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddFriendRequest_descriptor_,
      AddFriendRequest::default_instance_,
      AddFriendRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddFriendRequest));
  AddFriendResponse_descriptor_ = file->message_type(38);
  static const int AddFriendResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendResponse, verify_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendResponse, question_type_),
  };
  AddFriendResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddFriendResponse_descriptor_,
      AddFriendResponse::default_instance_,
      AddFriendResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddFriendResponse));
  AddFriendVerifyRequest_descriptor_ = file->message_type(39);
  static const int AddFriendVerifyRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendVerifyRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendVerifyRequest, friend_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendVerifyRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendVerifyRequest, question_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendVerifyRequest, verify_msg_),
  };
  AddFriendVerifyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddFriendVerifyRequest_descriptor_,
      AddFriendVerifyRequest::default_instance_,
      AddFriendVerifyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendVerifyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendVerifyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddFriendVerifyRequest));
  AddFriendVerifyResponse_descriptor_ = file->message_type(40);
  static const int AddFriendVerifyResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendVerifyResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendVerifyResponse, friend_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendVerifyResponse, is_allow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendVerifyResponse, reason_),
  };
  AddFriendVerifyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddFriendVerifyResponse_descriptor_,
      AddFriendVerifyResponse::default_instance_,
      AddFriendVerifyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendVerifyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendVerifyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddFriendVerifyResponse));
  AddFriendConfirmRequest_descriptor_ = file->message_type(41);
  static const int AddFriendConfirmRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendConfirmRequest, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendConfirmRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendConfirmRequest, friend_id_),
  };
  AddFriendConfirmRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddFriendConfirmRequest_descriptor_,
      AddFriendConfirmRequest::default_instance_,
      AddFriendConfirmRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendConfirmRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendConfirmRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddFriendConfirmRequest));
  AddFriendNotify_descriptor_ = file->message_type(42);
  static const int AddFriendNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendNotify, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendNotify, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendNotify, friend_id_),
  };
  AddFriendNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddFriendNotify_descriptor_,
      AddFriendNotify::default_instance_,
      AddFriendNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddFriendNotify));
  DeleteFriendRequest_descriptor_ = file->message_type(43);
  static const int DeleteFriendRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFriendRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFriendRequest, friend_id_),
  };
  DeleteFriendRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteFriendRequest_descriptor_,
      DeleteFriendRequest::default_instance_,
      DeleteFriendRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFriendRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFriendRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteFriendRequest));
  DeleteFriendNotify_descriptor_ = file->message_type(44);
  static const int DeleteFriendNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFriendNotify, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFriendNotify, friend_id_),
  };
  DeleteFriendNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteFriendNotify_descriptor_,
      DeleteFriendNotify::default_instance_,
      DeleteFriendNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFriendNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFriendNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteFriendNotify));
  UpdateFriendBranchRequest_descriptor_ = file->message_type(45);
  static const int UpdateFriendBranchRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendBranchRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendBranchRequest, friend_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendBranchRequest, branch_id_),
  };
  UpdateFriendBranchRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateFriendBranchRequest_descriptor_,
      UpdateFriendBranchRequest::default_instance_,
      UpdateFriendBranchRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendBranchRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendBranchRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateFriendBranchRequest));
  AddBranchRequest_descriptor_ = file->message_type(46);
  static const int AddBranchRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBranchRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBranchRequest, branch_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBranchRequest, branch_sort_),
  };
  AddBranchRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddBranchRequest_descriptor_,
      AddBranchRequest::default_instance_,
      AddBranchRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBranchRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBranchRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddBranchRequest));
  AddBranchResponse_descriptor_ = file->message_type(47);
  static const int AddBranchResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBranchResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBranchResponse, branch_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBranchResponse, branch_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBranchResponse, branch_sort_),
  };
  AddBranchResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddBranchResponse_descriptor_,
      AddBranchResponse::default_instance_,
      AddBranchResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBranchResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBranchResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddBranchResponse));
  DeleteBranchRequest_descriptor_ = file->message_type(48);
  static const int DeleteBranchRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteBranchRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteBranchRequest, branch_id_),
  };
  DeleteBranchRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteBranchRequest_descriptor_,
      DeleteBranchRequest::default_instance_,
      DeleteBranchRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteBranchRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteBranchRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteBranchRequest));
  UpdateBranchNameRequest_descriptor_ = file->message_type(49);
  static const int UpdateBranchNameRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBranchNameRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBranchNameRequest, branch_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBranchNameRequest, branch_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBranchNameRequest, branch_sort_),
  };
  UpdateBranchNameRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateBranchNameRequest_descriptor_,
      UpdateBranchNameRequest::default_instance_,
      UpdateBranchNameRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBranchNameRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBranchNameRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateBranchNameRequest));
  KickoutGroupUserRequest_descriptor_ = file->message_type(50);
  static const int KickoutGroupUserRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickoutGroupUserRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickoutGroupUserRequest, group_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickoutGroupUserRequest, group_id_),
  };
  KickoutGroupUserRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KickoutGroupUserRequest_descriptor_,
      KickoutGroupUserRequest::default_instance_,
      KickoutGroupUserRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickoutGroupUserRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickoutGroupUserRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KickoutGroupUserRequest));
  SetGroupManagerRequest_descriptor_ = file->message_type(51);
  static const int SetGroupManagerRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGroupManagerRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGroupManagerRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGroupManagerRequest, group_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGroupManagerRequest, control_value_),
  };
  SetGroupManagerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetGroupManagerRequest_descriptor_,
      SetGroupManagerRequest::default_instance_,
      SetGroupManagerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGroupManagerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGroupManagerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetGroupManagerRequest));
  UpdateFriendRemarkRequest_descriptor_ = file->message_type(52);
  static const int UpdateFriendRemarkRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendRemarkRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendRemarkRequest, friend_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendRemarkRequest, remark_),
  };
  UpdateFriendRemarkRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateFriendRemarkRequest_descriptor_,
      UpdateFriendRemarkRequest::default_instance_,
      UpdateFriendRemarkRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendRemarkRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendRemarkRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateFriendRemarkRequest));
  GetBranchListRequest_descriptor_ = file->message_type(53);
  static const int GetBranchListRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBranchListRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBranchListRequest, version_id_),
  };
  GetBranchListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBranchListRequest_descriptor_,
      GetBranchListRequest::default_instance_,
      GetBranchListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBranchListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBranchListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBranchListRequest));
  UserIdRemarkItem_descriptor_ = file->message_type(54);
  static const int UserIdRemarkItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserIdRemarkItem, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserIdRemarkItem, user_remark_),
  };
  UserIdRemarkItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserIdRemarkItem_descriptor_,
      UserIdRemarkItem::default_instance_,
      UserIdRemarkItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserIdRemarkItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserIdRemarkItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserIdRemarkItem));
  BranchListItem_descriptor_ = file->message_type(55);
  static const int BranchListItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchListItem, branch_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchListItem, branch_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchListItem, branch_sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchListItem, users_),
  };
  BranchListItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BranchListItem_descriptor_,
      BranchListItem::default_instance_,
      BranchListItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchListItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchListItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BranchListItem));
  GetBranchListResponse_descriptor_ = file->message_type(56);
  static const int GetBranchListResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBranchListResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBranchListResponse, version_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBranchListResponse, list_item_),
  };
  GetBranchListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBranchListResponse_descriptor_,
      GetBranchListResponse::default_instance_,
      GetBranchListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBranchListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBranchListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBranchListResponse));
  SetFriendOptionRequest_descriptor_ = file->message_type(57);
  static const int SetFriendOptionRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetFriendOptionRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetFriendOptionRequest, verify_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetFriendOptionRequest, question_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetFriendOptionRequest, answer_),
  };
  SetFriendOptionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetFriendOptionRequest_descriptor_,
      SetFriendOptionRequest::default_instance_,
      SetFriendOptionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetFriendOptionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetFriendOptionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetFriendOptionRequest));
  GroupManagerVerifyRequest_descriptor_ = file->message_type(58);
  static const int GroupManagerVerifyRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupManagerVerifyRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupManagerVerifyRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupManagerVerifyRequest, msg_),
  };
  GroupManagerVerifyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupManagerVerifyRequest_descriptor_,
      GroupManagerVerifyRequest::default_instance_,
      GroupManagerVerifyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupManagerVerifyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupManagerVerifyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupManagerVerifyRequest));
  GroupManagerVerifyResponse_descriptor_ = file->message_type(59);
  static const int GroupManagerVerifyResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupManagerVerifyResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupManagerVerifyResponse, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupManagerVerifyResponse, is_allow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupManagerVerifyResponse, reason_),
  };
  GroupManagerVerifyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupManagerVerifyResponse_descriptor_,
      GroupManagerVerifyResponse::default_instance_,
      GroupManagerVerifyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupManagerVerifyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupManagerVerifyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupManagerVerifyResponse));
  DeleteGroupRequest_descriptor_ = file->message_type(60);
  static const int DeleteGroupRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteGroupRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteGroupRequest, group_id_),
  };
  DeleteGroupRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteGroupRequest_descriptor_,
      DeleteGroupRequest::default_instance_,
      DeleteGroupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteGroupRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteGroupRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteGroupRequest));
  DeleteGroupResponse_descriptor_ = file->message_type(61);
  static const int DeleteGroupResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteGroupResponse, result_),
  };
  DeleteGroupResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteGroupResponse_descriptor_,
      DeleteGroupResponse::default_instance_,
      DeleteGroupResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteGroupResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteGroupResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteGroupResponse));
  UpdateGroupRemarkRequest_descriptor_ = file->message_type(62);
  static const int UpdateGroupRemarkRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupRemarkRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupRemarkRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupRemarkRequest, group_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupRemarkRequest, remark_),
  };
  UpdateGroupRemarkRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateGroupRemarkRequest_descriptor_,
      UpdateGroupRemarkRequest::default_instance_,
      UpdateGroupRemarkRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupRemarkRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupRemarkRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateGroupRemarkRequest));
  UpdateGroupInfoRequest_descriptor_ = file->message_type(63);
  static const int UpdateGroupInfoRequest_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupInfoRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupInfoRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupInfoRequest, group_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupInfoRequest, remark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupInfoRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupInfoRequest, group_intro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupInfoRequest, group_notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupInfoRequest, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupInfoRequest, avatar_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupInfoRequest, sub_type_),
  };
  UpdateGroupInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateGroupInfoRequest_descriptor_,
      UpdateGroupInfoRequest::default_instance_,
      UpdateGroupInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateGroupInfoRequest));
  UpdateGroupOptionRequest_descriptor_ = file->message_type(64);
  static const int UpdateGroupOptionRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupOptionRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupOptionRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupOptionRequest, verify_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupOptionRequest, channel_id_),
  };
  UpdateGroupOptionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateGroupOptionRequest_descriptor_,
      UpdateGroupOptionRequest::default_instance_,
      UpdateGroupOptionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupOptionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupOptionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateGroupOptionRequest));
  GetGroupOptionRequest_descriptor_ = file->message_type(65);
  static const int GetGroupOptionRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupOptionRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupOptionRequest, group_id_),
  };
  GetGroupOptionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGroupOptionRequest_descriptor_,
      GetGroupOptionRequest::default_instance_,
      GetGroupOptionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupOptionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupOptionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGroupOptionRequest));
  GetGroupOptionResponse_descriptor_ = file->message_type(66);
  static const int GetGroupOptionResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupOptionResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupOptionResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupOptionResponse, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupOptionResponse, verify_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupOptionResponse, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupOptionResponse, msg_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupOptionResponse, talk_mode_),
  };
  GetGroupOptionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGroupOptionResponse_descriptor_,
      GetGroupOptionResponse::default_instance_,
      GetGroupOptionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupOptionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupOptionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGroupOptionResponse));
  UpdateGroupNotice_descriptor_ = file->message_type(67);
  static const int UpdateGroupNotice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupNotice, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupNotice, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupNotice, notice_),
  };
  UpdateGroupNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateGroupNotice_descriptor_,
      UpdateGroupNotice::default_instance_,
      UpdateGroupNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateGroupNotice));
  GetGroupInfoRequest_descriptor_ = file->message_type(68);
  static const int GetGroupInfoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupInfoRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupInfoRequest, group_id_),
  };
  GetGroupInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGroupInfoRequest_descriptor_,
      GetGroupInfoRequest::default_instance_,
      GetGroupInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGroupInfoRequest));
  GetGroupInfoResponse_descriptor_ = file->message_type(69);
  static const int GetGroupInfoResponse_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupInfoResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupInfoResponse, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupInfoResponse, group_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupInfoResponse, remark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupInfoResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupInfoResponse, group_intro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupInfoResponse, group_notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupInfoResponse, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupInfoResponse, sub_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupInfoResponse, group_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupInfoResponse, avatar_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupInfoResponse, owner_id_),
  };
  GetGroupInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGroupInfoResponse_descriptor_,
      GetGroupInfoResponse::default_instance_,
      GetGroupInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGroupInfoResponse));
  UpdateGroupNoticeNotify_descriptor_ = file->message_type(70);
  static const int UpdateGroupNoticeNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupNoticeNotify, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupNoticeNotify, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupNoticeNotify, notice_),
  };
  UpdateGroupNoticeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateGroupNoticeNotify_descriptor_,
      UpdateGroupNoticeNotify::default_instance_,
      UpdateGroupNoticeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupNoticeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupNoticeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateGroupNoticeNotify));
  UpdateUserInfoRequest_descriptor_ = file->message_type(71);
  static const int UpdateUserInfoRequest_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoRequest, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoRequest, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoRequest, mobile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoRequest, birthday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoRequest, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoRequest, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoRequest, constellation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoRequest, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoRequest, like_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoRequest, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoRequest, personal_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoRequest, real_name_),
  };
  UpdateUserInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateUserInfoRequest_descriptor_,
      UpdateUserInfoRequest::default_instance_,
      UpdateUserInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateUserInfoRequest));
  UpdateUserMoodRequest_descriptor_ = file->message_type(72);
  static const int UpdateUserMoodRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserMoodRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserMoodRequest, mood_),
  };
  UpdateUserMoodRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateUserMoodRequest_descriptor_,
      UpdateUserMoodRequest::default_instance_,
      UpdateUserMoodRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserMoodRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserMoodRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateUserMoodRequest));
  UpdateUserNickNameRequest_descriptor_ = file->message_type(73);
  static const int UpdateUserNickNameRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserNickNameRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserNickNameRequest, nick_name_),
  };
  UpdateUserNickNameRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateUserNickNameRequest_descriptor_,
      UpdateUserNickNameRequest::default_instance_,
      UpdateUserNickNameRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserNickNameRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserNickNameRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateUserNickNameRequest));
  UpdateAvatarRequest_descriptor_ = file->message_type(74);
  static const int UpdateAvatarRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAvatarRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAvatarRequest, avatar_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAvatarRequest, avatar_),
  };
  UpdateAvatarRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateAvatarRequest_descriptor_,
      UpdateAvatarRequest::default_instance_,
      UpdateAvatarRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAvatarRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAvatarRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateAvatarRequest));
  KickUserOffline_descriptor_ = file->message_type(75);
  static const int KickUserOffline_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickUserOffline, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickUserOffline, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickUserOffline, port_),
  };
  KickUserOffline_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KickUserOffline_descriptor_,
      KickUserOffline::default_instance_,
      KickUserOffline_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickUserOffline, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickUserOffline, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KickUserOffline));
  GetUserOnlineStateRequest_descriptor_ = file->message_type(76);
  static const int GetUserOnlineStateRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserOnlineStateRequest, user_id_),
  };
  GetUserOnlineStateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUserOnlineStateRequest_descriptor_,
      GetUserOnlineStateRequest::default_instance_,
      GetUserOnlineStateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserOnlineStateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserOnlineStateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUserOnlineStateRequest));
  UserOnlineStateInfo_descriptor_ = file->message_type(77);
  static const int UserOnlineStateInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOnlineStateInfo, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOnlineStateInfo, online_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOnlineStateInfo, mts_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOnlineStateInfo, mts_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOnlineStateInfo, has_camera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOnlineStateInfo, terminal_type_),
  };
  UserOnlineStateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserOnlineStateInfo_descriptor_,
      UserOnlineStateInfo::default_instance_,
      UserOnlineStateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOnlineStateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOnlineStateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserOnlineStateInfo));
  GetUserOnlineStateResponse_descriptor_ = file->message_type(78);
  static const int GetUserOnlineStateResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserOnlineStateResponse, user_info_),
  };
  GetUserOnlineStateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUserOnlineStateResponse_descriptor_,
      GetUserOnlineStateResponse::default_instance_,
      GetUserOnlineStateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserOnlineStateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserOnlineStateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUserOnlineStateResponse));
  GetGroupUserCardRequest_descriptor_ = file->message_type(79);
  static const int GetGroupUserCardRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserCardRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserCardRequest, group_id_),
  };
  GetGroupUserCardRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGroupUserCardRequest_descriptor_,
      GetGroupUserCardRequest::default_instance_,
      GetGroupUserCardRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserCardRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserCardRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGroupUserCardRequest));
  GetGroupUserCardResponse_descriptor_ = file->message_type(80);
  static const int GetGroupUserCardResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserCardResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserCardResponse, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserCardResponse, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserCardResponse, tel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserCardResponse, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserCardResponse, remark_),
  };
  GetGroupUserCardResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGroupUserCardResponse_descriptor_,
      GetGroupUserCardResponse::default_instance_,
      GetGroupUserCardResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserCardResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUserCardResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGroupUserCardResponse));
  UpdateGroupUserCardRequest_descriptor_ = file->message_type(81);
  static const int UpdateGroupUserCardRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupUserCardRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupUserCardRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupUserCardRequest, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupUserCardRequest, tel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupUserCardRequest, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupUserCardRequest, remark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupUserCardRequest, group_user_id_),
  };
  UpdateGroupUserCardRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateGroupUserCardRequest_descriptor_,
      UpdateGroupUserCardRequest::default_instance_,
      UpdateGroupUserCardRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupUserCardRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGroupUserCardRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateGroupUserCardRequest));
  SetGroupMsgModeRequest_descriptor_ = file->message_type(82);
  static const int SetGroupMsgModeRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGroupMsgModeRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGroupMsgModeRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGroupMsgModeRequest, msg_mode_),
  };
  SetGroupMsgModeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetGroupMsgModeRequest_descriptor_,
      SetGroupMsgModeRequest::default_instance_,
      SetGroupMsgModeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGroupMsgModeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGroupMsgModeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetGroupMsgModeRequest));
  SetGroupTalkModeRequest_descriptor_ = file->message_type(83);
  static const int SetGroupTalkModeRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGroupTalkModeRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGroupTalkModeRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGroupTalkModeRequest, talk_mode_),
  };
  SetGroupTalkModeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetGroupTalkModeRequest_descriptor_,
      SetGroupTalkModeRequest::default_instance_,
      SetGroupTalkModeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGroupTalkModeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGroupTalkModeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetGroupTalkModeRequest));
  GetFriendVerifyInfoRequest_descriptor_ = file->message_type(84);
  static const int GetFriendVerifyInfoRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendVerifyInfoRequest, user_id_),
  };
  GetFriendVerifyInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFriendVerifyInfoRequest_descriptor_,
      GetFriendVerifyInfoRequest::default_instance_,
      GetFriendVerifyInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendVerifyInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendVerifyInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFriendVerifyInfoRequest));
  GetFriendVerifyInfoResponse_descriptor_ = file->message_type(85);
  static const int GetFriendVerifyInfoResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendVerifyInfoResponse, verify_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendVerifyInfoResponse, question_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendVerifyInfoResponse, answer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendVerifyInfoResponse, result_),
  };
  GetFriendVerifyInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFriendVerifyInfoResponse_descriptor_,
      GetFriendVerifyInfoResponse::default_instance_,
      GetFriendVerifyInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendVerifyInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendVerifyInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFriendVerifyInfoResponse));
  GetGroupManagerListRequest_descriptor_ = file->message_type(86);
  static const int GetGroupManagerListRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupManagerListRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupManagerListRequest, group_id_),
  };
  GetGroupManagerListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGroupManagerListRequest_descriptor_,
      GetGroupManagerListRequest::default_instance_,
      GetGroupManagerListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupManagerListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupManagerListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGroupManagerListRequest));
  GetGroupManagerListResponse_descriptor_ = file->message_type(87);
  static const int GetGroupManagerListResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupManagerListResponse, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupManagerListResponse, sum_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupManagerListResponse, group_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupManagerListResponse, result_),
  };
  GetGroupManagerListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGroupManagerListResponse_descriptor_,
      GetGroupManagerListResponse::default_instance_,
      GetGroupManagerListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupManagerListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupManagerListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGroupManagerListResponse));
  DeleteHistoryMessageRequest_descriptor_ = file->message_type(88);
  static const int DeleteHistoryMessageRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteHistoryMessageRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteHistoryMessageRequest, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteHistoryMessageRequest, last_time_),
  };
  DeleteHistoryMessageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteHistoryMessageRequest_descriptor_,
      DeleteHistoryMessageRequest::default_instance_,
      DeleteHistoryMessageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteHistoryMessageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteHistoryMessageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteHistoryMessageRequest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_terminal_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Result_descriptor_, &Result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRequest_descriptor_, &LoginRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Redirect_descriptor_, &Redirect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginResponse_descriptor_, &LoginResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeepaliveRequest_descriptor_, &KeepaliveRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogoutRequest_descriptor_, &LogoutRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogoutResponse_descriptor_, &LogoutResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFriendListRequest_descriptor_, &GetFriendListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFriendListResponse_descriptor_, &GetFriendListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFriendBasicInfoRequest_descriptor_, &GetFriendBasicInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendBasicInfo_descriptor_, &FriendBasicInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFriendBasicInfoResponse_descriptor_, &GetFriendBasicInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUserInfoRequest_descriptor_, &GetUserInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUserInfoResponse_descriptor_, &GetUserInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeOnlineStateRequest_descriptor_, &ChangeOnlineStateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendOnlineStateNotify_descriptor_, &FriendOnlineStateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendsOnlineStateNotify_descriptor_, &FriendsOnlineStateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGroupListRequest_descriptor_, &GetGroupListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupListItem_descriptor_, &GroupListItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGroupListResponse_descriptor_, &GetGroupListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateGroupRequest_descriptor_, &CreateGroupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateGroupResponse_descriptor_, &CreateGroupResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinGroupRequest_descriptor_, &JoinGroupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinGroupResponse_descriptor_, &JoinGroupResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinGroupVerifyRequest_descriptor_, &JoinGroupVerifyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinGroupVerifyResponse_descriptor_, &JoinGroupVerifyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinGroupConfirmRequest_descriptor_, &JoinGroupConfirmRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinGroupNotify_descriptor_, &JoinGroupNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExitGroupRequest_descriptor_, &ExitGroupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExitGroupResponse_descriptor_, &ExitGroupResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGroupUserListRequest_descriptor_, &GetGroupUserListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGroupUserListResponse_descriptor_, &GetGroupUserListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGroupUserInfoRequest_descriptor_, &GetGroupUserInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupUserInfo_descriptor_, &GroupUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGroupUserInfoResponse_descriptor_, &GetGroupUserInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchGroupUserListRequest_descriptor_, &SearchGroupUserListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchGroupUserListResponse_descriptor_, &SearchGroupUserListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddFriendRequest_descriptor_, &AddFriendRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddFriendResponse_descriptor_, &AddFriendResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddFriendVerifyRequest_descriptor_, &AddFriendVerifyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddFriendVerifyResponse_descriptor_, &AddFriendVerifyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddFriendConfirmRequest_descriptor_, &AddFriendConfirmRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddFriendNotify_descriptor_, &AddFriendNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteFriendRequest_descriptor_, &DeleteFriendRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteFriendNotify_descriptor_, &DeleteFriendNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateFriendBranchRequest_descriptor_, &UpdateFriendBranchRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddBranchRequest_descriptor_, &AddBranchRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddBranchResponse_descriptor_, &AddBranchResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteBranchRequest_descriptor_, &DeleteBranchRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateBranchNameRequest_descriptor_, &UpdateBranchNameRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KickoutGroupUserRequest_descriptor_, &KickoutGroupUserRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetGroupManagerRequest_descriptor_, &SetGroupManagerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateFriendRemarkRequest_descriptor_, &UpdateFriendRemarkRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBranchListRequest_descriptor_, &GetBranchListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserIdRemarkItem_descriptor_, &UserIdRemarkItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BranchListItem_descriptor_, &BranchListItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBranchListResponse_descriptor_, &GetBranchListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetFriendOptionRequest_descriptor_, &SetFriendOptionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupManagerVerifyRequest_descriptor_, &GroupManagerVerifyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupManagerVerifyResponse_descriptor_, &GroupManagerVerifyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteGroupRequest_descriptor_, &DeleteGroupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteGroupResponse_descriptor_, &DeleteGroupResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateGroupRemarkRequest_descriptor_, &UpdateGroupRemarkRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateGroupInfoRequest_descriptor_, &UpdateGroupInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateGroupOptionRequest_descriptor_, &UpdateGroupOptionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGroupOptionRequest_descriptor_, &GetGroupOptionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGroupOptionResponse_descriptor_, &GetGroupOptionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateGroupNotice_descriptor_, &UpdateGroupNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGroupInfoRequest_descriptor_, &GetGroupInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGroupInfoResponse_descriptor_, &GetGroupInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateGroupNoticeNotify_descriptor_, &UpdateGroupNoticeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateUserInfoRequest_descriptor_, &UpdateUserInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateUserMoodRequest_descriptor_, &UpdateUserMoodRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateUserNickNameRequest_descriptor_, &UpdateUserNickNameRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateAvatarRequest_descriptor_, &UpdateAvatarRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KickUserOffline_descriptor_, &KickUserOffline::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUserOnlineStateRequest_descriptor_, &GetUserOnlineStateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserOnlineStateInfo_descriptor_, &UserOnlineStateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUserOnlineStateResponse_descriptor_, &GetUserOnlineStateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGroupUserCardRequest_descriptor_, &GetGroupUserCardRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGroupUserCardResponse_descriptor_, &GetGroupUserCardResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateGroupUserCardRequest_descriptor_, &UpdateGroupUserCardRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetGroupMsgModeRequest_descriptor_, &SetGroupMsgModeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetGroupTalkModeRequest_descriptor_, &SetGroupTalkModeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFriendVerifyInfoRequest_descriptor_, &GetFriendVerifyInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFriendVerifyInfoResponse_descriptor_, &GetFriendVerifyInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGroupManagerListRequest_descriptor_, &GetGroupManagerListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGroupManagerListResponse_descriptor_, &GetGroupManagerListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteHistoryMessageRequest_descriptor_, &DeleteHistoryMessageRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_terminal_5fprotocol_2eproto() {
  delete Result::default_instance_;
  delete Result_reflection_;
  delete LoginRequest::default_instance_;
  delete LoginRequest_reflection_;
  delete Redirect::default_instance_;
  delete Redirect_reflection_;
  delete LoginResponse::default_instance_;
  delete LoginResponse_reflection_;
  delete KeepaliveRequest::default_instance_;
  delete KeepaliveRequest_reflection_;
  delete LogoutRequest::default_instance_;
  delete LogoutRequest_reflection_;
  delete LogoutResponse::default_instance_;
  delete LogoutResponse_reflection_;
  delete GetFriendListRequest::default_instance_;
  delete GetFriendListRequest_reflection_;
  delete GetFriendListResponse::default_instance_;
  delete GetFriendListResponse_reflection_;
  delete GetFriendBasicInfoRequest::default_instance_;
  delete GetFriendBasicInfoRequest_reflection_;
  delete FriendBasicInfo::default_instance_;
  delete FriendBasicInfo_reflection_;
  delete GetFriendBasicInfoResponse::default_instance_;
  delete GetFriendBasicInfoResponse_reflection_;
  delete GetUserInfoRequest::default_instance_;
  delete GetUserInfoRequest_reflection_;
  delete GetUserInfoResponse::default_instance_;
  delete GetUserInfoResponse_reflection_;
  delete ChangeOnlineStateRequest::default_instance_;
  delete ChangeOnlineStateRequest_reflection_;
  delete FriendOnlineStateNotify::default_instance_;
  delete FriendOnlineStateNotify_reflection_;
  delete FriendsOnlineStateNotify::default_instance_;
  delete FriendsOnlineStateNotify_reflection_;
  delete GetGroupListRequest::default_instance_;
  delete GetGroupListRequest_reflection_;
  delete GroupListItem::default_instance_;
  delete GroupListItem_reflection_;
  delete GetGroupListResponse::default_instance_;
  delete GetGroupListResponse_reflection_;
  delete CreateGroupRequest::default_instance_;
  delete CreateGroupRequest_reflection_;
  delete CreateGroupResponse::default_instance_;
  delete CreateGroupResponse_reflection_;
  delete JoinGroupRequest::default_instance_;
  delete JoinGroupRequest_reflection_;
  delete JoinGroupResponse::default_instance_;
  delete JoinGroupResponse_reflection_;
  delete JoinGroupVerifyRequest::default_instance_;
  delete JoinGroupVerifyRequest_reflection_;
  delete JoinGroupVerifyResponse::default_instance_;
  delete JoinGroupVerifyResponse_reflection_;
  delete JoinGroupConfirmRequest::default_instance_;
  delete JoinGroupConfirmRequest_reflection_;
  delete JoinGroupNotify::default_instance_;
  delete JoinGroupNotify_reflection_;
  delete ExitGroupRequest::default_instance_;
  delete ExitGroupRequest_reflection_;
  delete ExitGroupResponse::default_instance_;
  delete ExitGroupResponse_reflection_;
  delete GetGroupUserListRequest::default_instance_;
  delete GetGroupUserListRequest_reflection_;
  delete GetGroupUserListResponse::default_instance_;
  delete GetGroupUserListResponse_reflection_;
  delete GetGroupUserInfoRequest::default_instance_;
  delete GetGroupUserInfoRequest_reflection_;
  delete GroupUserInfo::default_instance_;
  delete GroupUserInfo_reflection_;
  delete GetGroupUserInfoResponse::default_instance_;
  delete GetGroupUserInfoResponse_reflection_;
  delete SearchGroupUserListRequest::default_instance_;
  delete SearchGroupUserListRequest_reflection_;
  delete SearchGroupUserListResponse::default_instance_;
  delete SearchGroupUserListResponse_reflection_;
  delete AddFriendRequest::default_instance_;
  delete AddFriendRequest_reflection_;
  delete AddFriendResponse::default_instance_;
  delete AddFriendResponse_reflection_;
  delete AddFriendVerifyRequest::default_instance_;
  delete AddFriendVerifyRequest_reflection_;
  delete AddFriendVerifyResponse::default_instance_;
  delete AddFriendVerifyResponse_reflection_;
  delete AddFriendConfirmRequest::default_instance_;
  delete AddFriendConfirmRequest_reflection_;
  delete AddFriendNotify::default_instance_;
  delete AddFriendNotify_reflection_;
  delete DeleteFriendRequest::default_instance_;
  delete DeleteFriendRequest_reflection_;
  delete DeleteFriendNotify::default_instance_;
  delete DeleteFriendNotify_reflection_;
  delete UpdateFriendBranchRequest::default_instance_;
  delete UpdateFriendBranchRequest_reflection_;
  delete AddBranchRequest::default_instance_;
  delete AddBranchRequest_reflection_;
  delete AddBranchResponse::default_instance_;
  delete AddBranchResponse_reflection_;
  delete DeleteBranchRequest::default_instance_;
  delete DeleteBranchRequest_reflection_;
  delete UpdateBranchNameRequest::default_instance_;
  delete UpdateBranchNameRequest_reflection_;
  delete KickoutGroupUserRequest::default_instance_;
  delete KickoutGroupUserRequest_reflection_;
  delete SetGroupManagerRequest::default_instance_;
  delete SetGroupManagerRequest_reflection_;
  delete UpdateFriendRemarkRequest::default_instance_;
  delete UpdateFriendRemarkRequest_reflection_;
  delete GetBranchListRequest::default_instance_;
  delete GetBranchListRequest_reflection_;
  delete UserIdRemarkItem::default_instance_;
  delete UserIdRemarkItem_reflection_;
  delete BranchListItem::default_instance_;
  delete BranchListItem_reflection_;
  delete GetBranchListResponse::default_instance_;
  delete GetBranchListResponse_reflection_;
  delete SetFriendOptionRequest::default_instance_;
  delete SetFriendOptionRequest_reflection_;
  delete GroupManagerVerifyRequest::default_instance_;
  delete GroupManagerVerifyRequest_reflection_;
  delete GroupManagerVerifyResponse::default_instance_;
  delete GroupManagerVerifyResponse_reflection_;
  delete DeleteGroupRequest::default_instance_;
  delete DeleteGroupRequest_reflection_;
  delete DeleteGroupResponse::default_instance_;
  delete DeleteGroupResponse_reflection_;
  delete UpdateGroupRemarkRequest::default_instance_;
  delete UpdateGroupRemarkRequest_reflection_;
  delete UpdateGroupInfoRequest::default_instance_;
  delete UpdateGroupInfoRequest_reflection_;
  delete UpdateGroupOptionRequest::default_instance_;
  delete UpdateGroupOptionRequest_reflection_;
  delete GetGroupOptionRequest::default_instance_;
  delete GetGroupOptionRequest_reflection_;
  delete GetGroupOptionResponse::default_instance_;
  delete GetGroupOptionResponse_reflection_;
  delete UpdateGroupNotice::default_instance_;
  delete UpdateGroupNotice_reflection_;
  delete GetGroupInfoRequest::default_instance_;
  delete GetGroupInfoRequest_reflection_;
  delete GetGroupInfoResponse::default_instance_;
  delete GetGroupInfoResponse_reflection_;
  delete UpdateGroupNoticeNotify::default_instance_;
  delete UpdateGroupNoticeNotify_reflection_;
  delete UpdateUserInfoRequest::default_instance_;
  delete UpdateUserInfoRequest_reflection_;
  delete UpdateUserMoodRequest::default_instance_;
  delete UpdateUserMoodRequest_reflection_;
  delete UpdateUserNickNameRequest::default_instance_;
  delete UpdateUserNickNameRequest_reflection_;
  delete UpdateAvatarRequest::default_instance_;
  delete UpdateAvatarRequest_reflection_;
  delete KickUserOffline::default_instance_;
  delete KickUserOffline_reflection_;
  delete GetUserOnlineStateRequest::default_instance_;
  delete GetUserOnlineStateRequest_reflection_;
  delete UserOnlineStateInfo::default_instance_;
  delete UserOnlineStateInfo_reflection_;
  delete GetUserOnlineStateResponse::default_instance_;
  delete GetUserOnlineStateResponse_reflection_;
  delete GetGroupUserCardRequest::default_instance_;
  delete GetGroupUserCardRequest_reflection_;
  delete GetGroupUserCardResponse::default_instance_;
  delete GetGroupUserCardResponse_reflection_;
  delete UpdateGroupUserCardRequest::default_instance_;
  delete UpdateGroupUserCardRequest_reflection_;
  delete SetGroupMsgModeRequest::default_instance_;
  delete SetGroupMsgModeRequest_reflection_;
  delete SetGroupTalkModeRequest::default_instance_;
  delete SetGroupTalkModeRequest_reflection_;
  delete GetFriendVerifyInfoRequest::default_instance_;
  delete GetFriendVerifyInfoRequest_reflection_;
  delete GetFriendVerifyInfoResponse::default_instance_;
  delete GetFriendVerifyInfoResponse_reflection_;
  delete GetGroupManagerListRequest::default_instance_;
  delete GetGroupManagerListRequest_reflection_;
  delete GetGroupManagerListResponse::default_instance_;
  delete GetGroupManagerListResponse_reflection_;
  delete DeleteHistoryMessageRequest::default_instance_;
  delete DeleteHistoryMessageRequest_reflection_;
}

void protobuf_AddDesc_terminal_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027terminal_protocol.proto\022\020TerminalProto"
    "col\"#\n\006Result\022\014\n\004code\030\001 \002(\r\022\013\n\003msg\030\002 \002(\t"
    "\"\233\001\n\014LoginRequest\022\022\n\nlogin_name\030\001 \002(\t\022\020\n"
    "\010password\030\002 \002(\t\022\024\n\014online_state\030\003 \002(\r\022\025\n"
    "\rterminal_type\030\004 \002(\r\022\020\n\010mac_addr\030\005 \001(\t\022\022"
    "\n\nhas_camera\030\006 \001(\r\022\022\n\nlogin_type\030\007 \001(\r\"B"
    "\n\010Redirect\022\021\n\tserver_ip\030\001 \002(\t\022\023\n\013server_"
    "port\030\002 \002(\r\022\016\n\006app_id\030\003 \001(\r\"\304\001\n\rLoginResp"
    "onse\022(\n\006result\030\001 \002(\0132\030.TerminalProtocol."
    "Result\022\017\n\007user_id\030\002 \001(\004\022\021\n\ttt_number\030\003 \001"
    "(\004\022\021\n\tnick_name\030\004 \001(\t\022\021\n\tavatar_id\030\005 \001(\t"
    "\022\016\n\006avatar\030\006 \001(\t\022\r\n\005token\030\007 \001(\t\022\016\n\006mts_i"
    "p\030\010 \001(\t\022\020\n\010mts_port\030\t \001(\r\"#\n\020KeepaliveRe"
    "quest\022\017\n\007user_id\030\001 \002(\004\"7\n\rLogoutRequest\022"
    "\017\n\007user_id\030\001 \002(\004\022\025\n\rterminal_type\030\002 \002(\r\""
    "K\n\016LogoutResponse\022(\n\006result\030\001 \002(\0132\030.Term"
    "inalProtocol.Result\022\017\n\007user_id\030\002 \001(\004\";\n\024"
    "GetFriendListRequest\022\017\n\007user_id\030\001 \002(\004\022\022\n"
    "\nversion_id\030\002 \001(\004\"O\n\025GetFriendListRespon"
    "se\022\017\n\007user_id\030\001 \002(\004\022\022\n\nversion_id\030\002 \001(\004\022"
    "\021\n\tfriend_id\030\003 \003(\004\"\?\n\031GetFriendBasicInfo"
    "Request\022\017\n\007user_id\030\001 \002(\004\022\021\n\tfriend_id\030\002 "
    "\003(\004\"u\n\017FriendBasicInfo\022\017\n\007user_id\030\001 \002(\004\022"
    "\021\n\tnick_name\030\002 \001(\t\022\021\n\tavatar_id\030\005 \001(\r\022\016\n"
    "\006avatar\030\006 \001(\t\022\014\n\004sign\030\007 \001(\t\022\r\n\005level\030\010 \001"
    "(\r\"e\n\032GetFriendBasicInfoResponse\022\017\n\007user"
    "_id\030\001 \001(\004\0226\n\013friend_info\030\002 \003(\0132!.Termina"
    "lProtocol.FriendBasicInfo\"8\n\022GetUserInfo"
    "Request\022\017\n\007user_id\030\001 \002(\004\022\021\n\tfriend_id\030\002 "
    "\002(\004\"\274\002\n\023GetUserInfoResponse\022\017\n\007user_id\030\001"
    " \002(\004\022\021\n\ttt_number\030\002 \001(\004\022\021\n\tuser_name\030\003 \001"
    "(\t\022\021\n\tnick_name\030\004 \001(\t\022\013\n\003sex\030\005 \001(\r\022\016\n\006mo"
    "bile\030\006 \001(\t\022\020\n\010birthday\030\007 \001(\t\022\r\n\005email\030\010 "
    "\001(\t\022\022\n\nuser_grade\030\t \001(\r\022\013\n\003age\030\n \001(\r\022\025\n\r"
    "constellation\030\013 \001(\r\022\014\n\004sign\030\014 \001(\t\022\014\n\004lik"
    "e\030\r \001(\t\022\014\n\004city\030\016 \001(\t\022\025\n\rpersonal_desc\030\017"
    " \001(\t\022\021\n\treal_name\030\020 \001(\t\022\021\n\tfriend_id\030\021 \001"
    "(\004\"X\n\030ChangeOnlineStateRequest\022\017\n\007user_i"
    "d\030\001 \002(\004\022\025\n\rterminal_type\030\002 \002(\r\022\024\n\014online"
    "_state\030\003 \002(\r\"y\n\027FriendOnlineStateNotify\022"
    "\017\n\007user_id\030\001 \002(\004\022\025\n\rterminal_type\030\002 \002(\r\022"
    "\024\n\014online_state\030\003 \002(\r\022\016\n\006mts_ip\030\004 \001(\t\022\020\n"
    "\010mts_port\030\005 \001(\r\"\216\001\n\030FriendsOnlineStateNo"
    "tify\022\017\n\007user_id\030\001 \002(\004\022\017\n\007sum_num\030\002 \002(\r\022\017"
    "\n\007cur_num\030\003 \002(\r\022\?\n\014friend_state\030\004 \003(\0132)."
    "TerminalProtocol.FriendOnlineStateNotify"
    "\"&\n\023GetGroupListRequest\022\017\n\007user_id\030\001 \002(\004"
    "\"h\n\rGroupListItem\022\020\n\010group_id\030\001 \002(\004\022\022\n\ng"
    "roup_name\030\002 \001(\t\022\016\n\006remark\030\003 \001(\t\022\021\n\tavata"
    "r_id\030\004 \001(\r\022\016\n\006avatar\030\005 \001(\t\"\\\n\024GetGroupLi"
    "stResponse\022\017\n\007user_id\030\001 \002(\004\0223\n\ngroup_ite"
    "m\030\002 \003(\0132\037.TerminalProtocol.GroupListItem"
    "\"\304\001\n\022CreateGroupRequest\022\017\n\007user_id\030\001 \002(\004"
    "\022\022\n\ngroup_name\030\002 \002(\t\022\022\n\ngroup_type\030\003 \001(\r"
    "\022\022\n\ngroup_icon\030\004 \001(\t\022\023\n\013verify_type\030\005 \001("
    "\r\022\023\n\013group_intro\030\006 \001(\t\022\022\n\ngroup_sign\030\007 \001"
    "(\t\022\021\n\tavatar_id\030\010 \001(\r\022\020\n\010sub_type\030\t \001(\r\""
    "x\n\023CreateGroupResponse\022(\n\006result\030\001 \002(\0132\030"
    ".TerminalProtocol.Result\022\017\n\007user_id\030\002 \001("
    "\004\022\020\n\010group_id\030\003 \001(\004\022\024\n\014group_number\030\004 \001("
    "\r\"5\n\020JoinGroupRequest\022\017\n\007user_id\030\001 \002(\004\022\020"
    "\n\010group_id\030\002 \002(\004\"K\n\021JoinGroupResponse\022\017\n"
    "\007user_id\030\001 \002(\004\022\020\n\010group_id\030\002 \002(\004\022\023\n\013veri"
    "fy_type\030\003 \001(\r\"~\n\026JoinGroupVerifyRequest\022"
    "\017\n\007user_id\030\001 \002(\004\022\020\n\010group_id\030\002 \002(\004\022\023\n\013ve"
    "rify_type\030\003 \001(\r\022\022\n\nverify_msg\030\004 \002(\t\022\030\n\020g"
    "roup_manager_id\030\005 \001(\004\"C\n\027JoinGroupVerify"
    "Response\022(\n\006result\030\001 \002(\0132\030.TerminalProto"
    "col.Result\"}\n\027JoinGroupConfirmRequest\022(\n"
    "\006result\030\001 \002(\0132\030.TerminalProtocol.Result\022"
    "\017\n\007user_id\030\002 \002(\004\022\025\n\rgroup_user_id\030\003 \002(\004\022"
    "\020\n\010group_id\030\004 \001(\004\"x\n\017JoinGroupNotify\022(\n\006"
    "result\030\001 \002(\0132\030.TerminalProtocol.Result\022\017"
    "\n\007user_id\030\002 \002(\004\022\020\n\010group_id\030\003 \002(\004\022\030\n\020gro"
    "up_manager_id\030\004 \001(\004\"5\n\020ExitGroupRequest\022"
    "\017\n\007user_id\030\001 \002(\004\022\020\n\010group_id\030\002 \002(\004\"`\n\021Ex"
    "itGroupResponse\022\017\n\007user_id\030\001 \002(\004\022\020\n\010grou"
    "p_id\030\002 \002(\004\022(\n\006result\030\003 \002(\0132\030.TerminalPro"
    "tocol.Result\"<\n\027GetGroupUserListRequest\022"
    "\017\n\007user_id\030\001 \002(\004\022\020\n\010group_id\030\002 \002(\004\"+\n\030Ge"
    "tGroupUserListResponse\022\017\n\007user_id\030\001 \003(\004\""
    "<\n\027GetGroupUserInfoRequest\022\020\n\010group_id\030\001"
    " \002(\004\022\017\n\007user_id\030\002 \003(\004\"z\n\rGroupUserInfo\022\017"
    "\n\007user_id\030\001 \002(\004\022\021\n\tnick_name\030\002 \001(\t\022\024\n\014on"
    "line_state\030\003 \001(\r\022\021\n\tavatar_id\030\004 \001(\r\022\016\n\006a"
    "vatar\030\005 \001(\t\022\014\n\004role\030\006 \001(\r\"`\n\030GetGroupUse"
    "rInfoResponse\022\020\n\010group_id\030\001 \001(\004\0222\n\tuser_"
    "info\030\002 \003(\0132\037.TerminalProtocol.GroupUserI"
    "nfo\"E\n\032SearchGroupUserListRequest\022\020\n\010gro"
    "up_id\030\001 \002(\004\022\025\n\rsearch_string\030\002 \002(\t\"c\n\033Se"
    "archGroupUserListResponse\022\020\n\010group_id\030\001 "
    "\002(\004\0222\n\tlist_item\030\002 \003(\0132\037.TerminalProtoco"
    "l.GroupUserInfo\"6\n\020AddFriendRequest\022\017\n\007u"
    "ser_id\030\001 \002(\004\022\021\n\tfriend_id\030\002 \002(\004\"\?\n\021AddFr"
    "iendResponse\022\023\n\013verify_type\030\001 \002(\r\022\025\n\rque"
    "stion_type\030\002 \001(\r\"u\n\026AddFriendVerifyReque"
    "st\022\017\n\007user_id\030\001 \002(\004\022\021\n\tfriend_id\030\002 \002(\004\022\014"
    "\n\004type\030\003 \002(\r\022\025\n\rquestion_type\030\004 \001(\r\022\022\n\nv"
    "erify_msg\030\005 \001(\t\"_\n\027AddFriendVerifyRespon"
    "se\022\017\n\007user_id\030\001 \002(\004\022\021\n\tfriend_id\030\002 \002(\004\022\020"
    "\n\010is_allow\030\003 \002(\r\022\016\n\006reason\030\004 \001(\t\"g\n\027AddF"
    "riendConfirmRequest\022(\n\006result\030\001 \002(\0132\030.Te"
    "rminalProtocol.Result\022\017\n\007user_id\030\002 \002(\004\022\021"
    "\n\tfriend_id\030\003 \002(\004\"_\n\017AddFriendNotify\022(\n\006"
    "result\030\001 \002(\0132\030.TerminalProtocol.Result\022\017"
    "\n\007user_id\030\002 \002(\004\022\021\n\tfriend_id\030\003 \002(\004\"9\n\023De"
    "leteFriendRequest\022\017\n\007user_id\030\001 \002(\004\022\021\n\tfr"
    "iend_id\030\002 \002(\004\"8\n\022DeleteFriendNotify\022\017\n\007u"
    "ser_id\030\001 \002(\004\022\021\n\tfriend_id\030\002 \002(\004\"R\n\031Updat"
    "eFriendBranchRequest\022\017\n\007user_id\030\001 \002(\004\022\021\n"
    "\tfriend_id\030\002 \002(\004\022\021\n\tbranch_id\030\003 \002(\004\"M\n\020A"
    "ddBranchRequest\022\017\n\007user_id\030\001 \002(\004\022\023\n\013bran"
    "ch_name\030\002 \001(\t\022\023\n\013branch_sort\030\003 \001(\r\"a\n\021Ad"
    "dBranchResponse\022\017\n\007user_id\030\001 \002(\004\022\021\n\tbran"
    "ch_id\030\002 \001(\004\022\023\n\013branch_name\030\003 \001(\t\022\023\n\013bran"
    "ch_sort\030\004 \001(\r\"9\n\023DeleteBranchRequest\022\017\n\007"
    "user_id\030\001 \002(\004\022\021\n\tbranch_id\030\002 \002(\004\"g\n\027Upda"
    "teBranchNameRequest\022\017\n\007user_id\030\001 \002(\004\022\021\n\t"
    "branch_id\030\002 \001(\004\022\023\n\013branch_name\030\003 \001(\t\022\023\n\013"
    "branch_sort\030\004 \001(\r\"S\n\027KickoutGroupUserReq"
    "uest\022\017\n\007user_id\030\001 \002(\004\022\025\n\rgroup_user_id\030\002"
    " \001(\004\022\020\n\010group_id\030\003 \001(\004\"i\n\026SetGroupManage"
    "rRequest\022\017\n\007user_id\030\001 \002(\004\022\020\n\010group_id\030\002 "
    "\001(\004\022\025\n\rgroup_user_id\030\003 \001(\004\022\025\n\rcontrol_va"
    "lue\030\004 \001(\r\"O\n\031UpdateFriendRemarkRequest\022\017"
    "\n\007user_id\030\001 \002(\004\022\021\n\tfriend_id\030\002 \001(\004\022\016\n\006re"
    "mark\030\003 \001(\t\";\n\024GetBranchListRequest\022\017\n\007us"
    "er_id\030\001 \002(\004\022\022\n\nversion_id\030\002 \001(\004\"8\n\020UserI"
    "dRemarkItem\022\017\n\007user_id\030\001 \002(\004\022\023\n\013user_rem"
    "ark\030\002 \001(\t\"\200\001\n\016BranchListItem\022\021\n\tbranch_i"
    "d\030\001 \002(\004\022\023\n\013branch_name\030\002 \001(\t\022\023\n\013branch_s"
    "ort\030\003 \001(\r\0221\n\005users\030\004 \003(\0132\".TerminalProto"
    "col.UserIdRemarkItem\"q\n\025GetBranchListRes"
    "ponse\022\017\n\007user_id\030\001 \002(\004\022\022\n\nversion_id\030\002 \001"
    "(\004\0223\n\tlist_item\030\003 \003(\0132 .TerminalProtocol"
    ".BranchListItem\"e\n\026SetFriendOptionReques"
    "t\022\017\n\007user_id\030\001 \002(\004\022\023\n\013verify_type\030\002 \001(\r\022"
    "\025\n\rquestion_type\030\003 \001(\r\022\016\n\006answer\030\004 \001(\t\"K"
    "\n\031GroupManagerVerifyRequest\022\017\n\007user_id\030\001"
    " \002(\004\022\020\n\010group_id\030\002 \002(\004\022\013\n\003msg\030\003 \001(\t\"a\n\032G"
    "roupManagerVerifyResponse\022\017\n\007user_id\030\001 \002"
    "(\004\022\020\n\010group_id\030\002 \002(\004\022\020\n\010is_allow\030\003 \001(\r\022\016"
    "\n\006reason\030\004 \001(\t\"7\n\022DeleteGroupRequest\022\017\n\007"
    "user_id\030\001 \002(\004\022\020\n\010group_id\030\002 \001(\004\"\?\n\023Delet"
    "eGroupResponse\022(\n\006result\030\003 \001(\0132\030.Termina"
    "lProtocol.Result\"d\n\030UpdateGroupRemarkReq"
    "uest\022\017\n\007user_id\030\001 \002(\004\022\020\n\010group_id\030\002 \002(\004\022"
    "\025\n\rgroup_user_id\030\003 \002(\004\022\016\n\006remark\030\004 \001(\t\"\315"
    "\001\n\026UpdateGroupInfoRequest\022\017\n\007user_id\030\001 \002"
    "(\004\022\020\n\010group_id\030\002 \002(\004\022\022\n\ngroup_name\030\003 \001(\t"
    "\022\016\n\006remark\030\004 \001(\t\022\014\n\004type\030\005 \001(\r\022\023\n\013group_"
    "intro\030\006 \001(\t\022\024\n\014group_notice\030\007 \001(\t\022\016\n\006ava"
    "tar\030\010 \001(\t\022\021\n\tavatar_id\030\t \001(\r\022\020\n\010sub_type"
    "\030\n \001(\r\"f\n\030UpdateGroupOptionRequest\022\017\n\007us"
    "er_id\030\001 \002(\004\022\020\n\010group_id\030\002 \002(\004\022\023\n\013verify_"
    "type\030\003 \001(\r\022\022\n\nchannel_id\030\004 \001(\004\":\n\025GetGro"
    "upOptionRequest\022\017\n\007user_id\030\001 \002(\004\022\020\n\010grou"
    "p_id\030\002 \002(\004\"\263\001\n\026GetGroupOptionResponse\022(\n"
    "\006result\030\001 \002(\0132\030.TerminalProtocol.Result\022"
    "\017\n\007user_id\030\002 \001(\004\022\020\n\010group_id\030\003 \001(\004\022\023\n\013ve"
    "rify_type\030\004 \001(\r\022\022\n\nchannel_id\030\005 \001(\004\022\020\n\010m"
    "sg_mode\030\006 \001(\005\022\021\n\ttalk_mode\030\007 \001(\005\"F\n\021Upda"
    "teGroupNotice\022\017\n\007user_id\030\001 \002(\004\022\020\n\010group_"
    "id\030\002 \002(\004\022\016\n\006notice\030\003 \001(\t\"8\n\023GetGroupInfo"
    "Request\022\017\n\007user_id\030\001 \002(\004\022\020\n\010group_id\030\002 \002"
    "(\004\"\363\001\n\024GetGroupInfoResponse\022\017\n\007user_id\030\001"
    " \002(\004\022\020\n\010group_id\030\002 \002(\004\022\022\n\ngroup_name\030\003 \001"
    "(\t\022\016\n\006remark\030\004 \001(\t\022\014\n\004type\030\005 \001(\r\022\023\n\013grou"
    "p_intro\030\006 \001(\t\022\024\n\014group_notice\030\007 \001(\t\022\016\n\006a"
    "vatar\030\010 \001(\t\022\020\n\010sub_type\030\t \001(\r\022\024\n\014group_n"
    "umber\030\n \001(\004\022\021\n\tavatar_id\030\013 \001(\r\022\020\n\010owner_"
    "id\030\014 \001(\004\"L\n\027UpdateGroupNoticeNotify\022\017\n\007u"
    "ser_id\030\001 \002(\004\022\020\n\010group_id\030\002 \002(\004\022\016\n\006notice"
    "\030\003 \001(\t\"\361\001\n\025UpdateUserInfoRequest\022\017\n\007user"
    "_id\030\001 \002(\004\022\021\n\tnick_name\030\002 \001(\t\022\013\n\003sex\030\003 \001("
    "\r\022\016\n\006mobile\030\004 \001(\t\022\020\n\010birthday\030\005 \001(\t\022\r\n\005e"
    "mail\030\006 \001(\t\022\013\n\003age\030\007 \001(\r\022\025\n\rconstellation"
    "\030\010 \001(\r\022\014\n\004sign\030\t \001(\t\022\014\n\004like\030\n \001(\t\022\014\n\004ci"
    "ty\030\013 \001(\t\022\025\n\rpersonal_desc\030\014 \001(\t\022\021\n\treal_"
    "name\030\r \001(\t\"6\n\025UpdateUserMoodRequest\022\017\n\007u"
    "ser_id\030\001 \002(\004\022\014\n\004mood\030\002 \001(\t\"\?\n\031UpdateUser"
    "NickNameRequest\022\017\n\007user_id\030\001 \002(\004\022\021\n\tnick"
    "_name\030\002 \001(\t\"I\n\023UpdateAvatarRequest\022\017\n\007us"
    "er_id\030\001 \002(\004\022\021\n\tavatar_id\030\002 \001(\r\022\016\n\006avatar"
    "\030\003 \001(\t\"U\n\017KickUserOffline\022(\n\006result\030\001 \002("
    "\0132\030.TerminalProtocol.Result\022\n\n\002ip\030\002 \001(\t\022"
    "\014\n\004port\030\003 \001(\r\",\n\031GetUserOnlineStateReque"
    "st\022\017\n\007user_id\030\001 \003(\004\"\211\001\n\023UserOnlineStateI"
    "nfo\022\017\n\007user_id\030\001 \002(\004\022\024\n\014online_state\030\002 \001"
    "(\r\022\016\n\006mts_ip\030\003 \001(\t\022\020\n\010mts_port\030\004 \001(\r\022\022\n\n"
    "has_camera\030\006 \001(\010\022\025\n\rterminal_type\030\007 \001(\r\""
    "V\n\032GetUserOnlineStateResponse\0228\n\tuser_in"
    "fo\030\001 \003(\0132%.TerminalProtocol.UserOnlineSt"
    "ateInfo\"<\n\027GetGroupUserCardRequest\022\017\n\007us"
    "er_id\030\001 \002(\004\022\020\n\010group_id\030\003 \002(\004\"{\n\030GetGrou"
    "pUserCardResponse\022\017\n\007user_id\030\001 \002(\004\022\020\n\010gr"
    "oup_id\030\002 \002(\004\022\020\n\010nickname\030\003 \001(\t\022\013\n\003tel\030\004 "
    "\001(\t\022\r\n\005email\030\005 \001(\t\022\016\n\006remark\030\006 \001(\t\"\224\001\n\032U"
    "pdateGroupUserCardRequest\022\017\n\007user_id\030\001 \002"
    "(\004\022\020\n\010group_id\030\002 \002(\004\022\020\n\010nickname\030\003 \001(\t\022\013"
    "\n\003tel\030\004 \001(\t\022\r\n\005email\030\005 \001(\t\022\016\n\006remark\030\006 \001"
    "(\t\022\025\n\rgroup_user_id\030\007 \001(\004\"M\n\026SetGroupMsg"
    "ModeRequest\022\017\n\007user_id\030\001 \002(\004\022\020\n\010group_id"
    "\030\002 \002(\004\022\020\n\010msg_mode\030\003 \002(\r\"O\n\027SetGroupTalk"
    "ModeRequest\022\017\n\007user_id\030\001 \002(\004\022\020\n\010group_id"
    "\030\002 \002(\004\022\021\n\ttalk_mode\030\003 \002(\r\"-\n\032GetFriendVe"
    "rifyInfoRequest\022\017\n\007user_id\030\001 \002(\004\"\203\001\n\033Get"
    "FriendVerifyInfoResponse\022\023\n\013verify_type\030"
    "\001 \001(\r\022\025\n\rquestion_type\030\002 \001(\r\022\016\n\006answer\030\003"
    " \001(\t\022(\n\006result\030\004 \002(\0132\030.TerminalProtocol."
    "Result\"\?\n\032GetGroupManagerListRequest\022\017\n\007"
    "user_id\030\001 \002(\004\022\020\n\010group_id\030\002 \002(\004\"\201\001\n\033GetG"
    "roupManagerListResponse\022\020\n\010group_id\030\001 \001("
    "\004\022\017\n\007sum_num\030\002 \001(\r\022\025\n\rgroup_user_id\030\003 \003("
    "\004\022(\n\006result\030\004 \002(\0132\030.TerminalProtocol.Res"
    "ult\"S\n\033DeleteHistoryMessageRequest\022\017\n\007us"
    "er_id\030\001 \002(\004\022\020\n\010msg_type\030\002 \001(\r\022\021\n\tlast_ti"
    "me\030\003 \001(\r", 8688);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "terminal_protocol.proto", &protobuf_RegisterTypes);
  Result::default_instance_ = new Result();
  LoginRequest::default_instance_ = new LoginRequest();
  Redirect::default_instance_ = new Redirect();
  LoginResponse::default_instance_ = new LoginResponse();
  KeepaliveRequest::default_instance_ = new KeepaliveRequest();
  LogoutRequest::default_instance_ = new LogoutRequest();
  LogoutResponse::default_instance_ = new LogoutResponse();
  GetFriendListRequest::default_instance_ = new GetFriendListRequest();
  GetFriendListResponse::default_instance_ = new GetFriendListResponse();
  GetFriendBasicInfoRequest::default_instance_ = new GetFriendBasicInfoRequest();
  FriendBasicInfo::default_instance_ = new FriendBasicInfo();
  GetFriendBasicInfoResponse::default_instance_ = new GetFriendBasicInfoResponse();
  GetUserInfoRequest::default_instance_ = new GetUserInfoRequest();
  GetUserInfoResponse::default_instance_ = new GetUserInfoResponse();
  ChangeOnlineStateRequest::default_instance_ = new ChangeOnlineStateRequest();
  FriendOnlineStateNotify::default_instance_ = new FriendOnlineStateNotify();
  FriendsOnlineStateNotify::default_instance_ = new FriendsOnlineStateNotify();
  GetGroupListRequest::default_instance_ = new GetGroupListRequest();
  GroupListItem::default_instance_ = new GroupListItem();
  GetGroupListResponse::default_instance_ = new GetGroupListResponse();
  CreateGroupRequest::default_instance_ = new CreateGroupRequest();
  CreateGroupResponse::default_instance_ = new CreateGroupResponse();
  JoinGroupRequest::default_instance_ = new JoinGroupRequest();
  JoinGroupResponse::default_instance_ = new JoinGroupResponse();
  JoinGroupVerifyRequest::default_instance_ = new JoinGroupVerifyRequest();
  JoinGroupVerifyResponse::default_instance_ = new JoinGroupVerifyResponse();
  JoinGroupConfirmRequest::default_instance_ = new JoinGroupConfirmRequest();
  JoinGroupNotify::default_instance_ = new JoinGroupNotify();
  ExitGroupRequest::default_instance_ = new ExitGroupRequest();
  ExitGroupResponse::default_instance_ = new ExitGroupResponse();
  GetGroupUserListRequest::default_instance_ = new GetGroupUserListRequest();
  GetGroupUserListResponse::default_instance_ = new GetGroupUserListResponse();
  GetGroupUserInfoRequest::default_instance_ = new GetGroupUserInfoRequest();
  GroupUserInfo::default_instance_ = new GroupUserInfo();
  GetGroupUserInfoResponse::default_instance_ = new GetGroupUserInfoResponse();
  SearchGroupUserListRequest::default_instance_ = new SearchGroupUserListRequest();
  SearchGroupUserListResponse::default_instance_ = new SearchGroupUserListResponse();
  AddFriendRequest::default_instance_ = new AddFriendRequest();
  AddFriendResponse::default_instance_ = new AddFriendResponse();
  AddFriendVerifyRequest::default_instance_ = new AddFriendVerifyRequest();
  AddFriendVerifyResponse::default_instance_ = new AddFriendVerifyResponse();
  AddFriendConfirmRequest::default_instance_ = new AddFriendConfirmRequest();
  AddFriendNotify::default_instance_ = new AddFriendNotify();
  DeleteFriendRequest::default_instance_ = new DeleteFriendRequest();
  DeleteFriendNotify::default_instance_ = new DeleteFriendNotify();
  UpdateFriendBranchRequest::default_instance_ = new UpdateFriendBranchRequest();
  AddBranchRequest::default_instance_ = new AddBranchRequest();
  AddBranchResponse::default_instance_ = new AddBranchResponse();
  DeleteBranchRequest::default_instance_ = new DeleteBranchRequest();
  UpdateBranchNameRequest::default_instance_ = new UpdateBranchNameRequest();
  KickoutGroupUserRequest::default_instance_ = new KickoutGroupUserRequest();
  SetGroupManagerRequest::default_instance_ = new SetGroupManagerRequest();
  UpdateFriendRemarkRequest::default_instance_ = new UpdateFriendRemarkRequest();
  GetBranchListRequest::default_instance_ = new GetBranchListRequest();
  UserIdRemarkItem::default_instance_ = new UserIdRemarkItem();
  BranchListItem::default_instance_ = new BranchListItem();
  GetBranchListResponse::default_instance_ = new GetBranchListResponse();
  SetFriendOptionRequest::default_instance_ = new SetFriendOptionRequest();
  GroupManagerVerifyRequest::default_instance_ = new GroupManagerVerifyRequest();
  GroupManagerVerifyResponse::default_instance_ = new GroupManagerVerifyResponse();
  DeleteGroupRequest::default_instance_ = new DeleteGroupRequest();
  DeleteGroupResponse::default_instance_ = new DeleteGroupResponse();
  UpdateGroupRemarkRequest::default_instance_ = new UpdateGroupRemarkRequest();
  UpdateGroupInfoRequest::default_instance_ = new UpdateGroupInfoRequest();
  UpdateGroupOptionRequest::default_instance_ = new UpdateGroupOptionRequest();
  GetGroupOptionRequest::default_instance_ = new GetGroupOptionRequest();
  GetGroupOptionResponse::default_instance_ = new GetGroupOptionResponse();
  UpdateGroupNotice::default_instance_ = new UpdateGroupNotice();
  GetGroupInfoRequest::default_instance_ = new GetGroupInfoRequest();
  GetGroupInfoResponse::default_instance_ = new GetGroupInfoResponse();
  UpdateGroupNoticeNotify::default_instance_ = new UpdateGroupNoticeNotify();
  UpdateUserInfoRequest::default_instance_ = new UpdateUserInfoRequest();
  UpdateUserMoodRequest::default_instance_ = new UpdateUserMoodRequest();
  UpdateUserNickNameRequest::default_instance_ = new UpdateUserNickNameRequest();
  UpdateAvatarRequest::default_instance_ = new UpdateAvatarRequest();
  KickUserOffline::default_instance_ = new KickUserOffline();
  GetUserOnlineStateRequest::default_instance_ = new GetUserOnlineStateRequest();
  UserOnlineStateInfo::default_instance_ = new UserOnlineStateInfo();
  GetUserOnlineStateResponse::default_instance_ = new GetUserOnlineStateResponse();
  GetGroupUserCardRequest::default_instance_ = new GetGroupUserCardRequest();
  GetGroupUserCardResponse::default_instance_ = new GetGroupUserCardResponse();
  UpdateGroupUserCardRequest::default_instance_ = new UpdateGroupUserCardRequest();
  SetGroupMsgModeRequest::default_instance_ = new SetGroupMsgModeRequest();
  SetGroupTalkModeRequest::default_instance_ = new SetGroupTalkModeRequest();
  GetFriendVerifyInfoRequest::default_instance_ = new GetFriendVerifyInfoRequest();
  GetFriendVerifyInfoResponse::default_instance_ = new GetFriendVerifyInfoResponse();
  GetGroupManagerListRequest::default_instance_ = new GetGroupManagerListRequest();
  GetGroupManagerListResponse::default_instance_ = new GetGroupManagerListResponse();
  DeleteHistoryMessageRequest::default_instance_ = new DeleteHistoryMessageRequest();
  Result::default_instance_->InitAsDefaultInstance();
  LoginRequest::default_instance_->InitAsDefaultInstance();
  Redirect::default_instance_->InitAsDefaultInstance();
  LoginResponse::default_instance_->InitAsDefaultInstance();
  KeepaliveRequest::default_instance_->InitAsDefaultInstance();
  LogoutRequest::default_instance_->InitAsDefaultInstance();
  LogoutResponse::default_instance_->InitAsDefaultInstance();
  GetFriendListRequest::default_instance_->InitAsDefaultInstance();
  GetFriendListResponse::default_instance_->InitAsDefaultInstance();
  GetFriendBasicInfoRequest::default_instance_->InitAsDefaultInstance();
  FriendBasicInfo::default_instance_->InitAsDefaultInstance();
  GetFriendBasicInfoResponse::default_instance_->InitAsDefaultInstance();
  GetUserInfoRequest::default_instance_->InitAsDefaultInstance();
  GetUserInfoResponse::default_instance_->InitAsDefaultInstance();
  ChangeOnlineStateRequest::default_instance_->InitAsDefaultInstance();
  FriendOnlineStateNotify::default_instance_->InitAsDefaultInstance();
  FriendsOnlineStateNotify::default_instance_->InitAsDefaultInstance();
  GetGroupListRequest::default_instance_->InitAsDefaultInstance();
  GroupListItem::default_instance_->InitAsDefaultInstance();
  GetGroupListResponse::default_instance_->InitAsDefaultInstance();
  CreateGroupRequest::default_instance_->InitAsDefaultInstance();
  CreateGroupResponse::default_instance_->InitAsDefaultInstance();
  JoinGroupRequest::default_instance_->InitAsDefaultInstance();
  JoinGroupResponse::default_instance_->InitAsDefaultInstance();
  JoinGroupVerifyRequest::default_instance_->InitAsDefaultInstance();
  JoinGroupVerifyResponse::default_instance_->InitAsDefaultInstance();
  JoinGroupConfirmRequest::default_instance_->InitAsDefaultInstance();
  JoinGroupNotify::default_instance_->InitAsDefaultInstance();
  ExitGroupRequest::default_instance_->InitAsDefaultInstance();
  ExitGroupResponse::default_instance_->InitAsDefaultInstance();
  GetGroupUserListRequest::default_instance_->InitAsDefaultInstance();
  GetGroupUserListResponse::default_instance_->InitAsDefaultInstance();
  GetGroupUserInfoRequest::default_instance_->InitAsDefaultInstance();
  GroupUserInfo::default_instance_->InitAsDefaultInstance();
  GetGroupUserInfoResponse::default_instance_->InitAsDefaultInstance();
  SearchGroupUserListRequest::default_instance_->InitAsDefaultInstance();
  SearchGroupUserListResponse::default_instance_->InitAsDefaultInstance();
  AddFriendRequest::default_instance_->InitAsDefaultInstance();
  AddFriendResponse::default_instance_->InitAsDefaultInstance();
  AddFriendVerifyRequest::default_instance_->InitAsDefaultInstance();
  AddFriendVerifyResponse::default_instance_->InitAsDefaultInstance();
  AddFriendConfirmRequest::default_instance_->InitAsDefaultInstance();
  AddFriendNotify::default_instance_->InitAsDefaultInstance();
  DeleteFriendRequest::default_instance_->InitAsDefaultInstance();
  DeleteFriendNotify::default_instance_->InitAsDefaultInstance();
  UpdateFriendBranchRequest::default_instance_->InitAsDefaultInstance();
  AddBranchRequest::default_instance_->InitAsDefaultInstance();
  AddBranchResponse::default_instance_->InitAsDefaultInstance();
  DeleteBranchRequest::default_instance_->InitAsDefaultInstance();
  UpdateBranchNameRequest::default_instance_->InitAsDefaultInstance();
  KickoutGroupUserRequest::default_instance_->InitAsDefaultInstance();
  SetGroupManagerRequest::default_instance_->InitAsDefaultInstance();
  UpdateFriendRemarkRequest::default_instance_->InitAsDefaultInstance();
  GetBranchListRequest::default_instance_->InitAsDefaultInstance();
  UserIdRemarkItem::default_instance_->InitAsDefaultInstance();
  BranchListItem::default_instance_->InitAsDefaultInstance();
  GetBranchListResponse::default_instance_->InitAsDefaultInstance();
  SetFriendOptionRequest::default_instance_->InitAsDefaultInstance();
  GroupManagerVerifyRequest::default_instance_->InitAsDefaultInstance();
  GroupManagerVerifyResponse::default_instance_->InitAsDefaultInstance();
  DeleteGroupRequest::default_instance_->InitAsDefaultInstance();
  DeleteGroupResponse::default_instance_->InitAsDefaultInstance();
  UpdateGroupRemarkRequest::default_instance_->InitAsDefaultInstance();
  UpdateGroupInfoRequest::default_instance_->InitAsDefaultInstance();
  UpdateGroupOptionRequest::default_instance_->InitAsDefaultInstance();
  GetGroupOptionRequest::default_instance_->InitAsDefaultInstance();
  GetGroupOptionResponse::default_instance_->InitAsDefaultInstance();
  UpdateGroupNotice::default_instance_->InitAsDefaultInstance();
  GetGroupInfoRequest::default_instance_->InitAsDefaultInstance();
  GetGroupInfoResponse::default_instance_->InitAsDefaultInstance();
  UpdateGroupNoticeNotify::default_instance_->InitAsDefaultInstance();
  UpdateUserInfoRequest::default_instance_->InitAsDefaultInstance();
  UpdateUserMoodRequest::default_instance_->InitAsDefaultInstance();
  UpdateUserNickNameRequest::default_instance_->InitAsDefaultInstance();
  UpdateAvatarRequest::default_instance_->InitAsDefaultInstance();
  KickUserOffline::default_instance_->InitAsDefaultInstance();
  GetUserOnlineStateRequest::default_instance_->InitAsDefaultInstance();
  UserOnlineStateInfo::default_instance_->InitAsDefaultInstance();
  GetUserOnlineStateResponse::default_instance_->InitAsDefaultInstance();
  GetGroupUserCardRequest::default_instance_->InitAsDefaultInstance();
  GetGroupUserCardResponse::default_instance_->InitAsDefaultInstance();
  UpdateGroupUserCardRequest::default_instance_->InitAsDefaultInstance();
  SetGroupMsgModeRequest::default_instance_->InitAsDefaultInstance();
  SetGroupTalkModeRequest::default_instance_->InitAsDefaultInstance();
  GetFriendVerifyInfoRequest::default_instance_->InitAsDefaultInstance();
  GetFriendVerifyInfoResponse::default_instance_->InitAsDefaultInstance();
  GetGroupManagerListRequest::default_instance_->InitAsDefaultInstance();
  GetGroupManagerListResponse::default_instance_->InitAsDefaultInstance();
  DeleteHistoryMessageRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_terminal_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_terminal_5fprotocol_2eproto {
  StaticDescriptorInitializer_terminal_5fprotocol_2eproto() {
    protobuf_AddDesc_terminal_5fprotocol_2eproto();
  }
} static_descriptor_initializer_terminal_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Result::kCodeFieldNumber;
const int Result::kMsgFieldNumber;
#endif  // !_MSC_VER

Result::Result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.Result)
}

void Result::InitAsDefaultInstance() {
}

Result::Result(const Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.Result)
}

void Result::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 0u;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.Result)
  SharedDtor();
}

void Result::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Result_descriptor_;
}

const Result& Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

Result* Result::default_instance_ = NULL;

Result* Result::New() const {
  return new Result;
}

void Result::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    code_ = 0u;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.Result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // required string msg = 2;
      case 2: {
        if (tag == 18) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.Result)
  return false;
#undef DO_
}

void Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.Result)
  // required uint32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->code(), output);
  }

  // required string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.Result)
}

::google::protobuf::uint8* Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.Result)
  // required uint32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->code(), target);
  }

  // required string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.Result)
  return target;
}

int Result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->code());
    }

    // required string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Result::MergeFrom(const Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Result::CopyFrom(const Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Result::Swap(Result* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Result_descriptor_;
  metadata.reflection = Result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRequest::kLoginNameFieldNumber;
const int LoginRequest::kPasswordFieldNumber;
const int LoginRequest::kOnlineStateFieldNumber;
const int LoginRequest::kTerminalTypeFieldNumber;
const int LoginRequest::kMacAddrFieldNumber;
const int LoginRequest::kHasCameraFieldNumber;
const int LoginRequest::kLoginTypeFieldNumber;
#endif  // !_MSC_VER

LoginRequest::LoginRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.LoginRequest)
}

void LoginRequest::InitAsDefaultInstance() {
}

LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.LoginRequest)
}

void LoginRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  login_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  online_state_ = 0u;
  terminal_type_ = 0u;
  mac_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  has_camera_ = 0u;
  login_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.LoginRequest)
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  if (login_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete login_name_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (mac_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mac_addr_;
  }
  if (this != default_instance_) {
  }
}

void LoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRequest_descriptor_;
}

const LoginRequest& LoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

LoginRequest* LoginRequest::default_instance_ = NULL;

LoginRequest* LoginRequest::New() const {
  return new LoginRequest;
}

void LoginRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LoginRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(online_state_, terminal_type_);
    ZR_(has_camera_, login_type_);
    if (has_login_name()) {
      if (login_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        login_name_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
    if (has_mac_addr()) {
      if (mac_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mac_addr_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.LoginRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string login_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->login_name().data(), this->login_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "login_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // required string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_online_state;
        break;
      }

      // required uint32 online_state = 3;
      case 3: {
        if (tag == 24) {
         parse_online_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_state_)));
          set_has_online_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_terminal_type;
        break;
      }

      // required uint32 terminal_type = 4;
      case 4: {
        if (tag == 32) {
         parse_terminal_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terminal_type_)));
          set_has_terminal_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_mac_addr;
        break;
      }

      // optional string mac_addr = 5;
      case 5: {
        if (tag == 42) {
         parse_mac_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mac_addr().data(), this->mac_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mac_addr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_has_camera;
        break;
      }

      // optional uint32 has_camera = 6;
      case 6: {
        if (tag == 48) {
         parse_has_camera:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_camera_)));
          set_has_has_camera();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_login_type;
        break;
      }

      // optional uint32 login_type = 7;
      case 7: {
        if (tag == 56) {
         parse_login_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &login_type_)));
          set_has_login_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.LoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.LoginRequest)
  return false;
#undef DO_
}

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.LoginRequest)
  // required string login_name = 1;
  if (has_login_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login_name().data(), this->login_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->login_name(), output);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // required uint32 online_state = 3;
  if (has_online_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->online_state(), output);
  }

  // required uint32 terminal_type = 4;
  if (has_terminal_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->terminal_type(), output);
  }

  // optional string mac_addr = 5;
  if (has_mac_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac_addr().data(), this->mac_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mac_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->mac_addr(), output);
  }

  // optional uint32 has_camera = 6;
  if (has_has_camera()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->has_camera(), output);
  }

  // optional uint32 login_type = 7;
  if (has_login_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->login_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.LoginRequest)
}

::google::protobuf::uint8* LoginRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.LoginRequest)
  // required string login_name = 1;
  if (has_login_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login_name().data(), this->login_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->login_name(), target);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // required uint32 online_state = 3;
  if (has_online_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->online_state(), target);
  }

  // required uint32 terminal_type = 4;
  if (has_terminal_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->terminal_type(), target);
  }

  // optional string mac_addr = 5;
  if (has_mac_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac_addr().data(), this->mac_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mac_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->mac_addr(), target);
  }

  // optional uint32 has_camera = 6;
  if (has_has_camera()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->has_camera(), target);
  }

  // optional uint32 login_type = 7;
  if (has_login_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->login_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.LoginRequest)
  return target;
}

int LoginRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string login_name = 1;
    if (has_login_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login_name());
    }

    // required string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // required uint32 online_state = 3;
    if (has_online_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_state());
    }

    // required uint32 terminal_type = 4;
    if (has_terminal_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terminal_type());
    }

    // optional string mac_addr = 5;
    if (has_mac_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mac_addr());
    }

    // optional uint32 has_camera = 6;
    if (has_has_camera()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->has_camera());
    }

    // optional uint32 login_type = 7;
    if (has_login_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->login_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_login_name()) {
      set_login_name(from.login_name());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_online_state()) {
      set_online_state(from.online_state());
    }
    if (from.has_terminal_type()) {
      set_terminal_type(from.terminal_type());
    }
    if (from.has_mac_addr()) {
      set_mac_addr(from.mac_addr());
    }
    if (from.has_has_camera()) {
      set_has_camera(from.has_camera());
    }
    if (from.has_login_type()) {
      set_login_type(from.login_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other != this) {
    std::swap(login_name_, other->login_name_);
    std::swap(password_, other->password_);
    std::swap(online_state_, other->online_state_);
    std::swap(terminal_type_, other->terminal_type_);
    std::swap(mac_addr_, other->mac_addr_);
    std::swap(has_camera_, other->has_camera_);
    std::swap(login_type_, other->login_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRequest_descriptor_;
  metadata.reflection = LoginRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Redirect::kServerIpFieldNumber;
const int Redirect::kServerPortFieldNumber;
const int Redirect::kAppIdFieldNumber;
#endif  // !_MSC_VER

Redirect::Redirect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.Redirect)
}

void Redirect::InitAsDefaultInstance() {
}

Redirect::Redirect(const Redirect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.Redirect)
}

void Redirect::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_port_ = 0u;
  app_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Redirect::~Redirect() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.Redirect)
  SharedDtor();
}

void Redirect::SharedDtor() {
  if (server_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete server_ip_;
  }
  if (this != default_instance_) {
  }
}

void Redirect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Redirect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Redirect_descriptor_;
}

const Redirect& Redirect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

Redirect* Redirect::default_instance_ = NULL;

Redirect* Redirect::New() const {
  return new Redirect;
}

void Redirect::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Redirect*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(server_port_, app_id_);
    if (has_server_ip()) {
      if (server_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        server_ip_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Redirect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.Redirect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string server_ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_ip().data(), this->server_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "server_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_server_port;
        break;
      }

      // required uint32 server_port = 2;
      case 2: {
        if (tag == 16) {
         parse_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_port_)));
          set_has_server_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_app_id;
        break;
      }

      // optional uint32 app_id = 3;
      case 3: {
        if (tag == 24) {
         parse_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.Redirect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.Redirect)
  return false;
#undef DO_
}

void Redirect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.Redirect)
  // required string server_ip = 1;
  if (has_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_ip().data(), this->server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "server_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->server_ip(), output);
  }

  // required uint32 server_port = 2;
  if (has_server_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_port(), output);
  }

  // optional uint32 app_id = 3;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->app_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.Redirect)
}

::google::protobuf::uint8* Redirect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.Redirect)
  // required string server_ip = 1;
  if (has_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_ip().data(), this->server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "server_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->server_ip(), target);
  }

  // required uint32 server_port = 2;
  if (has_server_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_port(), target);
  }

  // optional uint32 app_id = 3;
  if (has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->app_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.Redirect)
  return target;
}

int Redirect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string server_ip = 1;
    if (has_server_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_ip());
    }

    // required uint32 server_port = 2;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_port());
    }

    // optional uint32 app_id = 3;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Redirect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Redirect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Redirect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Redirect::MergeFrom(const Redirect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_ip()) {
      set_server_ip(from.server_ip());
    }
    if (from.has_server_port()) {
      set_server_port(from.server_port());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Redirect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Redirect::CopyFrom(const Redirect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Redirect::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Redirect::Swap(Redirect* other) {
  if (other != this) {
    std::swap(server_ip_, other->server_ip_);
    std::swap(server_port_, other->server_port_);
    std::swap(app_id_, other->app_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Redirect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Redirect_descriptor_;
  metadata.reflection = Redirect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginResponse::kResultFieldNumber;
const int LoginResponse::kUserIdFieldNumber;
const int LoginResponse::kTtNumberFieldNumber;
const int LoginResponse::kNickNameFieldNumber;
const int LoginResponse::kAvatarIdFieldNumber;
const int LoginResponse::kAvatarFieldNumber;
const int LoginResponse::kTokenFieldNumber;
const int LoginResponse::kMtsIpFieldNumber;
const int LoginResponse::kMtsPortFieldNumber;
#endif  // !_MSC_VER

LoginResponse::LoginResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.LoginResponse)
}

void LoginResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::TerminalProtocol::Result*>(&::TerminalProtocol::Result::default_instance());
}

LoginResponse::LoginResponse(const LoginResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.LoginResponse)
}

void LoginResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = NULL;
  user_id_ = GOOGLE_ULONGLONG(0);
  tt_number_ = GOOGLE_ULONGLONG(0);
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mts_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mts_port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginResponse::~LoginResponse() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.LoginResponse)
  SharedDtor();
}

void LoginResponse::SharedDtor() {
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_name_;
  }
  if (avatar_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_id_;
  }
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (mts_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mts_ip_;
  }
  if (this != default_instance_) {
    delete result_;
  }
}

void LoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginResponse_descriptor_;
}

const LoginResponse& LoginResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

LoginResponse* LoginResponse::default_instance_ = NULL;

LoginResponse* LoginResponse::New() const {
  return new LoginResponse;
}

void LoginResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LoginResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(user_id_, tt_number_);
    if (has_result()) {
      if (result_ != NULL) result_->::TerminalProtocol::Result::Clear();
    }
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nick_name_->clear();
      }
    }
    if (has_avatar_id()) {
      if (avatar_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_id_->clear();
      }
    }
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    if (has_mts_ip()) {
      if (mts_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mts_ip_->clear();
      }
    }
  }
  mts_port_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.LoginResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TerminalProtocol.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_tt_number;
        break;
      }

      // optional uint64 tt_number = 3;
      case 3: {
        if (tag == 24) {
         parse_tt_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tt_number_)));
          set_has_tt_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 4;
      case 4: {
        if (tag == 34) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nick_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_avatar_id;
        break;
      }

      // optional string avatar_id = 5;
      case 5: {
        if (tag == 42) {
         parse_avatar_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->avatar_id().data(), this->avatar_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "avatar_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_avatar;
        break;
      }

      // optional string avatar = 6;
      case 6: {
        if (tag == 50) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->avatar().data(), this->avatar().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "avatar");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_token;
        break;
      }

      // optional string token = 7;
      case 7: {
        if (tag == 58) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_mts_ip;
        break;
      }

      // optional string mts_ip = 8;
      case 8: {
        if (tag == 66) {
         parse_mts_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mts_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mts_ip().data(), this->mts_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mts_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_mts_port;
        break;
      }

      // optional uint32 mts_port = 9;
      case 9: {
        if (tag == 72) {
         parse_mts_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mts_port_)));
          set_has_mts_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.LoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.LoginResponse)
  return false;
#undef DO_
}

void LoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.LoginResponse)
  // required .TerminalProtocol.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional uint64 tt_number = 3;
  if (has_tt_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->tt_number(), output);
  }

  // optional string nick_name = 4;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nick_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->nick_name(), output);
  }

  // optional string avatar_id = 5;
  if (has_avatar_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar_id().data(), this->avatar_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->avatar_id(), output);
  }

  // optional string avatar = 6;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->avatar(), output);
  }

  // optional string token = 7;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->token(), output);
  }

  // optional string mts_ip = 8;
  if (has_mts_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mts_ip().data(), this->mts_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mts_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->mts_ip(), output);
  }

  // optional uint32 mts_port = 9;
  if (has_mts_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->mts_port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.LoginResponse)
}

::google::protobuf::uint8* LoginResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.LoginResponse)
  // required .TerminalProtocol.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional uint64 tt_number = 3;
  if (has_tt_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->tt_number(), target);
  }

  // optional string nick_name = 4;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nick_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nick_name(), target);
  }

  // optional string avatar_id = 5;
  if (has_avatar_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar_id().data(), this->avatar_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->avatar_id(), target);
  }

  // optional string avatar = 6;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->avatar(), target);
  }

  // optional string token = 7;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->token(), target);
  }

  // optional string mts_ip = 8;
  if (has_mts_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mts_ip().data(), this->mts_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mts_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->mts_ip(), target);
  }

  // optional uint32 mts_port = 9;
  if (has_mts_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->mts_port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.LoginResponse)
  return target;
}

int LoginResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TerminalProtocol.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 tt_number = 3;
    if (has_tt_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tt_number());
    }

    // optional string nick_name = 4;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

    // optional string avatar_id = 5;
    if (has_avatar_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar_id());
    }

    // optional string avatar = 6;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar());
    }

    // optional string token = 7;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional string mts_ip = 8;
    if (has_mts_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mts_ip());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 mts_port = 9;
    if (has_mts_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mts_port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginResponse::MergeFrom(const LoginResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::TerminalProtocol::Result::MergeFrom(from.result());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_tt_number()) {
      set_tt_number(from.tt_number());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_avatar_id()) {
      set_avatar_id(from.avatar_id());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_mts_ip()) {
      set_mts_ip(from.mts_ip());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mts_port()) {
      set_mts_port(from.mts_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void LoginResponse::Swap(LoginResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_id_, other->user_id_);
    std::swap(tt_number_, other->tt_number_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(avatar_id_, other->avatar_id_);
    std::swap(avatar_, other->avatar_);
    std::swap(token_, other->token_);
    std::swap(mts_ip_, other->mts_ip_);
    std::swap(mts_port_, other->mts_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginResponse_descriptor_;
  metadata.reflection = LoginResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeepaliveRequest::kUserIdFieldNumber;
#endif  // !_MSC_VER

KeepaliveRequest::KeepaliveRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.KeepaliveRequest)
}

void KeepaliveRequest::InitAsDefaultInstance() {
}

KeepaliveRequest::KeepaliveRequest(const KeepaliveRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.KeepaliveRequest)
}

void KeepaliveRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeepaliveRequest::~KeepaliveRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.KeepaliveRequest)
  SharedDtor();
}

void KeepaliveRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KeepaliveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeepaliveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeepaliveRequest_descriptor_;
}

const KeepaliveRequest& KeepaliveRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

KeepaliveRequest* KeepaliveRequest::default_instance_ = NULL;

KeepaliveRequest* KeepaliveRequest::New() const {
  return new KeepaliveRequest;
}

void KeepaliveRequest::Clear() {
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeepaliveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.KeepaliveRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.KeepaliveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.KeepaliveRequest)
  return false;
#undef DO_
}

void KeepaliveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.KeepaliveRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.KeepaliveRequest)
}

::google::protobuf::uint8* KeepaliveRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.KeepaliveRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.KeepaliveRequest)
  return target;
}

int KeepaliveRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeepaliveRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeepaliveRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeepaliveRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeepaliveRequest::MergeFrom(const KeepaliveRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeepaliveRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeepaliveRequest::CopyFrom(const KeepaliveRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepaliveRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void KeepaliveRequest::Swap(KeepaliveRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeepaliveRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeepaliveRequest_descriptor_;
  metadata.reflection = KeepaliveRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogoutRequest::kUserIdFieldNumber;
const int LogoutRequest::kTerminalTypeFieldNumber;
#endif  // !_MSC_VER

LogoutRequest::LogoutRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.LogoutRequest)
}

void LogoutRequest::InitAsDefaultInstance() {
}

LogoutRequest::LogoutRequest(const LogoutRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.LogoutRequest)
}

void LogoutRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  terminal_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogoutRequest::~LogoutRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.LogoutRequest)
  SharedDtor();
}

void LogoutRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogoutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogoutRequest_descriptor_;
}

const LogoutRequest& LogoutRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

LogoutRequest* LogoutRequest::default_instance_ = NULL;

LogoutRequest* LogoutRequest::New() const {
  return new LogoutRequest;
}

void LogoutRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LogoutRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, terminal_type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogoutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.LogoutRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_terminal_type;
        break;
      }

      // required uint32 terminal_type = 2;
      case 2: {
        if (tag == 16) {
         parse_terminal_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terminal_type_)));
          set_has_terminal_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.LogoutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.LogoutRequest)
  return false;
#undef DO_
}

void LogoutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.LogoutRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint32 terminal_type = 2;
  if (has_terminal_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->terminal_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.LogoutRequest)
}

::google::protobuf::uint8* LogoutRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.LogoutRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint32 terminal_type = 2;
  if (has_terminal_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->terminal_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.LogoutRequest)
  return target;
}

int LogoutRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint32 terminal_type = 2;
    if (has_terminal_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terminal_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogoutRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogoutRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogoutRequest::MergeFrom(const LogoutRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_terminal_type()) {
      set_terminal_type(from.terminal_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogoutRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutRequest::CopyFrom(const LogoutRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LogoutRequest::Swap(LogoutRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(terminal_type_, other->terminal_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogoutRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogoutRequest_descriptor_;
  metadata.reflection = LogoutRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogoutResponse::kResultFieldNumber;
const int LogoutResponse::kUserIdFieldNumber;
#endif  // !_MSC_VER

LogoutResponse::LogoutResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.LogoutResponse)
}

void LogoutResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::TerminalProtocol::Result*>(&::TerminalProtocol::Result::default_instance());
}

LogoutResponse::LogoutResponse(const LogoutResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.LogoutResponse)
}

void LogoutResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogoutResponse::~LogoutResponse() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.LogoutResponse)
  SharedDtor();
}

void LogoutResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void LogoutResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogoutResponse_descriptor_;
}

const LogoutResponse& LogoutResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

LogoutResponse* LogoutResponse::default_instance_ = NULL;

LogoutResponse* LogoutResponse::New() const {
  return new LogoutResponse;
}

void LogoutResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_result()) {
      if (result_ != NULL) result_->::TerminalProtocol::Result::Clear();
    }
    user_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogoutResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.LogoutResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TerminalProtocol.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.LogoutResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.LogoutResponse)
  return false;
#undef DO_
}

void LogoutResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.LogoutResponse)
  // required .TerminalProtocol.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.LogoutResponse)
}

::google::protobuf::uint8* LogoutResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.LogoutResponse)
  // required .TerminalProtocol.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.LogoutResponse)
  return target;
}

int LogoutResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TerminalProtocol.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogoutResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogoutResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogoutResponse::MergeFrom(const LogoutResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::TerminalProtocol::Result::MergeFrom(from.result());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogoutResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutResponse::CopyFrom(const LogoutResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void LogoutResponse::Swap(LogoutResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogoutResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogoutResponse_descriptor_;
  metadata.reflection = LogoutResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFriendListRequest::kUserIdFieldNumber;
const int GetFriendListRequest::kVersionIdFieldNumber;
#endif  // !_MSC_VER

GetFriendListRequest::GetFriendListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.GetFriendListRequest)
}

void GetFriendListRequest::InitAsDefaultInstance() {
}

GetFriendListRequest::GetFriendListRequest(const GetFriendListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.GetFriendListRequest)
}

void GetFriendListRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  version_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFriendListRequest::~GetFriendListRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.GetFriendListRequest)
  SharedDtor();
}

void GetFriendListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetFriendListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFriendListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFriendListRequest_descriptor_;
}

const GetFriendListRequest& GetFriendListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

GetFriendListRequest* GetFriendListRequest::default_instance_ = NULL;

GetFriendListRequest* GetFriendListRequest::New() const {
  return new GetFriendListRequest;
}

void GetFriendListRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetFriendListRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, version_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFriendListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.GetFriendListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version_id;
        break;
      }

      // optional uint64 version_id = 2;
      case 2: {
        if (tag == 16) {
         parse_version_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_id_)));
          set_has_version_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.GetFriendListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.GetFriendListRequest)
  return false;
#undef DO_
}

void GetFriendListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.GetFriendListRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint64 version_id = 2;
  if (has_version_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->version_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.GetFriendListRequest)
}

::google::protobuf::uint8* GetFriendListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.GetFriendListRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint64 version_id = 2;
  if (has_version_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->version_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.GetFriendListRequest)
  return target;
}

int GetFriendListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 version_id = 2;
    if (has_version_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFriendListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFriendListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFriendListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFriendListRequest::MergeFrom(const GetFriendListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_version_id()) {
      set_version_id(from.version_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFriendListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFriendListRequest::CopyFrom(const GetFriendListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetFriendListRequest::Swap(GetFriendListRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(version_id_, other->version_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFriendListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFriendListRequest_descriptor_;
  metadata.reflection = GetFriendListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFriendListResponse::kUserIdFieldNumber;
const int GetFriendListResponse::kVersionIdFieldNumber;
const int GetFriendListResponse::kFriendIdFieldNumber;
#endif  // !_MSC_VER

GetFriendListResponse::GetFriendListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.GetFriendListResponse)
}

void GetFriendListResponse::InitAsDefaultInstance() {
}

GetFriendListResponse::GetFriendListResponse(const GetFriendListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.GetFriendListResponse)
}

void GetFriendListResponse::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  version_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFriendListResponse::~GetFriendListResponse() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.GetFriendListResponse)
  SharedDtor();
}

void GetFriendListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetFriendListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFriendListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFriendListResponse_descriptor_;
}

const GetFriendListResponse& GetFriendListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

GetFriendListResponse* GetFriendListResponse::default_instance_ = NULL;

GetFriendListResponse* GetFriendListResponse::New() const {
  return new GetFriendListResponse;
}

void GetFriendListResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetFriendListResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, version_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  friend_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFriendListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.GetFriendListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version_id;
        break;
      }

      // optional uint64 version_id = 2;
      case 2: {
        if (tag == 16) {
         parse_version_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_id_)));
          set_has_version_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_friend_id;
        break;
      }

      // repeated uint64 friend_id = 3;
      case 3: {
        if (tag == 24) {
         parse_friend_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_friend_id())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_friend_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_friend_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.GetFriendListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.GetFriendListResponse)
  return false;
#undef DO_
}

void GetFriendListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.GetFriendListResponse)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint64 version_id = 2;
  if (has_version_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->version_id(), output);
  }

  // repeated uint64 friend_id = 3;
  for (int i = 0; i < this->friend_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->friend_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.GetFriendListResponse)
}

::google::protobuf::uint8* GetFriendListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.GetFriendListResponse)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint64 version_id = 2;
  if (has_version_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->version_id(), target);
  }

  // repeated uint64 friend_id = 3;
  for (int i = 0; i < this->friend_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->friend_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.GetFriendListResponse)
  return target;
}

int GetFriendListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 version_id = 2;
    if (has_version_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version_id());
    }

  }
  // repeated uint64 friend_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->friend_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->friend_id(i));
    }
    total_size += 1 * this->friend_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFriendListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFriendListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFriendListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFriendListResponse::MergeFrom(const GetFriendListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  friend_id_.MergeFrom(from.friend_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_version_id()) {
      set_version_id(from.version_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFriendListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFriendListResponse::CopyFrom(const GetFriendListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetFriendListResponse::Swap(GetFriendListResponse* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(version_id_, other->version_id_);
    friend_id_.Swap(&other->friend_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFriendListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFriendListResponse_descriptor_;
  metadata.reflection = GetFriendListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFriendBasicInfoRequest::kUserIdFieldNumber;
const int GetFriendBasicInfoRequest::kFriendIdFieldNumber;
#endif  // !_MSC_VER

GetFriendBasicInfoRequest::GetFriendBasicInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.GetFriendBasicInfoRequest)
}

void GetFriendBasicInfoRequest::InitAsDefaultInstance() {
}

GetFriendBasicInfoRequest::GetFriendBasicInfoRequest(const GetFriendBasicInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.GetFriendBasicInfoRequest)
}

void GetFriendBasicInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFriendBasicInfoRequest::~GetFriendBasicInfoRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.GetFriendBasicInfoRequest)
  SharedDtor();
}

void GetFriendBasicInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetFriendBasicInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFriendBasicInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFriendBasicInfoRequest_descriptor_;
}

const GetFriendBasicInfoRequest& GetFriendBasicInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

GetFriendBasicInfoRequest* GetFriendBasicInfoRequest::default_instance_ = NULL;

GetFriendBasicInfoRequest* GetFriendBasicInfoRequest::New() const {
  return new GetFriendBasicInfoRequest;
}

void GetFriendBasicInfoRequest::Clear() {
  user_id_ = GOOGLE_ULONGLONG(0);
  friend_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFriendBasicInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.GetFriendBasicInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_friend_id;
        break;
      }

      // repeated uint64 friend_id = 2;
      case 2: {
        if (tag == 16) {
         parse_friend_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_friend_id())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_friend_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_friend_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.GetFriendBasicInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.GetFriendBasicInfoRequest)
  return false;
#undef DO_
}

void GetFriendBasicInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.GetFriendBasicInfoRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // repeated uint64 friend_id = 2;
  for (int i = 0; i < this->friend_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->friend_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.GetFriendBasicInfoRequest)
}

::google::protobuf::uint8* GetFriendBasicInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.GetFriendBasicInfoRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // repeated uint64 friend_id = 2;
  for (int i = 0; i < this->friend_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->friend_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.GetFriendBasicInfoRequest)
  return target;
}

int GetFriendBasicInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

  }
  // repeated uint64 friend_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->friend_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->friend_id(i));
    }
    total_size += 1 * this->friend_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFriendBasicInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFriendBasicInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFriendBasicInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFriendBasicInfoRequest::MergeFrom(const GetFriendBasicInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  friend_id_.MergeFrom(from.friend_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFriendBasicInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFriendBasicInfoRequest::CopyFrom(const GetFriendBasicInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendBasicInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetFriendBasicInfoRequest::Swap(GetFriendBasicInfoRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    friend_id_.Swap(&other->friend_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFriendBasicInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFriendBasicInfoRequest_descriptor_;
  metadata.reflection = GetFriendBasicInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendBasicInfo::kUserIdFieldNumber;
const int FriendBasicInfo::kNickNameFieldNumber;
const int FriendBasicInfo::kAvatarIdFieldNumber;
const int FriendBasicInfo::kAvatarFieldNumber;
const int FriendBasicInfo::kSignFieldNumber;
const int FriendBasicInfo::kLevelFieldNumber;
#endif  // !_MSC_VER

FriendBasicInfo::FriendBasicInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.FriendBasicInfo)
}

void FriendBasicInfo::InitAsDefaultInstance() {
}

FriendBasicInfo::FriendBasicInfo(const FriendBasicInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.FriendBasicInfo)
}

void FriendBasicInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_id_ = 0u;
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendBasicInfo::~FriendBasicInfo() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.FriendBasicInfo)
  SharedDtor();
}

void FriendBasicInfo::SharedDtor() {
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_name_;
  }
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (this != default_instance_) {
  }
}

void FriendBasicInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendBasicInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendBasicInfo_descriptor_;
}

const FriendBasicInfo& FriendBasicInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

FriendBasicInfo* FriendBasicInfo::default_instance_ = NULL;

FriendBasicInfo* FriendBasicInfo::New() const {
  return new FriendBasicInfo;
}

void FriendBasicInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FriendBasicInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(avatar_id_, level_);
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nick_name_->clear();
      }
    }
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_->clear();
      }
    }
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendBasicInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.FriendBasicInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 2;
      case 2: {
        if (tag == 18) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nick_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_avatar_id;
        break;
      }

      // optional uint32 avatar_id = 5;
      case 5: {
        if (tag == 40) {
         parse_avatar_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_id_)));
          set_has_avatar_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_avatar;
        break;
      }

      // optional string avatar = 6;
      case 6: {
        if (tag == 50) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->avatar().data(), this->avatar().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "avatar");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sign;
        break;
      }

      // optional string sign = 7;
      case 7: {
        if (tag == 58) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sign");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_level;
        break;
      }

      // optional uint32 level = 8;
      case 8: {
        if (tag == 64) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.FriendBasicInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.FriendBasicInfo)
  return false;
#undef DO_
}

void FriendBasicInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.FriendBasicInfo)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nick_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nick_name(), output);
  }

  // optional uint32 avatar_id = 5;
  if (has_avatar_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->avatar_id(), output);
  }

  // optional string avatar = 6;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->avatar(), output);
  }

  // optional string sign = 7;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->sign(), output);
  }

  // optional uint32 level = 8;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.FriendBasicInfo)
}

::google::protobuf::uint8* FriendBasicInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.FriendBasicInfo)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nick_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nick_name(), target);
  }

  // optional uint32 avatar_id = 5;
  if (has_avatar_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->avatar_id(), target);
  }

  // optional string avatar = 6;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->avatar(), target);
  }

  // optional string sign = 7;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sign(), target);
  }

  // optional uint32 level = 8;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.FriendBasicInfo)
  return target;
}

int FriendBasicInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string nick_name = 2;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

    // optional uint32 avatar_id = 5;
    if (has_avatar_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatar_id());
    }

    // optional string avatar = 6;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar());
    }

    // optional string sign = 7;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

    // optional uint32 level = 8;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendBasicInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendBasicInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendBasicInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendBasicInfo::MergeFrom(const FriendBasicInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_avatar_id()) {
      set_avatar_id(from.avatar_id());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendBasicInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendBasicInfo::CopyFrom(const FriendBasicInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendBasicInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FriendBasicInfo::Swap(FriendBasicInfo* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(avatar_id_, other->avatar_id_);
    std::swap(avatar_, other->avatar_);
    std::swap(sign_, other->sign_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendBasicInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendBasicInfo_descriptor_;
  metadata.reflection = FriendBasicInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFriendBasicInfoResponse::kUserIdFieldNumber;
const int GetFriendBasicInfoResponse::kFriendInfoFieldNumber;
#endif  // !_MSC_VER

GetFriendBasicInfoResponse::GetFriendBasicInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.GetFriendBasicInfoResponse)
}

void GetFriendBasicInfoResponse::InitAsDefaultInstance() {
}

GetFriendBasicInfoResponse::GetFriendBasicInfoResponse(const GetFriendBasicInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.GetFriendBasicInfoResponse)
}

void GetFriendBasicInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFriendBasicInfoResponse::~GetFriendBasicInfoResponse() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.GetFriendBasicInfoResponse)
  SharedDtor();
}

void GetFriendBasicInfoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetFriendBasicInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFriendBasicInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFriendBasicInfoResponse_descriptor_;
}

const GetFriendBasicInfoResponse& GetFriendBasicInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

GetFriendBasicInfoResponse* GetFriendBasicInfoResponse::default_instance_ = NULL;

GetFriendBasicInfoResponse* GetFriendBasicInfoResponse::New() const {
  return new GetFriendBasicInfoResponse;
}

void GetFriendBasicInfoResponse::Clear() {
  user_id_ = GOOGLE_ULONGLONG(0);
  friend_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFriendBasicInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.GetFriendBasicInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_friend_info;
        break;
      }

      // repeated .TerminalProtocol.FriendBasicInfo friend_info = 2;
      case 2: {
        if (tag == 18) {
         parse_friend_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friend_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_friend_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.GetFriendBasicInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.GetFriendBasicInfoResponse)
  return false;
#undef DO_
}

void GetFriendBasicInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.GetFriendBasicInfoResponse)
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // repeated .TerminalProtocol.FriendBasicInfo friend_info = 2;
  for (int i = 0; i < this->friend_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->friend_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.GetFriendBasicInfoResponse)
}

::google::protobuf::uint8* GetFriendBasicInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.GetFriendBasicInfoResponse)
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // repeated .TerminalProtocol.FriendBasicInfo friend_info = 2;
  for (int i = 0; i < this->friend_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->friend_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.GetFriendBasicInfoResponse)
  return target;
}

int GetFriendBasicInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

  }
  // repeated .TerminalProtocol.FriendBasicInfo friend_info = 2;
  total_size += 1 * this->friend_info_size();
  for (int i = 0; i < this->friend_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friend_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFriendBasicInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFriendBasicInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFriendBasicInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFriendBasicInfoResponse::MergeFrom(const GetFriendBasicInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  friend_info_.MergeFrom(from.friend_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFriendBasicInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFriendBasicInfoResponse::CopyFrom(const GetFriendBasicInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendBasicInfoResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->friend_info())) return false;
  return true;
}

void GetFriendBasicInfoResponse::Swap(GetFriendBasicInfoResponse* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    friend_info_.Swap(&other->friend_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFriendBasicInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFriendBasicInfoResponse_descriptor_;
  metadata.reflection = GetFriendBasicInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserInfoRequest::kUserIdFieldNumber;
const int GetUserInfoRequest::kFriendIdFieldNumber;
#endif  // !_MSC_VER

GetUserInfoRequest::GetUserInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.GetUserInfoRequest)
}

void GetUserInfoRequest::InitAsDefaultInstance() {
}

GetUserInfoRequest::GetUserInfoRequest(const GetUserInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.GetUserInfoRequest)
}

void GetUserInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  friend_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserInfoRequest::~GetUserInfoRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.GetUserInfoRequest)
  SharedDtor();
}

void GetUserInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetUserInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUserInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUserInfoRequest_descriptor_;
}

const GetUserInfoRequest& GetUserInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

GetUserInfoRequest* GetUserInfoRequest::default_instance_ = NULL;

GetUserInfoRequest* GetUserInfoRequest::New() const {
  return new GetUserInfoRequest;
}

void GetUserInfoRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetUserInfoRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, friend_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUserInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.GetUserInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_friend_id;
        break;
      }

      // required uint64 friend_id = 2;
      case 2: {
        if (tag == 16) {
         parse_friend_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend_id_)));
          set_has_friend_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.GetUserInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.GetUserInfoRequest)
  return false;
#undef DO_
}

void GetUserInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.GetUserInfoRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 friend_id = 2;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->friend_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.GetUserInfoRequest)
}

::google::protobuf::uint8* GetUserInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.GetUserInfoRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 friend_id = 2;
  if (has_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->friend_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.GetUserInfoRequest)
  return target;
}

int GetUserInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 friend_id = 2;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friend_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUserInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUserInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUserInfoRequest::MergeFrom(const GetUserInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUserInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserInfoRequest::CopyFrom(const GetUserInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetUserInfoRequest::Swap(GetUserInfoRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(friend_id_, other->friend_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUserInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUserInfoRequest_descriptor_;
  metadata.reflection = GetUserInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserInfoResponse::kUserIdFieldNumber;
const int GetUserInfoResponse::kTtNumberFieldNumber;
const int GetUserInfoResponse::kUserNameFieldNumber;
const int GetUserInfoResponse::kNickNameFieldNumber;
const int GetUserInfoResponse::kSexFieldNumber;
const int GetUserInfoResponse::kMobileFieldNumber;
const int GetUserInfoResponse::kBirthdayFieldNumber;
const int GetUserInfoResponse::kEmailFieldNumber;
const int GetUserInfoResponse::kUserGradeFieldNumber;
const int GetUserInfoResponse::kAgeFieldNumber;
const int GetUserInfoResponse::kConstellationFieldNumber;
const int GetUserInfoResponse::kSignFieldNumber;
const int GetUserInfoResponse::kLikeFieldNumber;
const int GetUserInfoResponse::kCityFieldNumber;
const int GetUserInfoResponse::kPersonalDescFieldNumber;
const int GetUserInfoResponse::kRealNameFieldNumber;
const int GetUserInfoResponse::kFriendIdFieldNumber;
#endif  // !_MSC_VER

GetUserInfoResponse::GetUserInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.GetUserInfoResponse)
}

void GetUserInfoResponse::InitAsDefaultInstance() {
}

GetUserInfoResponse::GetUserInfoResponse(const GetUserInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.GetUserInfoResponse)
}

void GetUserInfoResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  tt_number_ = GOOGLE_ULONGLONG(0);
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 0u;
  mobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  birthday_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_grade_ = 0u;
  age_ = 0u;
  constellation_ = 0u;
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  like_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  personal_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  friend_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserInfoResponse::~GetUserInfoResponse() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.GetUserInfoResponse)
  SharedDtor();
}

void GetUserInfoResponse::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_name_;
  }
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_name_;
  }
  if (mobile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_;
  }
  if (birthday_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete birthday_;
  }
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (like_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete like_;
  }
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_;
  }
  if (personal_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete personal_desc_;
  }
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (this != default_instance_) {
  }
}

void GetUserInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUserInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUserInfoResponse_descriptor_;
}

const GetUserInfoResponse& GetUserInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

GetUserInfoResponse* GetUserInfoResponse::default_instance_ = NULL;

GetUserInfoResponse* GetUserInfoResponse::New() const {
  return new GetUserInfoResponse;
}

void GetUserInfoResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetUserInfoResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(user_id_, tt_number_);
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_name_->clear();
      }
    }
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nick_name_->clear();
      }
    }
    sex_ = 0u;
    if (has_mobile()) {
      if (mobile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_->clear();
      }
    }
    if (has_birthday()) {
      if (birthday_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        birthday_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        email_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(age_, constellation_);
    user_grade_ = 0u;
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_->clear();
      }
    }
    if (has_like()) {
      if (like_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        like_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        city_->clear();
      }
    }
    if (has_personal_desc()) {
      if (personal_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        personal_desc_->clear();
      }
    }
    if (has_real_name()) {
      if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        real_name_->clear();
      }
    }
  }
  friend_id_ = GOOGLE_ULONGLONG(0);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUserInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.GetUserInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tt_number;
        break;
      }

      // optional uint64 tt_number = 2;
      case 2: {
        if (tag == 16) {
         parse_tt_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tt_number_)));
          set_has_tt_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user_name;
        break;
      }

      // optional string user_name = 3;
      case 3: {
        if (tag == 26) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 4;
      case 4: {
        if (tag == 34) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nick_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 5;
      case 5: {
        if (tag == 40) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_mobile;
        break;
      }

      // optional string mobile = 6;
      case 6: {
        if (tag == 50) {
         parse_mobile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mobile().data(), this->mobile().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mobile");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_birthday;
        break;
      }

      // optional string birthday = 7;
      case 7: {
        if (tag == 58) {
         parse_birthday:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_birthday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->birthday().data(), this->birthday().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "birthday");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_email;
        break;
      }

      // optional string email = 8;
      case 8: {
        if (tag == 66) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "email");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_user_grade;
        break;
      }

      // optional uint32 user_grade = 9;
      case 9: {
        if (tag == 72) {
         parse_user_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_grade_)));
          set_has_user_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_age;
        break;
      }

      // optional uint32 age = 10;
      case 10: {
        if (tag == 80) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &age_)));
          set_has_age();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_constellation;
        break;
      }

      // optional uint32 constellation = 11;
      case 11: {
        if (tag == 88) {
         parse_constellation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &constellation_)));
          set_has_constellation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_sign;
        break;
      }

      // optional string sign = 12;
      case 12: {
        if (tag == 98) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sign");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_like;
        break;
      }

      // optional string like = 13;
      case 13: {
        if (tag == 106) {
         parse_like:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_like()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->like().data(), this->like().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "like");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_city;
        break;
      }

      // optional string city = 14;
      case 14: {
        if (tag == 114) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "city");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_personal_desc;
        break;
      }

      // optional string personal_desc = 15;
      case 15: {
        if (tag == 122) {
         parse_personal_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_personal_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->personal_desc().data(), this->personal_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "personal_desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_real_name;
        break;
      }

      // optional string real_name = 16;
      case 16: {
        if (tag == 130) {
         parse_real_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_real_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->real_name().data(), this->real_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "real_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_friend_id;
        break;
      }

      // optional uint64 friend_id = 17;
      case 17: {
        if (tag == 136) {
         parse_friend_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend_id_)));
          set_has_friend_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.GetUserInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.GetUserInfoResponse)
  return false;
#undef DO_
}

void GetUserInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.GetUserInfoResponse)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint64 tt_number = 2;
  if (has_tt_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->tt_number(), output);
  }

  // optional string user_name = 3;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_name(), output);
  }

  // optional string nick_name = 4;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nick_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->nick_name(), output);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sex(), output);
  }

  // optional string mobile = 6;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mobile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->mobile(), output);
  }

  // optional string birthday = 7;
  if (has_birthday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->birthday().data(), this->birthday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "birthday");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->birthday(), output);
  }

  // optional string email = 8;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->email(), output);
  }

  // optional uint32 user_grade = 9;
  if (has_user_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->user_grade(), output);
  }

  // optional uint32 age = 10;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->age(), output);
  }

  // optional uint32 constellation = 11;
  if (has_constellation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->constellation(), output);
  }

  // optional string sign = 12;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->sign(), output);
  }

  // optional string like = 13;
  if (has_like()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->like().data(), this->like().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "like");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->like(), output);
  }

  // optional string city = 14;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->city(), output);
  }

  // optional string personal_desc = 15;
  if (has_personal_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->personal_desc().data(), this->personal_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "personal_desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->personal_desc(), output);
  }

  // optional string real_name = 16;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->real_name().data(), this->real_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "real_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->real_name(), output);
  }

  // optional uint64 friend_id = 17;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->friend_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.GetUserInfoResponse)
}

::google::protobuf::uint8* GetUserInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.GetUserInfoResponse)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint64 tt_number = 2;
  if (has_tt_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->tt_number(), target);
  }

  // optional string user_name = 3;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_name(), target);
  }

  // optional string nick_name = 4;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nick_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nick_name(), target);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sex(), target);
  }

  // optional string mobile = 6;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mobile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->mobile(), target);
  }

  // optional string birthday = 7;
  if (has_birthday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->birthday().data(), this->birthday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "birthday");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->birthday(), target);
  }

  // optional string email = 8;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->email(), target);
  }

  // optional uint32 user_grade = 9;
  if (has_user_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->user_grade(), target);
  }

  // optional uint32 age = 10;
  if (has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->age(), target);
  }

  // optional uint32 constellation = 11;
  if (has_constellation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->constellation(), target);
  }

  // optional string sign = 12;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->sign(), target);
  }

  // optional string like = 13;
  if (has_like()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->like().data(), this->like().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "like");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->like(), target);
  }

  // optional string city = 14;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->city(), target);
  }

  // optional string personal_desc = 15;
  if (has_personal_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->personal_desc().data(), this->personal_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "personal_desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->personal_desc(), target);
  }

  // optional string real_name = 16;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->real_name().data(), this->real_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "real_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->real_name(), target);
  }

  // optional uint64 friend_id = 17;
  if (has_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->friend_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.GetUserInfoResponse)
  return target;
}

int GetUserInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 tt_number = 2;
    if (has_tt_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tt_number());
    }

    // optional string user_name = 3;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional string nick_name = 4;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

    // optional uint32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional string mobile = 6;
    if (has_mobile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobile());
    }

    // optional string birthday = 7;
    if (has_birthday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->birthday());
    }

    // optional string email = 8;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 user_grade = 9;
    if (has_user_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_grade());
    }

    // optional uint32 age = 10;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->age());
    }

    // optional uint32 constellation = 11;
    if (has_constellation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->constellation());
    }

    // optional string sign = 12;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

    // optional string like = 13;
    if (has_like()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->like());
    }

    // optional string city = 14;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // optional string personal_desc = 15;
    if (has_personal_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->personal_desc());
    }

    // optional string real_name = 16;
    if (has_real_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->real_name());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 friend_id = 17;
    if (has_friend_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friend_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUserInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUserInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUserInfoResponse::MergeFrom(const GetUserInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_tt_number()) {
      set_tt_number(from.tt_number());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_mobile()) {
      set_mobile(from.mobile());
    }
    if (from.has_birthday()) {
      set_birthday(from.birthday());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_user_grade()) {
      set_user_grade(from.user_grade());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
    if (from.has_constellation()) {
      set_constellation(from.constellation());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_like()) {
      set_like(from.like());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_personal_desc()) {
      set_personal_desc(from.personal_desc());
    }
    if (from.has_real_name()) {
      set_real_name(from.real_name());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUserInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserInfoResponse::CopyFrom(const GetUserInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetUserInfoResponse::Swap(GetUserInfoResponse* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(tt_number_, other->tt_number_);
    std::swap(user_name_, other->user_name_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(sex_, other->sex_);
    std::swap(mobile_, other->mobile_);
    std::swap(birthday_, other->birthday_);
    std::swap(email_, other->email_);
    std::swap(user_grade_, other->user_grade_);
    std::swap(age_, other->age_);
    std::swap(constellation_, other->constellation_);
    std::swap(sign_, other->sign_);
    std::swap(like_, other->like_);
    std::swap(city_, other->city_);
    std::swap(personal_desc_, other->personal_desc_);
    std::swap(real_name_, other->real_name_);
    std::swap(friend_id_, other->friend_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUserInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUserInfoResponse_descriptor_;
  metadata.reflection = GetUserInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeOnlineStateRequest::kUserIdFieldNumber;
const int ChangeOnlineStateRequest::kTerminalTypeFieldNumber;
const int ChangeOnlineStateRequest::kOnlineStateFieldNumber;
#endif  // !_MSC_VER

ChangeOnlineStateRequest::ChangeOnlineStateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.ChangeOnlineStateRequest)
}

void ChangeOnlineStateRequest::InitAsDefaultInstance() {
}

ChangeOnlineStateRequest::ChangeOnlineStateRequest(const ChangeOnlineStateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.ChangeOnlineStateRequest)
}

void ChangeOnlineStateRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  terminal_type_ = 0u;
  online_state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeOnlineStateRequest::~ChangeOnlineStateRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.ChangeOnlineStateRequest)
  SharedDtor();
}

void ChangeOnlineStateRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeOnlineStateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeOnlineStateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeOnlineStateRequest_descriptor_;
}

const ChangeOnlineStateRequest& ChangeOnlineStateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

ChangeOnlineStateRequest* ChangeOnlineStateRequest::default_instance_ = NULL;

ChangeOnlineStateRequest* ChangeOnlineStateRequest::New() const {
  return new ChangeOnlineStateRequest;
}

void ChangeOnlineStateRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChangeOnlineStateRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, online_state_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeOnlineStateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.ChangeOnlineStateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_terminal_type;
        break;
      }

      // required uint32 terminal_type = 2;
      case 2: {
        if (tag == 16) {
         parse_terminal_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terminal_type_)));
          set_has_terminal_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_online_state;
        break;
      }

      // required uint32 online_state = 3;
      case 3: {
        if (tag == 24) {
         parse_online_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_state_)));
          set_has_online_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.ChangeOnlineStateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.ChangeOnlineStateRequest)
  return false;
#undef DO_
}

void ChangeOnlineStateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.ChangeOnlineStateRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint32 terminal_type = 2;
  if (has_terminal_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->terminal_type(), output);
  }

  // required uint32 online_state = 3;
  if (has_online_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->online_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.ChangeOnlineStateRequest)
}

::google::protobuf::uint8* ChangeOnlineStateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.ChangeOnlineStateRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint32 terminal_type = 2;
  if (has_terminal_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->terminal_type(), target);
  }

  // required uint32 online_state = 3;
  if (has_online_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->online_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.ChangeOnlineStateRequest)
  return target;
}

int ChangeOnlineStateRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint32 terminal_type = 2;
    if (has_terminal_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terminal_type());
    }

    // required uint32 online_state = 3;
    if (has_online_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeOnlineStateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeOnlineStateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeOnlineStateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeOnlineStateRequest::MergeFrom(const ChangeOnlineStateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_terminal_type()) {
      set_terminal_type(from.terminal_type());
    }
    if (from.has_online_state()) {
      set_online_state(from.online_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeOnlineStateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeOnlineStateRequest::CopyFrom(const ChangeOnlineStateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeOnlineStateRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ChangeOnlineStateRequest::Swap(ChangeOnlineStateRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(terminal_type_, other->terminal_type_);
    std::swap(online_state_, other->online_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeOnlineStateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeOnlineStateRequest_descriptor_;
  metadata.reflection = ChangeOnlineStateRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendOnlineStateNotify::kUserIdFieldNumber;
const int FriendOnlineStateNotify::kTerminalTypeFieldNumber;
const int FriendOnlineStateNotify::kOnlineStateFieldNumber;
const int FriendOnlineStateNotify::kMtsIpFieldNumber;
const int FriendOnlineStateNotify::kMtsPortFieldNumber;
#endif  // !_MSC_VER

FriendOnlineStateNotify::FriendOnlineStateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.FriendOnlineStateNotify)
}

void FriendOnlineStateNotify::InitAsDefaultInstance() {
}

FriendOnlineStateNotify::FriendOnlineStateNotify(const FriendOnlineStateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.FriendOnlineStateNotify)
}

void FriendOnlineStateNotify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  terminal_type_ = 0u;
  online_state_ = 0u;
  mts_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mts_port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendOnlineStateNotify::~FriendOnlineStateNotify() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.FriendOnlineStateNotify)
  SharedDtor();
}

void FriendOnlineStateNotify::SharedDtor() {
  if (mts_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mts_ip_;
  }
  if (this != default_instance_) {
  }
}

void FriendOnlineStateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendOnlineStateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendOnlineStateNotify_descriptor_;
}

const FriendOnlineStateNotify& FriendOnlineStateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

FriendOnlineStateNotify* FriendOnlineStateNotify::default_instance_ = NULL;

FriendOnlineStateNotify* FriendOnlineStateNotify::New() const {
  return new FriendOnlineStateNotify;
}

void FriendOnlineStateNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FriendOnlineStateNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(user_id_, online_state_);
    if (has_mts_ip()) {
      if (mts_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mts_ip_->clear();
      }
    }
    mts_port_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendOnlineStateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.FriendOnlineStateNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_terminal_type;
        break;
      }

      // required uint32 terminal_type = 2;
      case 2: {
        if (tag == 16) {
         parse_terminal_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terminal_type_)));
          set_has_terminal_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_online_state;
        break;
      }

      // required uint32 online_state = 3;
      case 3: {
        if (tag == 24) {
         parse_online_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_state_)));
          set_has_online_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mts_ip;
        break;
      }

      // optional string mts_ip = 4;
      case 4: {
        if (tag == 34) {
         parse_mts_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mts_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mts_ip().data(), this->mts_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mts_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mts_port;
        break;
      }

      // optional uint32 mts_port = 5;
      case 5: {
        if (tag == 40) {
         parse_mts_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mts_port_)));
          set_has_mts_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.FriendOnlineStateNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.FriendOnlineStateNotify)
  return false;
#undef DO_
}

void FriendOnlineStateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.FriendOnlineStateNotify)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint32 terminal_type = 2;
  if (has_terminal_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->terminal_type(), output);
  }

  // required uint32 online_state = 3;
  if (has_online_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->online_state(), output);
  }

  // optional string mts_ip = 4;
  if (has_mts_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mts_ip().data(), this->mts_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mts_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->mts_ip(), output);
  }

  // optional uint32 mts_port = 5;
  if (has_mts_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->mts_port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.FriendOnlineStateNotify)
}

::google::protobuf::uint8* FriendOnlineStateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.FriendOnlineStateNotify)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint32 terminal_type = 2;
  if (has_terminal_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->terminal_type(), target);
  }

  // required uint32 online_state = 3;
  if (has_online_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->online_state(), target);
  }

  // optional string mts_ip = 4;
  if (has_mts_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mts_ip().data(), this->mts_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mts_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mts_ip(), target);
  }

  // optional uint32 mts_port = 5;
  if (has_mts_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->mts_port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.FriendOnlineStateNotify)
  return target;
}

int FriendOnlineStateNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint32 terminal_type = 2;
    if (has_terminal_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terminal_type());
    }

    // required uint32 online_state = 3;
    if (has_online_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_state());
    }

    // optional string mts_ip = 4;
    if (has_mts_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mts_ip());
    }

    // optional uint32 mts_port = 5;
    if (has_mts_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mts_port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendOnlineStateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendOnlineStateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendOnlineStateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendOnlineStateNotify::MergeFrom(const FriendOnlineStateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_terminal_type()) {
      set_terminal_type(from.terminal_type());
    }
    if (from.has_online_state()) {
      set_online_state(from.online_state());
    }
    if (from.has_mts_ip()) {
      set_mts_ip(from.mts_ip());
    }
    if (from.has_mts_port()) {
      set_mts_port(from.mts_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendOnlineStateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendOnlineStateNotify::CopyFrom(const FriendOnlineStateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendOnlineStateNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FriendOnlineStateNotify::Swap(FriendOnlineStateNotify* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(terminal_type_, other->terminal_type_);
    std::swap(online_state_, other->online_state_);
    std::swap(mts_ip_, other->mts_ip_);
    std::swap(mts_port_, other->mts_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendOnlineStateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendOnlineStateNotify_descriptor_;
  metadata.reflection = FriendOnlineStateNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendsOnlineStateNotify::kUserIdFieldNumber;
const int FriendsOnlineStateNotify::kSumNumFieldNumber;
const int FriendsOnlineStateNotify::kCurNumFieldNumber;
const int FriendsOnlineStateNotify::kFriendStateFieldNumber;
#endif  // !_MSC_VER

FriendsOnlineStateNotify::FriendsOnlineStateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.FriendsOnlineStateNotify)
}

void FriendsOnlineStateNotify::InitAsDefaultInstance() {
}

FriendsOnlineStateNotify::FriendsOnlineStateNotify(const FriendsOnlineStateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.FriendsOnlineStateNotify)
}

void FriendsOnlineStateNotify::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  sum_num_ = 0u;
  cur_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendsOnlineStateNotify::~FriendsOnlineStateNotify() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.FriendsOnlineStateNotify)
  SharedDtor();
}

void FriendsOnlineStateNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendsOnlineStateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendsOnlineStateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendsOnlineStateNotify_descriptor_;
}

const FriendsOnlineStateNotify& FriendsOnlineStateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

FriendsOnlineStateNotify* FriendsOnlineStateNotify::default_instance_ = NULL;

FriendsOnlineStateNotify* FriendsOnlineStateNotify::New() const {
  return new FriendsOnlineStateNotify;
}

void FriendsOnlineStateNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FriendsOnlineStateNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, cur_num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  friend_state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendsOnlineStateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.FriendsOnlineStateNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sum_num;
        break;
      }

      // required uint32 sum_num = 2;
      case 2: {
        if (tag == 16) {
         parse_sum_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sum_num_)));
          set_has_sum_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cur_num;
        break;
      }

      // required uint32 cur_num = 3;
      case 3: {
        if (tag == 24) {
         parse_cur_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_num_)));
          set_has_cur_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_friend_state;
        break;
      }

      // repeated .TerminalProtocol.FriendOnlineStateNotify friend_state = 4;
      case 4: {
        if (tag == 34) {
         parse_friend_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friend_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_friend_state;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.FriendsOnlineStateNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.FriendsOnlineStateNotify)
  return false;
#undef DO_
}

void FriendsOnlineStateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.FriendsOnlineStateNotify)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint32 sum_num = 2;
  if (has_sum_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sum_num(), output);
  }

  // required uint32 cur_num = 3;
  if (has_cur_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cur_num(), output);
  }

  // repeated .TerminalProtocol.FriendOnlineStateNotify friend_state = 4;
  for (int i = 0; i < this->friend_state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->friend_state(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.FriendsOnlineStateNotify)
}

::google::protobuf::uint8* FriendsOnlineStateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.FriendsOnlineStateNotify)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint32 sum_num = 2;
  if (has_sum_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sum_num(), target);
  }

  // required uint32 cur_num = 3;
  if (has_cur_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cur_num(), target);
  }

  // repeated .TerminalProtocol.FriendOnlineStateNotify friend_state = 4;
  for (int i = 0; i < this->friend_state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->friend_state(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.FriendsOnlineStateNotify)
  return target;
}

int FriendsOnlineStateNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint32 sum_num = 2;
    if (has_sum_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sum_num());
    }

    // required uint32 cur_num = 3;
    if (has_cur_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_num());
    }

  }
  // repeated .TerminalProtocol.FriendOnlineStateNotify friend_state = 4;
  total_size += 1 * this->friend_state_size();
  for (int i = 0; i < this->friend_state_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friend_state(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendsOnlineStateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendsOnlineStateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendsOnlineStateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendsOnlineStateNotify::MergeFrom(const FriendsOnlineStateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  friend_state_.MergeFrom(from.friend_state_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_sum_num()) {
      set_sum_num(from.sum_num());
    }
    if (from.has_cur_num()) {
      set_cur_num(from.cur_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendsOnlineStateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendsOnlineStateNotify::CopyFrom(const FriendsOnlineStateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendsOnlineStateNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->friend_state())) return false;
  return true;
}

void FriendsOnlineStateNotify::Swap(FriendsOnlineStateNotify* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(sum_num_, other->sum_num_);
    std::swap(cur_num_, other->cur_num_);
    friend_state_.Swap(&other->friend_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendsOnlineStateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendsOnlineStateNotify_descriptor_;
  metadata.reflection = FriendsOnlineStateNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGroupListRequest::kUserIdFieldNumber;
#endif  // !_MSC_VER

GetGroupListRequest::GetGroupListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.GetGroupListRequest)
}

void GetGroupListRequest::InitAsDefaultInstance() {
}

GetGroupListRequest::GetGroupListRequest(const GetGroupListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.GetGroupListRequest)
}

void GetGroupListRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGroupListRequest::~GetGroupListRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.GetGroupListRequest)
  SharedDtor();
}

void GetGroupListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGroupListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGroupListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGroupListRequest_descriptor_;
}

const GetGroupListRequest& GetGroupListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

GetGroupListRequest* GetGroupListRequest::default_instance_ = NULL;

GetGroupListRequest* GetGroupListRequest::New() const {
  return new GetGroupListRequest;
}

void GetGroupListRequest::Clear() {
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGroupListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.GetGroupListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.GetGroupListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.GetGroupListRequest)
  return false;
#undef DO_
}

void GetGroupListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.GetGroupListRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.GetGroupListRequest)
}

::google::protobuf::uint8* GetGroupListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.GetGroupListRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.GetGroupListRequest)
  return target;
}

int GetGroupListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroupListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGroupListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGroupListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGroupListRequest::MergeFrom(const GetGroupListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGroupListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGroupListRequest::CopyFrom(const GetGroupListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetGroupListRequest::Swap(GetGroupListRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGroupListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGroupListRequest_descriptor_;
  metadata.reflection = GetGroupListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupListItem::kGroupIdFieldNumber;
const int GroupListItem::kGroupNameFieldNumber;
const int GroupListItem::kRemarkFieldNumber;
const int GroupListItem::kAvatarIdFieldNumber;
const int GroupListItem::kAvatarFieldNumber;
#endif  // !_MSC_VER

GroupListItem::GroupListItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.GroupListItem)
}

void GroupListItem::InitAsDefaultInstance() {
}

GroupListItem::GroupListItem(const GroupListItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.GroupListItem)
}

void GroupListItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  group_id_ = GOOGLE_ULONGLONG(0);
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_id_ = 0u;
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupListItem::~GroupListItem() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.GroupListItem)
  SharedDtor();
}

void GroupListItem::SharedDtor() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete remark_;
  }
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (this != default_instance_) {
  }
}

void GroupListItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupListItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupListItem_descriptor_;
}

const GroupListItem& GroupListItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

GroupListItem* GroupListItem::default_instance_ = NULL;

GroupListItem* GroupListItem::New() const {
  return new GroupListItem;
}

void GroupListItem::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    group_id_ = GOOGLE_ULONGLONG(0);
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_name_->clear();
      }
    }
    if (has_remark()) {
      if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        remark_->clear();
      }
    }
    avatar_id_ = 0u;
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupListItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.GroupListItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_group_name;
        break;
      }

      // optional string group_name = 2;
      case 2: {
        if (tag == 18) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_name().data(), this->group_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_remark;
        break;
      }

      // optional string remark = 3;
      case 3: {
        if (tag == 26) {
         parse_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->remark().data(), this->remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "remark");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_avatar_id;
        break;
      }

      // optional uint32 avatar_id = 4;
      case 4: {
        if (tag == 32) {
         parse_avatar_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_id_)));
          set_has_avatar_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_avatar;
        break;
      }

      // optional string avatar = 5;
      case 5: {
        if (tag == 42) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->avatar().data(), this->avatar().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "avatar");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.GroupListItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.GroupListItem)
  return false;
#undef DO_
}

void GroupListItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.GroupListItem)
  // required uint64 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->group_id(), output);
  }

  // optional string group_name = 2;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->group_name(), output);
  }

  // optional string remark = 3;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->remark(), output);
  }

  // optional uint32 avatar_id = 4;
  if (has_avatar_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->avatar_id(), output);
  }

  // optional string avatar = 5;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->avatar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.GroupListItem)
}

::google::protobuf::uint8* GroupListItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.GroupListItem)
  // required uint64 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->group_id(), target);
  }

  // optional string group_name = 2;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->group_name(), target);
  }

  // optional string remark = 3;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->remark(), target);
  }

  // optional uint32 avatar_id = 4;
  if (has_avatar_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->avatar_id(), target);
  }

  // optional string avatar = 5;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->avatar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.GroupListItem)
  return target;
}

int GroupListItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional string group_name = 2;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // optional string remark = 3;
    if (has_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remark());
    }

    // optional uint32 avatar_id = 4;
    if (has_avatar_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatar_id());
    }

    // optional string avatar = 5;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupListItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupListItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupListItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupListItem::MergeFrom(const GroupListItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
    if (from.has_remark()) {
      set_remark(from.remark());
    }
    if (from.has_avatar_id()) {
      set_avatar_id(from.avatar_id());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupListItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupListItem::CopyFrom(const GroupListItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupListItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GroupListItem::Swap(GroupListItem* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(group_name_, other->group_name_);
    std::swap(remark_, other->remark_);
    std::swap(avatar_id_, other->avatar_id_);
    std::swap(avatar_, other->avatar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupListItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupListItem_descriptor_;
  metadata.reflection = GroupListItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGroupListResponse::kUserIdFieldNumber;
const int GetGroupListResponse::kGroupItemFieldNumber;
#endif  // !_MSC_VER

GetGroupListResponse::GetGroupListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.GetGroupListResponse)
}

void GetGroupListResponse::InitAsDefaultInstance() {
}

GetGroupListResponse::GetGroupListResponse(const GetGroupListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.GetGroupListResponse)
}

void GetGroupListResponse::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGroupListResponse::~GetGroupListResponse() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.GetGroupListResponse)
  SharedDtor();
}

void GetGroupListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGroupListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGroupListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGroupListResponse_descriptor_;
}

const GetGroupListResponse& GetGroupListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

GetGroupListResponse* GetGroupListResponse::default_instance_ = NULL;

GetGroupListResponse* GetGroupListResponse::New() const {
  return new GetGroupListResponse;
}

void GetGroupListResponse::Clear() {
  user_id_ = GOOGLE_ULONGLONG(0);
  group_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGroupListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.GetGroupListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_group_item;
        break;
      }

      // repeated .TerminalProtocol.GroupListItem group_item = 2;
      case 2: {
        if (tag == 18) {
         parse_group_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_group_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.GetGroupListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.GetGroupListResponse)
  return false;
#undef DO_
}

void GetGroupListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.GetGroupListResponse)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // repeated .TerminalProtocol.GroupListItem group_item = 2;
  for (int i = 0; i < this->group_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->group_item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.GetGroupListResponse)
}

::google::protobuf::uint8* GetGroupListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.GetGroupListResponse)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // repeated .TerminalProtocol.GroupListItem group_item = 2;
  for (int i = 0; i < this->group_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->group_item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.GetGroupListResponse)
  return target;
}

int GetGroupListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

  }
  // repeated .TerminalProtocol.GroupListItem group_item = 2;
  total_size += 1 * this->group_item_size();
  for (int i = 0; i < this->group_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group_item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroupListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGroupListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGroupListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGroupListResponse::MergeFrom(const GetGroupListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_item_.MergeFrom(from.group_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGroupListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGroupListResponse::CopyFrom(const GetGroupListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->group_item())) return false;
  return true;
}

void GetGroupListResponse::Swap(GetGroupListResponse* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    group_item_.Swap(&other->group_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGroupListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGroupListResponse_descriptor_;
  metadata.reflection = GetGroupListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateGroupRequest::kUserIdFieldNumber;
const int CreateGroupRequest::kGroupNameFieldNumber;
const int CreateGroupRequest::kGroupTypeFieldNumber;
const int CreateGroupRequest::kGroupIconFieldNumber;
const int CreateGroupRequest::kVerifyTypeFieldNumber;
const int CreateGroupRequest::kGroupIntroFieldNumber;
const int CreateGroupRequest::kGroupSignFieldNumber;
const int CreateGroupRequest::kAvatarIdFieldNumber;
const int CreateGroupRequest::kSubTypeFieldNumber;
#endif  // !_MSC_VER

CreateGroupRequest::CreateGroupRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.CreateGroupRequest)
}

void CreateGroupRequest::InitAsDefaultInstance() {
}

CreateGroupRequest::CreateGroupRequest(const CreateGroupRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.CreateGroupRequest)
}

void CreateGroupRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_type_ = 0u;
  group_icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verify_type_ = 0u;
  group_intro_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_id_ = 0u;
  sub_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateGroupRequest::~CreateGroupRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.CreateGroupRequest)
  SharedDtor();
}

void CreateGroupRequest::SharedDtor() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (group_icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_icon_;
  }
  if (group_intro_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_intro_;
  }
  if (group_sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_sign_;
  }
  if (this != default_instance_) {
  }
}

void CreateGroupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateGroupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateGroupRequest_descriptor_;
}

const CreateGroupRequest& CreateGroupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

CreateGroupRequest* CreateGroupRequest::default_instance_ = NULL;

CreateGroupRequest* CreateGroupRequest::New() const {
  return new CreateGroupRequest;
}

void CreateGroupRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CreateGroupRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(group_type_, verify_type_);
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_name_->clear();
      }
    }
    if (has_group_icon()) {
      if (group_icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_icon_->clear();
      }
    }
    if (has_group_intro()) {
      if (group_intro_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_intro_->clear();
      }
    }
    if (has_group_sign()) {
      if (group_sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_sign_->clear();
      }
    }
    avatar_id_ = 0u;
  }
  sub_type_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.CreateGroupRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_group_name;
        break;
      }

      // required string group_name = 2;
      case 2: {
        if (tag == 18) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_name().data(), this->group_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_type;
        break;
      }

      // optional uint32 group_type = 3;
      case 3: {
        if (tag == 24) {
         parse_group_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_type_)));
          set_has_group_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_group_icon;
        break;
      }

      // optional string group_icon = 4;
      case 4: {
        if (tag == 34) {
         parse_group_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_icon().data(), this->group_icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group_icon");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_verify_type;
        break;
      }

      // optional uint32 verify_type = 5;
      case 5: {
        if (tag == 40) {
         parse_verify_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &verify_type_)));
          set_has_verify_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_group_intro;
        break;
      }

      // optional string group_intro = 6;
      case 6: {
        if (tag == 50) {
         parse_group_intro:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_intro()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_intro().data(), this->group_intro().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group_intro");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_group_sign;
        break;
      }

      // optional string group_sign = 7;
      case 7: {
        if (tag == 58) {
         parse_group_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_sign().data(), this->group_sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group_sign");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_avatar_id;
        break;
      }

      // optional uint32 avatar_id = 8;
      case 8: {
        if (tag == 64) {
         parse_avatar_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_id_)));
          set_has_avatar_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_sub_type;
        break;
      }

      // optional uint32 sub_type = 9;
      case 9: {
        if (tag == 72) {
         parse_sub_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sub_type_)));
          set_has_sub_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.CreateGroupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.CreateGroupRequest)
  return false;
#undef DO_
}

void CreateGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.CreateGroupRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required string group_name = 2;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->group_name(), output);
  }

  // optional uint32 group_type = 3;
  if (has_group_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->group_type(), output);
  }

  // optional string group_icon = 4;
  if (has_group_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_icon().data(), this->group_icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_icon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->group_icon(), output);
  }

  // optional uint32 verify_type = 5;
  if (has_verify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->verify_type(), output);
  }

  // optional string group_intro = 6;
  if (has_group_intro()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_intro().data(), this->group_intro().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_intro");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->group_intro(), output);
  }

  // optional string group_sign = 7;
  if (has_group_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_sign().data(), this->group_sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_sign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->group_sign(), output);
  }

  // optional uint32 avatar_id = 8;
  if (has_avatar_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->avatar_id(), output);
  }

  // optional uint32 sub_type = 9;
  if (has_sub_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->sub_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.CreateGroupRequest)
}

::google::protobuf::uint8* CreateGroupRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.CreateGroupRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required string group_name = 2;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->group_name(), target);
  }

  // optional uint32 group_type = 3;
  if (has_group_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->group_type(), target);
  }

  // optional string group_icon = 4;
  if (has_group_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_icon().data(), this->group_icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_icon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->group_icon(), target);
  }

  // optional uint32 verify_type = 5;
  if (has_verify_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->verify_type(), target);
  }

  // optional string group_intro = 6;
  if (has_group_intro()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_intro().data(), this->group_intro().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_intro");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->group_intro(), target);
  }

  // optional string group_sign = 7;
  if (has_group_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_sign().data(), this->group_sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_sign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->group_sign(), target);
  }

  // optional uint32 avatar_id = 8;
  if (has_avatar_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->avatar_id(), target);
  }

  // optional uint32 sub_type = 9;
  if (has_sub_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->sub_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.CreateGroupRequest)
  return target;
}

int CreateGroupRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required string group_name = 2;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // optional uint32 group_type = 3;
    if (has_group_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_type());
    }

    // optional string group_icon = 4;
    if (has_group_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_icon());
    }

    // optional uint32 verify_type = 5;
    if (has_verify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->verify_type());
    }

    // optional string group_intro = 6;
    if (has_group_intro()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_intro());
    }

    // optional string group_sign = 7;
    if (has_group_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_sign());
    }

    // optional uint32 avatar_id = 8;
    if (has_avatar_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatar_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 sub_type = 9;
    if (has_sub_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sub_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateGroupRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateGroupRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateGroupRequest::MergeFrom(const CreateGroupRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
    if (from.has_group_type()) {
      set_group_type(from.group_type());
    }
    if (from.has_group_icon()) {
      set_group_icon(from.group_icon());
    }
    if (from.has_verify_type()) {
      set_verify_type(from.verify_type());
    }
    if (from.has_group_intro()) {
      set_group_intro(from.group_intro());
    }
    if (from.has_group_sign()) {
      set_group_sign(from.group_sign());
    }
    if (from.has_avatar_id()) {
      set_avatar_id(from.avatar_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sub_type()) {
      set_sub_type(from.sub_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateGroupRequest::CopyFrom(const CreateGroupRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGroupRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CreateGroupRequest::Swap(CreateGroupRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_name_, other->group_name_);
    std::swap(group_type_, other->group_type_);
    std::swap(group_icon_, other->group_icon_);
    std::swap(verify_type_, other->verify_type_);
    std::swap(group_intro_, other->group_intro_);
    std::swap(group_sign_, other->group_sign_);
    std::swap(avatar_id_, other->avatar_id_);
    std::swap(sub_type_, other->sub_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateGroupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateGroupRequest_descriptor_;
  metadata.reflection = CreateGroupRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateGroupResponse::kResultFieldNumber;
const int CreateGroupResponse::kUserIdFieldNumber;
const int CreateGroupResponse::kGroupIdFieldNumber;
const int CreateGroupResponse::kGroupNumberFieldNumber;
#endif  // !_MSC_VER

CreateGroupResponse::CreateGroupResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.CreateGroupResponse)
}

void CreateGroupResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::TerminalProtocol::Result*>(&::TerminalProtocol::Result::default_instance());
}

CreateGroupResponse::CreateGroupResponse(const CreateGroupResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.CreateGroupResponse)
}

void CreateGroupResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  group_number_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateGroupResponse::~CreateGroupResponse() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.CreateGroupResponse)
  SharedDtor();
}

void CreateGroupResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void CreateGroupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateGroupResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateGroupResponse_descriptor_;
}

const CreateGroupResponse& CreateGroupResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

CreateGroupResponse* CreateGroupResponse::default_instance_ = NULL;

CreateGroupResponse* CreateGroupResponse::New() const {
  return new CreateGroupResponse;
}

void CreateGroupResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CreateGroupResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(user_id_, group_number_);
    if (has_result()) {
      if (result_ != NULL) result_->::TerminalProtocol::Result::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.CreateGroupResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TerminalProtocol.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_id;
        break;
      }

      // optional uint64 group_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_group_number;
        break;
      }

      // optional uint32 group_number = 4;
      case 4: {
        if (tag == 32) {
         parse_group_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_number_)));
          set_has_group_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.CreateGroupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.CreateGroupResponse)
  return false;
#undef DO_
}

void CreateGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.CreateGroupResponse)
  // required .TerminalProtocol.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional uint64 group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->group_id(), output);
  }

  // optional uint32 group_number = 4;
  if (has_group_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->group_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.CreateGroupResponse)
}

::google::protobuf::uint8* CreateGroupResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.CreateGroupResponse)
  // required .TerminalProtocol.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional uint64 group_id = 3;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->group_id(), target);
  }

  // optional uint32 group_number = 4;
  if (has_group_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->group_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.CreateGroupResponse)
  return target;
}

int CreateGroupResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TerminalProtocol.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 group_id = 3;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional uint32 group_number = 4;
    if (has_group_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateGroupResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateGroupResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateGroupResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateGroupResponse::MergeFrom(const CreateGroupResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::TerminalProtocol::Result::MergeFrom(from.result());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_number()) {
      set_group_number(from.group_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateGroupResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateGroupResponse::CopyFrom(const CreateGroupResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGroupResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void CreateGroupResponse::Swap(CreateGroupResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(group_number_, other->group_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateGroupResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateGroupResponse_descriptor_;
  metadata.reflection = CreateGroupResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinGroupRequest::kUserIdFieldNumber;
const int JoinGroupRequest::kGroupIdFieldNumber;
#endif  // !_MSC_VER

JoinGroupRequest::JoinGroupRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.JoinGroupRequest)
}

void JoinGroupRequest::InitAsDefaultInstance() {
}

JoinGroupRequest::JoinGroupRequest(const JoinGroupRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.JoinGroupRequest)
}

void JoinGroupRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinGroupRequest::~JoinGroupRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.JoinGroupRequest)
  SharedDtor();
}

void JoinGroupRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JoinGroupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinGroupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinGroupRequest_descriptor_;
}

const JoinGroupRequest& JoinGroupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

JoinGroupRequest* JoinGroupRequest::default_instance_ = NULL;

JoinGroupRequest* JoinGroupRequest::New() const {
  return new JoinGroupRequest;
}

void JoinGroupRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<JoinGroupRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, group_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.JoinGroupRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.JoinGroupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.JoinGroupRequest)
  return false;
#undef DO_
}

void JoinGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.JoinGroupRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.JoinGroupRequest)
}

::google::protobuf::uint8* JoinGroupRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.JoinGroupRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.JoinGroupRequest)
  return target;
}

int JoinGroupRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinGroupRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinGroupRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinGroupRequest::MergeFrom(const JoinGroupRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinGroupRequest::CopyFrom(const JoinGroupRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGroupRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void JoinGroupRequest::Swap(JoinGroupRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinGroupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinGroupRequest_descriptor_;
  metadata.reflection = JoinGroupRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinGroupResponse::kUserIdFieldNumber;
const int JoinGroupResponse::kGroupIdFieldNumber;
const int JoinGroupResponse::kVerifyTypeFieldNumber;
#endif  // !_MSC_VER

JoinGroupResponse::JoinGroupResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.JoinGroupResponse)
}

void JoinGroupResponse::InitAsDefaultInstance() {
}

JoinGroupResponse::JoinGroupResponse(const JoinGroupResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.JoinGroupResponse)
}

void JoinGroupResponse::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  verify_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinGroupResponse::~JoinGroupResponse() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.JoinGroupResponse)
  SharedDtor();
}

void JoinGroupResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JoinGroupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinGroupResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinGroupResponse_descriptor_;
}

const JoinGroupResponse& JoinGroupResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

JoinGroupResponse* JoinGroupResponse::default_instance_ = NULL;

JoinGroupResponse* JoinGroupResponse::New() const {
  return new JoinGroupResponse;
}

void JoinGroupResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<JoinGroupResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, verify_type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.JoinGroupResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_verify_type;
        break;
      }

      // optional uint32 verify_type = 3;
      case 3: {
        if (tag == 24) {
         parse_verify_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &verify_type_)));
          set_has_verify_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.JoinGroupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.JoinGroupResponse)
  return false;
#undef DO_
}

void JoinGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.JoinGroupResponse)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  // optional uint32 verify_type = 3;
  if (has_verify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->verify_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.JoinGroupResponse)
}

::google::protobuf::uint8* JoinGroupResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.JoinGroupResponse)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  // optional uint32 verify_type = 3;
  if (has_verify_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->verify_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.JoinGroupResponse)
  return target;
}

int JoinGroupResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional uint32 verify_type = 3;
    if (has_verify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->verify_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinGroupResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinGroupResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinGroupResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinGroupResponse::MergeFrom(const JoinGroupResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_verify_type()) {
      set_verify_type(from.verify_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinGroupResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinGroupResponse::CopyFrom(const JoinGroupResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGroupResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void JoinGroupResponse::Swap(JoinGroupResponse* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(verify_type_, other->verify_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinGroupResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinGroupResponse_descriptor_;
  metadata.reflection = JoinGroupResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinGroupVerifyRequest::kUserIdFieldNumber;
const int JoinGroupVerifyRequest::kGroupIdFieldNumber;
const int JoinGroupVerifyRequest::kVerifyTypeFieldNumber;
const int JoinGroupVerifyRequest::kVerifyMsgFieldNumber;
const int JoinGroupVerifyRequest::kGroupManagerIdFieldNumber;
#endif  // !_MSC_VER

JoinGroupVerifyRequest::JoinGroupVerifyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.JoinGroupVerifyRequest)
}

void JoinGroupVerifyRequest::InitAsDefaultInstance() {
}

JoinGroupVerifyRequest::JoinGroupVerifyRequest(const JoinGroupVerifyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.JoinGroupVerifyRequest)
}

void JoinGroupVerifyRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  verify_type_ = 0u;
  verify_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_manager_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinGroupVerifyRequest::~JoinGroupVerifyRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.JoinGroupVerifyRequest)
  SharedDtor();
}

void JoinGroupVerifyRequest::SharedDtor() {
  if (verify_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete verify_msg_;
  }
  if (this != default_instance_) {
  }
}

void JoinGroupVerifyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinGroupVerifyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinGroupVerifyRequest_descriptor_;
}

const JoinGroupVerifyRequest& JoinGroupVerifyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

JoinGroupVerifyRequest* JoinGroupVerifyRequest::default_instance_ = NULL;

JoinGroupVerifyRequest* JoinGroupVerifyRequest::New() const {
  return new JoinGroupVerifyRequest;
}

void JoinGroupVerifyRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<JoinGroupVerifyRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(user_id_, group_id_);
    ZR_(group_manager_id_, verify_type_);
    if (has_verify_msg()) {
      if (verify_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        verify_msg_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinGroupVerifyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.JoinGroupVerifyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_verify_type;
        break;
      }

      // optional uint32 verify_type = 3;
      case 3: {
        if (tag == 24) {
         parse_verify_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &verify_type_)));
          set_has_verify_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_verify_msg;
        break;
      }

      // required string verify_msg = 4;
      case 4: {
        if (tag == 34) {
         parse_verify_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verify_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->verify_msg().data(), this->verify_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "verify_msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_group_manager_id;
        break;
      }

      // optional uint64 group_manager_id = 5;
      case 5: {
        if (tag == 40) {
         parse_group_manager_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_manager_id_)));
          set_has_group_manager_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.JoinGroupVerifyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.JoinGroupVerifyRequest)
  return false;
#undef DO_
}

void JoinGroupVerifyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.JoinGroupVerifyRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  // optional uint32 verify_type = 3;
  if (has_verify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->verify_type(), output);
  }

  // required string verify_msg = 4;
  if (has_verify_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verify_msg().data(), this->verify_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "verify_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->verify_msg(), output);
  }

  // optional uint64 group_manager_id = 5;
  if (has_group_manager_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->group_manager_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.JoinGroupVerifyRequest)
}

::google::protobuf::uint8* JoinGroupVerifyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.JoinGroupVerifyRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  // optional uint32 verify_type = 3;
  if (has_verify_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->verify_type(), target);
  }

  // required string verify_msg = 4;
  if (has_verify_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verify_msg().data(), this->verify_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "verify_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->verify_msg(), target);
  }

  // optional uint64 group_manager_id = 5;
  if (has_group_manager_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->group_manager_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.JoinGroupVerifyRequest)
  return target;
}

int JoinGroupVerifyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional uint32 verify_type = 3;
    if (has_verify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->verify_type());
    }

    // required string verify_msg = 4;
    if (has_verify_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verify_msg());
    }

    // optional uint64 group_manager_id = 5;
    if (has_group_manager_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_manager_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinGroupVerifyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinGroupVerifyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinGroupVerifyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinGroupVerifyRequest::MergeFrom(const JoinGroupVerifyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_verify_type()) {
      set_verify_type(from.verify_type());
    }
    if (from.has_verify_msg()) {
      set_verify_msg(from.verify_msg());
    }
    if (from.has_group_manager_id()) {
      set_group_manager_id(from.group_manager_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinGroupVerifyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinGroupVerifyRequest::CopyFrom(const JoinGroupVerifyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGroupVerifyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void JoinGroupVerifyRequest::Swap(JoinGroupVerifyRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(verify_type_, other->verify_type_);
    std::swap(verify_msg_, other->verify_msg_);
    std::swap(group_manager_id_, other->group_manager_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinGroupVerifyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinGroupVerifyRequest_descriptor_;
  metadata.reflection = JoinGroupVerifyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinGroupVerifyResponse::kResultFieldNumber;
#endif  // !_MSC_VER

JoinGroupVerifyResponse::JoinGroupVerifyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.JoinGroupVerifyResponse)
}

void JoinGroupVerifyResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::TerminalProtocol::Result*>(&::TerminalProtocol::Result::default_instance());
}

JoinGroupVerifyResponse::JoinGroupVerifyResponse(const JoinGroupVerifyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.JoinGroupVerifyResponse)
}

void JoinGroupVerifyResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinGroupVerifyResponse::~JoinGroupVerifyResponse() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.JoinGroupVerifyResponse)
  SharedDtor();
}

void JoinGroupVerifyResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void JoinGroupVerifyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinGroupVerifyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinGroupVerifyResponse_descriptor_;
}

const JoinGroupVerifyResponse& JoinGroupVerifyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

JoinGroupVerifyResponse* JoinGroupVerifyResponse::default_instance_ = NULL;

JoinGroupVerifyResponse* JoinGroupVerifyResponse::New() const {
  return new JoinGroupVerifyResponse;
}

void JoinGroupVerifyResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::TerminalProtocol::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinGroupVerifyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.JoinGroupVerifyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TerminalProtocol.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.JoinGroupVerifyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.JoinGroupVerifyResponse)
  return false;
#undef DO_
}

void JoinGroupVerifyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.JoinGroupVerifyResponse)
  // required .TerminalProtocol.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.JoinGroupVerifyResponse)
}

::google::protobuf::uint8* JoinGroupVerifyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.JoinGroupVerifyResponse)
  // required .TerminalProtocol.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.JoinGroupVerifyResponse)
  return target;
}

int JoinGroupVerifyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TerminalProtocol.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinGroupVerifyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinGroupVerifyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinGroupVerifyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinGroupVerifyResponse::MergeFrom(const JoinGroupVerifyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::TerminalProtocol::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinGroupVerifyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinGroupVerifyResponse::CopyFrom(const JoinGroupVerifyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGroupVerifyResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void JoinGroupVerifyResponse::Swap(JoinGroupVerifyResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinGroupVerifyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinGroupVerifyResponse_descriptor_;
  metadata.reflection = JoinGroupVerifyResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinGroupConfirmRequest::kResultFieldNumber;
const int JoinGroupConfirmRequest::kUserIdFieldNumber;
const int JoinGroupConfirmRequest::kGroupUserIdFieldNumber;
const int JoinGroupConfirmRequest::kGroupIdFieldNumber;
#endif  // !_MSC_VER

JoinGroupConfirmRequest::JoinGroupConfirmRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.JoinGroupConfirmRequest)
}

void JoinGroupConfirmRequest::InitAsDefaultInstance() {
  result_ = const_cast< ::TerminalProtocol::Result*>(&::TerminalProtocol::Result::default_instance());
}

JoinGroupConfirmRequest::JoinGroupConfirmRequest(const JoinGroupConfirmRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.JoinGroupConfirmRequest)
}

void JoinGroupConfirmRequest::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinGroupConfirmRequest::~JoinGroupConfirmRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.JoinGroupConfirmRequest)
  SharedDtor();
}

void JoinGroupConfirmRequest::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void JoinGroupConfirmRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinGroupConfirmRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinGroupConfirmRequest_descriptor_;
}

const JoinGroupConfirmRequest& JoinGroupConfirmRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

JoinGroupConfirmRequest* JoinGroupConfirmRequest::default_instance_ = NULL;

JoinGroupConfirmRequest* JoinGroupConfirmRequest::New() const {
  return new JoinGroupConfirmRequest;
}

void JoinGroupConfirmRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<JoinGroupConfirmRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(user_id_, group_id_);
    if (has_result()) {
      if (result_ != NULL) result_->::TerminalProtocol::Result::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinGroupConfirmRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.JoinGroupConfirmRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TerminalProtocol.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint64 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_user_id;
        break;
      }

      // required uint64 group_user_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_user_id_)));
          set_has_group_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_group_id;
        break;
      }

      // optional uint64 group_id = 4;
      case 4: {
        if (tag == 32) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.JoinGroupConfirmRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.JoinGroupConfirmRequest)
  return false;
#undef DO_
}

void JoinGroupConfirmRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.JoinGroupConfirmRequest)
  // required .TerminalProtocol.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // required uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // required uint64 group_user_id = 3;
  if (has_group_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->group_user_id(), output);
  }

  // optional uint64 group_id = 4;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.JoinGroupConfirmRequest)
}

::google::protobuf::uint8* JoinGroupConfirmRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.JoinGroupConfirmRequest)
  // required .TerminalProtocol.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // required uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // required uint64 group_user_id = 3;
  if (has_group_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->group_user_id(), target);
  }

  // optional uint64 group_id = 4;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.JoinGroupConfirmRequest)
  return target;
}

int JoinGroupConfirmRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TerminalProtocol.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // required uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 group_user_id = 3;
    if (has_group_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_user_id());
    }

    // optional uint64 group_id = 4;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinGroupConfirmRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinGroupConfirmRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinGroupConfirmRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinGroupConfirmRequest::MergeFrom(const JoinGroupConfirmRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::TerminalProtocol::Result::MergeFrom(from.result());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_user_id()) {
      set_group_user_id(from.group_user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinGroupConfirmRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinGroupConfirmRequest::CopyFrom(const JoinGroupConfirmRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGroupConfirmRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void JoinGroupConfirmRequest::Swap(JoinGroupConfirmRequest* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_id_, other->user_id_);
    std::swap(group_user_id_, other->group_user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinGroupConfirmRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinGroupConfirmRequest_descriptor_;
  metadata.reflection = JoinGroupConfirmRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinGroupNotify::kResultFieldNumber;
const int JoinGroupNotify::kUserIdFieldNumber;
const int JoinGroupNotify::kGroupIdFieldNumber;
const int JoinGroupNotify::kGroupManagerIdFieldNumber;
#endif  // !_MSC_VER

JoinGroupNotify::JoinGroupNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.JoinGroupNotify)
}

void JoinGroupNotify::InitAsDefaultInstance() {
  result_ = const_cast< ::TerminalProtocol::Result*>(&::TerminalProtocol::Result::default_instance());
}

JoinGroupNotify::JoinGroupNotify(const JoinGroupNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.JoinGroupNotify)
}

void JoinGroupNotify::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  group_manager_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinGroupNotify::~JoinGroupNotify() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.JoinGroupNotify)
  SharedDtor();
}

void JoinGroupNotify::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void JoinGroupNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinGroupNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinGroupNotify_descriptor_;
}

const JoinGroupNotify& JoinGroupNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

JoinGroupNotify* JoinGroupNotify::default_instance_ = NULL;

JoinGroupNotify* JoinGroupNotify::New() const {
  return new JoinGroupNotify;
}

void JoinGroupNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<JoinGroupNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(user_id_, group_manager_id_);
    if (has_result()) {
      if (result_ != NULL) result_->::TerminalProtocol::Result::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinGroupNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.JoinGroupNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TerminalProtocol.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint64 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_id;
        break;
      }

      // required uint64 group_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_group_manager_id;
        break;
      }

      // optional uint64 group_manager_id = 4;
      case 4: {
        if (tag == 32) {
         parse_group_manager_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_manager_id_)));
          set_has_group_manager_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.JoinGroupNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.JoinGroupNotify)
  return false;
#undef DO_
}

void JoinGroupNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.JoinGroupNotify)
  // required .TerminalProtocol.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // required uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // required uint64 group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->group_id(), output);
  }

  // optional uint64 group_manager_id = 4;
  if (has_group_manager_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->group_manager_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.JoinGroupNotify)
}

::google::protobuf::uint8* JoinGroupNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.JoinGroupNotify)
  // required .TerminalProtocol.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // required uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // required uint64 group_id = 3;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->group_id(), target);
  }

  // optional uint64 group_manager_id = 4;
  if (has_group_manager_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->group_manager_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.JoinGroupNotify)
  return target;
}

int JoinGroupNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TerminalProtocol.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // required uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 group_id = 3;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional uint64 group_manager_id = 4;
    if (has_group_manager_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_manager_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinGroupNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinGroupNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinGroupNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinGroupNotify::MergeFrom(const JoinGroupNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::TerminalProtocol::Result::MergeFrom(from.result());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_manager_id()) {
      set_group_manager_id(from.group_manager_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinGroupNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinGroupNotify::CopyFrom(const JoinGroupNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGroupNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void JoinGroupNotify::Swap(JoinGroupNotify* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(group_manager_id_, other->group_manager_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinGroupNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinGroupNotify_descriptor_;
  metadata.reflection = JoinGroupNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExitGroupRequest::kUserIdFieldNumber;
const int ExitGroupRequest::kGroupIdFieldNumber;
#endif  // !_MSC_VER

ExitGroupRequest::ExitGroupRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.ExitGroupRequest)
}

void ExitGroupRequest::InitAsDefaultInstance() {
}

ExitGroupRequest::ExitGroupRequest(const ExitGroupRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.ExitGroupRequest)
}

void ExitGroupRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExitGroupRequest::~ExitGroupRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.ExitGroupRequest)
  SharedDtor();
}

void ExitGroupRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExitGroupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExitGroupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExitGroupRequest_descriptor_;
}

const ExitGroupRequest& ExitGroupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

ExitGroupRequest* ExitGroupRequest::default_instance_ = NULL;

ExitGroupRequest* ExitGroupRequest::New() const {
  return new ExitGroupRequest;
}

void ExitGroupRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ExitGroupRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, group_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExitGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.ExitGroupRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.ExitGroupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.ExitGroupRequest)
  return false;
#undef DO_
}

void ExitGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.ExitGroupRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.ExitGroupRequest)
}

::google::protobuf::uint8* ExitGroupRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.ExitGroupRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.ExitGroupRequest)
  return target;
}

int ExitGroupRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExitGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExitGroupRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExitGroupRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExitGroupRequest::MergeFrom(const ExitGroupRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExitGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExitGroupRequest::CopyFrom(const ExitGroupRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExitGroupRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ExitGroupRequest::Swap(ExitGroupRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExitGroupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExitGroupRequest_descriptor_;
  metadata.reflection = ExitGroupRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExitGroupResponse::kUserIdFieldNumber;
const int ExitGroupResponse::kGroupIdFieldNumber;
const int ExitGroupResponse::kResultFieldNumber;
#endif  // !_MSC_VER

ExitGroupResponse::ExitGroupResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.ExitGroupResponse)
}

void ExitGroupResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::TerminalProtocol::Result*>(&::TerminalProtocol::Result::default_instance());
}

ExitGroupResponse::ExitGroupResponse(const ExitGroupResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.ExitGroupResponse)
}

void ExitGroupResponse::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExitGroupResponse::~ExitGroupResponse() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.ExitGroupResponse)
  SharedDtor();
}

void ExitGroupResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void ExitGroupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExitGroupResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExitGroupResponse_descriptor_;
}

const ExitGroupResponse& ExitGroupResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

ExitGroupResponse* ExitGroupResponse::default_instance_ = NULL;

ExitGroupResponse* ExitGroupResponse::New() const {
  return new ExitGroupResponse;
}

void ExitGroupResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ExitGroupResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(user_id_, group_id_);
    if (has_result()) {
      if (result_ != NULL) result_->::TerminalProtocol::Result::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExitGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.ExitGroupResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_result;
        break;
      }

      // required .TerminalProtocol.Result result = 3;
      case 3: {
        if (tag == 26) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.ExitGroupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.ExitGroupResponse)
  return false;
#undef DO_
}

void ExitGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.ExitGroupResponse)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  // required .TerminalProtocol.Result result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.ExitGroupResponse)
}

::google::protobuf::uint8* ExitGroupResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.ExitGroupResponse)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  // required .TerminalProtocol.Result result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.ExitGroupResponse)
  return target;
}

int ExitGroupResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // required .TerminalProtocol.Result result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExitGroupResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExitGroupResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExitGroupResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExitGroupResponse::MergeFrom(const ExitGroupResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_result()) {
      mutable_result()->::TerminalProtocol::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExitGroupResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExitGroupResponse::CopyFrom(const ExitGroupResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExitGroupResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void ExitGroupResponse::Swap(ExitGroupResponse* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExitGroupResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExitGroupResponse_descriptor_;
  metadata.reflection = ExitGroupResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGroupUserListRequest::kUserIdFieldNumber;
const int GetGroupUserListRequest::kGroupIdFieldNumber;
#endif  // !_MSC_VER

GetGroupUserListRequest::GetGroupUserListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.GetGroupUserListRequest)
}

void GetGroupUserListRequest::InitAsDefaultInstance() {
}

GetGroupUserListRequest::GetGroupUserListRequest(const GetGroupUserListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.GetGroupUserListRequest)
}

void GetGroupUserListRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGroupUserListRequest::~GetGroupUserListRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.GetGroupUserListRequest)
  SharedDtor();
}

void GetGroupUserListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGroupUserListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGroupUserListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGroupUserListRequest_descriptor_;
}

const GetGroupUserListRequest& GetGroupUserListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

GetGroupUserListRequest* GetGroupUserListRequest::default_instance_ = NULL;

GetGroupUserListRequest* GetGroupUserListRequest::New() const {
  return new GetGroupUserListRequest;
}

void GetGroupUserListRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetGroupUserListRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, group_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGroupUserListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.GetGroupUserListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.GetGroupUserListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.GetGroupUserListRequest)
  return false;
#undef DO_
}

void GetGroupUserListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.GetGroupUserListRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.GetGroupUserListRequest)
}

::google::protobuf::uint8* GetGroupUserListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.GetGroupUserListRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.GetGroupUserListRequest)
  return target;
}

int GetGroupUserListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroupUserListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGroupUserListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGroupUserListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGroupUserListRequest::MergeFrom(const GetGroupUserListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGroupUserListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGroupUserListRequest::CopyFrom(const GetGroupUserListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupUserListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetGroupUserListRequest::Swap(GetGroupUserListRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGroupUserListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGroupUserListRequest_descriptor_;
  metadata.reflection = GetGroupUserListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGroupUserListResponse::kUserIdFieldNumber;
#endif  // !_MSC_VER

GetGroupUserListResponse::GetGroupUserListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.GetGroupUserListResponse)
}

void GetGroupUserListResponse::InitAsDefaultInstance() {
}

GetGroupUserListResponse::GetGroupUserListResponse(const GetGroupUserListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.GetGroupUserListResponse)
}

void GetGroupUserListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGroupUserListResponse::~GetGroupUserListResponse() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.GetGroupUserListResponse)
  SharedDtor();
}

void GetGroupUserListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGroupUserListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGroupUserListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGroupUserListResponse_descriptor_;
}

const GetGroupUserListResponse& GetGroupUserListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

GetGroupUserListResponse* GetGroupUserListResponse::default_instance_ = NULL;

GetGroupUserListResponse* GetGroupUserListResponse::New() const {
  return new GetGroupUserListResponse;
}

void GetGroupUserListResponse::Clear() {
  user_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGroupUserListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.GetGroupUserListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_user_id())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_user_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_user_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.GetGroupUserListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.GetGroupUserListResponse)
  return false;
#undef DO_
}

void GetGroupUserListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.GetGroupUserListResponse)
  // repeated uint64 user_id = 1;
  for (int i = 0; i < this->user_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->user_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.GetGroupUserListResponse)
}

::google::protobuf::uint8* GetGroupUserListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.GetGroupUserListResponse)
  // repeated uint64 user_id = 1;
  for (int i = 0; i < this->user_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->user_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.GetGroupUserListResponse)
  return target;
}

int GetGroupUserListResponse::ByteSize() const {
  int total_size = 0;

  // repeated uint64 user_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->user_id(i));
    }
    total_size += 1 * this->user_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroupUserListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGroupUserListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGroupUserListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGroupUserListResponse::MergeFrom(const GetGroupUserListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_id_.MergeFrom(from.user_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGroupUserListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGroupUserListResponse::CopyFrom(const GetGroupUserListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupUserListResponse::IsInitialized() const {

  return true;
}

void GetGroupUserListResponse::Swap(GetGroupUserListResponse* other) {
  if (other != this) {
    user_id_.Swap(&other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGroupUserListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGroupUserListResponse_descriptor_;
  metadata.reflection = GetGroupUserListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGroupUserInfoRequest::kGroupIdFieldNumber;
const int GetGroupUserInfoRequest::kUserIdFieldNumber;
#endif  // !_MSC_VER

GetGroupUserInfoRequest::GetGroupUserInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.GetGroupUserInfoRequest)
}

void GetGroupUserInfoRequest::InitAsDefaultInstance() {
}

GetGroupUserInfoRequest::GetGroupUserInfoRequest(const GetGroupUserInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.GetGroupUserInfoRequest)
}

void GetGroupUserInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGroupUserInfoRequest::~GetGroupUserInfoRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.GetGroupUserInfoRequest)
  SharedDtor();
}

void GetGroupUserInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGroupUserInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGroupUserInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGroupUserInfoRequest_descriptor_;
}

const GetGroupUserInfoRequest& GetGroupUserInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

GetGroupUserInfoRequest* GetGroupUserInfoRequest::default_instance_ = NULL;

GetGroupUserInfoRequest* GetGroupUserInfoRequest::New() const {
  return new GetGroupUserInfoRequest;
}

void GetGroupUserInfoRequest::Clear() {
  group_id_ = GOOGLE_ULONGLONG(0);
  user_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGroupUserInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.GetGroupUserInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // repeated uint64 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_user_id())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_user_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.GetGroupUserInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.GetGroupUserInfoRequest)
  return false;
#undef DO_
}

void GetGroupUserInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.GetGroupUserInfoRequest)
  // required uint64 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->group_id(), output);
  }

  // repeated uint64 user_id = 2;
  for (int i = 0; i < this->user_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->user_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.GetGroupUserInfoRequest)
}

::google::protobuf::uint8* GetGroupUserInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.GetGroupUserInfoRequest)
  // required uint64 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->group_id(), target);
  }

  // repeated uint64 user_id = 2;
  for (int i = 0; i < this->user_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->user_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.GetGroupUserInfoRequest)
  return target;
}

int GetGroupUserInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

  }
  // repeated uint64 user_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->user_id(i));
    }
    total_size += 1 * this->user_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroupUserInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGroupUserInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGroupUserInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGroupUserInfoRequest::MergeFrom(const GetGroupUserInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_id_.MergeFrom(from.user_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGroupUserInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGroupUserInfoRequest::CopyFrom(const GetGroupUserInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupUserInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetGroupUserInfoRequest::Swap(GetGroupUserInfoRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    user_id_.Swap(&other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGroupUserInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGroupUserInfoRequest_descriptor_;
  metadata.reflection = GetGroupUserInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupUserInfo::kUserIdFieldNumber;
const int GroupUserInfo::kNickNameFieldNumber;
const int GroupUserInfo::kOnlineStateFieldNumber;
const int GroupUserInfo::kAvatarIdFieldNumber;
const int GroupUserInfo::kAvatarFieldNumber;
const int GroupUserInfo::kRoleFieldNumber;
#endif  // !_MSC_VER

GroupUserInfo::GroupUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.GroupUserInfo)
}

void GroupUserInfo::InitAsDefaultInstance() {
}

GroupUserInfo::GroupUserInfo(const GroupUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.GroupUserInfo)
}

void GroupUserInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  online_state_ = 0u;
  avatar_id_ = 0u;
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupUserInfo::~GroupUserInfo() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.GroupUserInfo)
  SharedDtor();
}

void GroupUserInfo::SharedDtor() {
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_name_;
  }
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (this != default_instance_) {
  }
}

void GroupUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupUserInfo_descriptor_;
}

const GroupUserInfo& GroupUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

GroupUserInfo* GroupUserInfo::default_instance_ = NULL;

GroupUserInfo* GroupUserInfo::New() const {
  return new GroupUserInfo;
}

void GroupUserInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GroupUserInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(online_state_, avatar_id_);
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nick_name_->clear();
      }
    }
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_->clear();
      }
    }
    role_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.GroupUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 2;
      case 2: {
        if (tag == 18) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nick_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_online_state;
        break;
      }

      // optional uint32 online_state = 3;
      case 3: {
        if (tag == 24) {
         parse_online_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_state_)));
          set_has_online_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_avatar_id;
        break;
      }

      // optional uint32 avatar_id = 4;
      case 4: {
        if (tag == 32) {
         parse_avatar_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_id_)));
          set_has_avatar_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_avatar;
        break;
      }

      // optional string avatar = 5;
      case 5: {
        if (tag == 42) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->avatar().data(), this->avatar().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "avatar");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_role;
        break;
      }

      // optional uint32 role = 6;
      case 6: {
        if (tag == 48) {
         parse_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_)));
          set_has_role();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.GroupUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.GroupUserInfo)
  return false;
#undef DO_
}

void GroupUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.GroupUserInfo)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nick_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nick_name(), output);
  }

  // optional uint32 online_state = 3;
  if (has_online_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->online_state(), output);
  }

  // optional uint32 avatar_id = 4;
  if (has_avatar_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->avatar_id(), output);
  }

  // optional string avatar = 5;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->avatar(), output);
  }

  // optional uint32 role = 6;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->role(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.GroupUserInfo)
}

::google::protobuf::uint8* GroupUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.GroupUserInfo)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nick_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nick_name(), target);
  }

  // optional uint32 online_state = 3;
  if (has_online_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->online_state(), target);
  }

  // optional uint32 avatar_id = 4;
  if (has_avatar_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->avatar_id(), target);
  }

  // optional string avatar = 5;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->avatar(), target);
  }

  // optional uint32 role = 6;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->role(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.GroupUserInfo)
  return target;
}

int GroupUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string nick_name = 2;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

    // optional uint32 online_state = 3;
    if (has_online_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_state());
    }

    // optional uint32 avatar_id = 4;
    if (has_avatar_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatar_id());
    }

    // optional string avatar = 5;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar());
    }

    // optional uint32 role = 6;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupUserInfo::MergeFrom(const GroupUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_online_state()) {
      set_online_state(from.online_state());
    }
    if (from.has_avatar_id()) {
      set_avatar_id(from.avatar_id());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupUserInfo::CopyFrom(const GroupUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GroupUserInfo::Swap(GroupUserInfo* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(online_state_, other->online_state_);
    std::swap(avatar_id_, other->avatar_id_);
    std::swap(avatar_, other->avatar_);
    std::swap(role_, other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupUserInfo_descriptor_;
  metadata.reflection = GroupUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGroupUserInfoResponse::kGroupIdFieldNumber;
const int GetGroupUserInfoResponse::kUserInfoFieldNumber;
#endif  // !_MSC_VER

GetGroupUserInfoResponse::GetGroupUserInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.GetGroupUserInfoResponse)
}

void GetGroupUserInfoResponse::InitAsDefaultInstance() {
}

GetGroupUserInfoResponse::GetGroupUserInfoResponse(const GetGroupUserInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.GetGroupUserInfoResponse)
}

void GetGroupUserInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGroupUserInfoResponse::~GetGroupUserInfoResponse() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.GetGroupUserInfoResponse)
  SharedDtor();
}

void GetGroupUserInfoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGroupUserInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGroupUserInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGroupUserInfoResponse_descriptor_;
}

const GetGroupUserInfoResponse& GetGroupUserInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

GetGroupUserInfoResponse* GetGroupUserInfoResponse::default_instance_ = NULL;

GetGroupUserInfoResponse* GetGroupUserInfoResponse::New() const {
  return new GetGroupUserInfoResponse;
}

void GetGroupUserInfoResponse::Clear() {
  group_id_ = GOOGLE_ULONGLONG(0);
  user_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGroupUserInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.GetGroupUserInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_info;
        break;
      }

      // repeated .TerminalProtocol.GroupUserInfo user_info = 2;
      case 2: {
        if (tag == 18) {
         parse_user_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.GetGroupUserInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.GetGroupUserInfoResponse)
  return false;
#undef DO_
}

void GetGroupUserInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.GetGroupUserInfoResponse)
  // optional uint64 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->group_id(), output);
  }

  // repeated .TerminalProtocol.GroupUserInfo user_info = 2;
  for (int i = 0; i < this->user_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.GetGroupUserInfoResponse)
}

::google::protobuf::uint8* GetGroupUserInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.GetGroupUserInfoResponse)
  // optional uint64 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->group_id(), target);
  }

  // repeated .TerminalProtocol.GroupUserInfo user_info = 2;
  for (int i = 0; i < this->user_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.GetGroupUserInfoResponse)
  return target;
}

int GetGroupUserInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

  }
  // repeated .TerminalProtocol.GroupUserInfo user_info = 2;
  total_size += 1 * this->user_info_size();
  for (int i = 0; i < this->user_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroupUserInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGroupUserInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGroupUserInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGroupUserInfoResponse::MergeFrom(const GetGroupUserInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_info_.MergeFrom(from.user_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGroupUserInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGroupUserInfoResponse::CopyFrom(const GetGroupUserInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupUserInfoResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->user_info())) return false;
  return true;
}

void GetGroupUserInfoResponse::Swap(GetGroupUserInfoResponse* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    user_info_.Swap(&other->user_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGroupUserInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGroupUserInfoResponse_descriptor_;
  metadata.reflection = GetGroupUserInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchGroupUserListRequest::kGroupIdFieldNumber;
const int SearchGroupUserListRequest::kSearchStringFieldNumber;
#endif  // !_MSC_VER

SearchGroupUserListRequest::SearchGroupUserListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.SearchGroupUserListRequest)
}

void SearchGroupUserListRequest::InitAsDefaultInstance() {
}

SearchGroupUserListRequest::SearchGroupUserListRequest(const SearchGroupUserListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.SearchGroupUserListRequest)
}

void SearchGroupUserListRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  group_id_ = GOOGLE_ULONGLONG(0);
  search_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchGroupUserListRequest::~SearchGroupUserListRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.SearchGroupUserListRequest)
  SharedDtor();
}

void SearchGroupUserListRequest::SharedDtor() {
  if (search_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete search_string_;
  }
  if (this != default_instance_) {
  }
}

void SearchGroupUserListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchGroupUserListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchGroupUserListRequest_descriptor_;
}

const SearchGroupUserListRequest& SearchGroupUserListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

SearchGroupUserListRequest* SearchGroupUserListRequest::default_instance_ = NULL;

SearchGroupUserListRequest* SearchGroupUserListRequest::New() const {
  return new SearchGroupUserListRequest;
}

void SearchGroupUserListRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    group_id_ = GOOGLE_ULONGLONG(0);
    if (has_search_string()) {
      if (search_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        search_string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchGroupUserListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.SearchGroupUserListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_search_string;
        break;
      }

      // required string search_string = 2;
      case 2: {
        if (tag == 18) {
         parse_search_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->search_string().data(), this->search_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "search_string");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.SearchGroupUserListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.SearchGroupUserListRequest)
  return false;
#undef DO_
}

void SearchGroupUserListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.SearchGroupUserListRequest)
  // required uint64 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->group_id(), output);
  }

  // required string search_string = 2;
  if (has_search_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_string().data(), this->search_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "search_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->search_string(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.SearchGroupUserListRequest)
}

::google::protobuf::uint8* SearchGroupUserListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.SearchGroupUserListRequest)
  // required uint64 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->group_id(), target);
  }

  // required string search_string = 2;
  if (has_search_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_string().data(), this->search_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "search_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->search_string(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.SearchGroupUserListRequest)
  return target;
}

int SearchGroupUserListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // required string search_string = 2;
    if (has_search_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search_string());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchGroupUserListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchGroupUserListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchGroupUserListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchGroupUserListRequest::MergeFrom(const SearchGroupUserListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_search_string()) {
      set_search_string(from.search_string());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchGroupUserListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchGroupUserListRequest::CopyFrom(const SearchGroupUserListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchGroupUserListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SearchGroupUserListRequest::Swap(SearchGroupUserListRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(search_string_, other->search_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchGroupUserListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchGroupUserListRequest_descriptor_;
  metadata.reflection = SearchGroupUserListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchGroupUserListResponse::kGroupIdFieldNumber;
const int SearchGroupUserListResponse::kListItemFieldNumber;
#endif  // !_MSC_VER

SearchGroupUserListResponse::SearchGroupUserListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.SearchGroupUserListResponse)
}

void SearchGroupUserListResponse::InitAsDefaultInstance() {
}

SearchGroupUserListResponse::SearchGroupUserListResponse(const SearchGroupUserListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.SearchGroupUserListResponse)
}

void SearchGroupUserListResponse::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchGroupUserListResponse::~SearchGroupUserListResponse() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.SearchGroupUserListResponse)
  SharedDtor();
}

void SearchGroupUserListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SearchGroupUserListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchGroupUserListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchGroupUserListResponse_descriptor_;
}

const SearchGroupUserListResponse& SearchGroupUserListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

SearchGroupUserListResponse* SearchGroupUserListResponse::default_instance_ = NULL;

SearchGroupUserListResponse* SearchGroupUserListResponse::New() const {
  return new SearchGroupUserListResponse;
}

void SearchGroupUserListResponse::Clear() {
  group_id_ = GOOGLE_ULONGLONG(0);
  list_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchGroupUserListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.SearchGroupUserListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_list_item;
        break;
      }

      // repeated .TerminalProtocol.GroupUserInfo list_item = 2;
      case 2: {
        if (tag == 18) {
         parse_list_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_list_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.SearchGroupUserListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.SearchGroupUserListResponse)
  return false;
#undef DO_
}

void SearchGroupUserListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.SearchGroupUserListResponse)
  // required uint64 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->group_id(), output);
  }

  // repeated .TerminalProtocol.GroupUserInfo list_item = 2;
  for (int i = 0; i < this->list_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list_item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.SearchGroupUserListResponse)
}

::google::protobuf::uint8* SearchGroupUserListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.SearchGroupUserListResponse)
  // required uint64 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->group_id(), target);
  }

  // repeated .TerminalProtocol.GroupUserInfo list_item = 2;
  for (int i = 0; i < this->list_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list_item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.SearchGroupUserListResponse)
  return target;
}

int SearchGroupUserListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

  }
  // repeated .TerminalProtocol.GroupUserInfo list_item = 2;
  total_size += 1 * this->list_item_size();
  for (int i = 0; i < this->list_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchGroupUserListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchGroupUserListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchGroupUserListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchGroupUserListResponse::MergeFrom(const SearchGroupUserListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_item_.MergeFrom(from.list_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchGroupUserListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchGroupUserListResponse::CopyFrom(const SearchGroupUserListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchGroupUserListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->list_item())) return false;
  return true;
}

void SearchGroupUserListResponse::Swap(SearchGroupUserListResponse* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    list_item_.Swap(&other->list_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchGroupUserListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchGroupUserListResponse_descriptor_;
  metadata.reflection = SearchGroupUserListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddFriendRequest::kUserIdFieldNumber;
const int AddFriendRequest::kFriendIdFieldNumber;
#endif  // !_MSC_VER

AddFriendRequest::AddFriendRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.AddFriendRequest)
}

void AddFriendRequest::InitAsDefaultInstance() {
}

AddFriendRequest::AddFriendRequest(const AddFriendRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.AddFriendRequest)
}

void AddFriendRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  friend_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddFriendRequest::~AddFriendRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.AddFriendRequest)
  SharedDtor();
}

void AddFriendRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddFriendRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddFriendRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddFriendRequest_descriptor_;
}

const AddFriendRequest& AddFriendRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

AddFriendRequest* AddFriendRequest::default_instance_ = NULL;

AddFriendRequest* AddFriendRequest::New() const {
  return new AddFriendRequest;
}

void AddFriendRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AddFriendRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, friend_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddFriendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.AddFriendRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_friend_id;
        break;
      }

      // required uint64 friend_id = 2;
      case 2: {
        if (tag == 16) {
         parse_friend_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend_id_)));
          set_has_friend_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.AddFriendRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.AddFriendRequest)
  return false;
#undef DO_
}

void AddFriendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.AddFriendRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 friend_id = 2;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->friend_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.AddFriendRequest)
}

::google::protobuf::uint8* AddFriendRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.AddFriendRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 friend_id = 2;
  if (has_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->friend_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.AddFriendRequest)
  return target;
}

int AddFriendRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 friend_id = 2;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friend_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFriendRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddFriendRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddFriendRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddFriendRequest::MergeFrom(const AddFriendRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddFriendRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFriendRequest::CopyFrom(const AddFriendRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFriendRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AddFriendRequest::Swap(AddFriendRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(friend_id_, other->friend_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddFriendRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddFriendRequest_descriptor_;
  metadata.reflection = AddFriendRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddFriendResponse::kVerifyTypeFieldNumber;
const int AddFriendResponse::kQuestionTypeFieldNumber;
#endif  // !_MSC_VER

AddFriendResponse::AddFriendResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.AddFriendResponse)
}

void AddFriendResponse::InitAsDefaultInstance() {
}

AddFriendResponse::AddFriendResponse(const AddFriendResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.AddFriendResponse)
}

void AddFriendResponse::SharedCtor() {
  _cached_size_ = 0;
  verify_type_ = 0u;
  question_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddFriendResponse::~AddFriendResponse() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.AddFriendResponse)
  SharedDtor();
}

void AddFriendResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddFriendResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddFriendResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddFriendResponse_descriptor_;
}

const AddFriendResponse& AddFriendResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

AddFriendResponse* AddFriendResponse::default_instance_ = NULL;

AddFriendResponse* AddFriendResponse::New() const {
  return new AddFriendResponse;
}

void AddFriendResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AddFriendResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(verify_type_, question_type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddFriendResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.AddFriendResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 verify_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &verify_type_)));
          set_has_verify_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_question_type;
        break;
      }

      // optional uint32 question_type = 2;
      case 2: {
        if (tag == 16) {
         parse_question_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &question_type_)));
          set_has_question_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.AddFriendResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.AddFriendResponse)
  return false;
#undef DO_
}

void AddFriendResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.AddFriendResponse)
  // required uint32 verify_type = 1;
  if (has_verify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->verify_type(), output);
  }

  // optional uint32 question_type = 2;
  if (has_question_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->question_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.AddFriendResponse)
}

::google::protobuf::uint8* AddFriendResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.AddFriendResponse)
  // required uint32 verify_type = 1;
  if (has_verify_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->verify_type(), target);
  }

  // optional uint32 question_type = 2;
  if (has_question_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->question_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.AddFriendResponse)
  return target;
}

int AddFriendResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 verify_type = 1;
    if (has_verify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->verify_type());
    }

    // optional uint32 question_type = 2;
    if (has_question_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->question_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFriendResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddFriendResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddFriendResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddFriendResponse::MergeFrom(const AddFriendResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_verify_type()) {
      set_verify_type(from.verify_type());
    }
    if (from.has_question_type()) {
      set_question_type(from.question_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddFriendResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFriendResponse::CopyFrom(const AddFriendResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFriendResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AddFriendResponse::Swap(AddFriendResponse* other) {
  if (other != this) {
    std::swap(verify_type_, other->verify_type_);
    std::swap(question_type_, other->question_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddFriendResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddFriendResponse_descriptor_;
  metadata.reflection = AddFriendResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddFriendVerifyRequest::kUserIdFieldNumber;
const int AddFriendVerifyRequest::kFriendIdFieldNumber;
const int AddFriendVerifyRequest::kTypeFieldNumber;
const int AddFriendVerifyRequest::kQuestionTypeFieldNumber;
const int AddFriendVerifyRequest::kVerifyMsgFieldNumber;
#endif  // !_MSC_VER

AddFriendVerifyRequest::AddFriendVerifyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.AddFriendVerifyRequest)
}

void AddFriendVerifyRequest::InitAsDefaultInstance() {
}

AddFriendVerifyRequest::AddFriendVerifyRequest(const AddFriendVerifyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.AddFriendVerifyRequest)
}

void AddFriendVerifyRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  friend_id_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  question_type_ = 0u;
  verify_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddFriendVerifyRequest::~AddFriendVerifyRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.AddFriendVerifyRequest)
  SharedDtor();
}

void AddFriendVerifyRequest::SharedDtor() {
  if (verify_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete verify_msg_;
  }
  if (this != default_instance_) {
  }
}

void AddFriendVerifyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddFriendVerifyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddFriendVerifyRequest_descriptor_;
}

const AddFriendVerifyRequest& AddFriendVerifyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

AddFriendVerifyRequest* AddFriendVerifyRequest::default_instance_ = NULL;

AddFriendVerifyRequest* AddFriendVerifyRequest::New() const {
  return new AddFriendVerifyRequest;
}

void AddFriendVerifyRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AddFriendVerifyRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(user_id_, question_type_);
    if (has_verify_msg()) {
      if (verify_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        verify_msg_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddFriendVerifyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.AddFriendVerifyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_friend_id;
        break;
      }

      // required uint64 friend_id = 2;
      case 2: {
        if (tag == 16) {
         parse_friend_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend_id_)));
          set_has_friend_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required uint32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_question_type;
        break;
      }

      // optional uint32 question_type = 4;
      case 4: {
        if (tag == 32) {
         parse_question_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &question_type_)));
          set_has_question_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_verify_msg;
        break;
      }

      // optional string verify_msg = 5;
      case 5: {
        if (tag == 42) {
         parse_verify_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verify_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->verify_msg().data(), this->verify_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "verify_msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.AddFriendVerifyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.AddFriendVerifyRequest)
  return false;
#undef DO_
}

void AddFriendVerifyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.AddFriendVerifyRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 friend_id = 2;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->friend_id(), output);
  }

  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // optional uint32 question_type = 4;
  if (has_question_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->question_type(), output);
  }

  // optional string verify_msg = 5;
  if (has_verify_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verify_msg().data(), this->verify_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "verify_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->verify_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.AddFriendVerifyRequest)
}

::google::protobuf::uint8* AddFriendVerifyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.AddFriendVerifyRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 friend_id = 2;
  if (has_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->friend_id(), target);
  }

  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // optional uint32 question_type = 4;
  if (has_question_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->question_type(), target);
  }

  // optional string verify_msg = 5;
  if (has_verify_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verify_msg().data(), this->verify_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "verify_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->verify_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.AddFriendVerifyRequest)
  return target;
}

int AddFriendVerifyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 friend_id = 2;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friend_id());
    }

    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 question_type = 4;
    if (has_question_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->question_type());
    }

    // optional string verify_msg = 5;
    if (has_verify_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verify_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFriendVerifyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddFriendVerifyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddFriendVerifyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddFriendVerifyRequest::MergeFrom(const AddFriendVerifyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_question_type()) {
      set_question_type(from.question_type());
    }
    if (from.has_verify_msg()) {
      set_verify_msg(from.verify_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddFriendVerifyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFriendVerifyRequest::CopyFrom(const AddFriendVerifyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFriendVerifyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AddFriendVerifyRequest::Swap(AddFriendVerifyRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(friend_id_, other->friend_id_);
    std::swap(type_, other->type_);
    std::swap(question_type_, other->question_type_);
    std::swap(verify_msg_, other->verify_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddFriendVerifyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddFriendVerifyRequest_descriptor_;
  metadata.reflection = AddFriendVerifyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddFriendVerifyResponse::kUserIdFieldNumber;
const int AddFriendVerifyResponse::kFriendIdFieldNumber;
const int AddFriendVerifyResponse::kIsAllowFieldNumber;
const int AddFriendVerifyResponse::kReasonFieldNumber;
#endif  // !_MSC_VER

AddFriendVerifyResponse::AddFriendVerifyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.AddFriendVerifyResponse)
}

void AddFriendVerifyResponse::InitAsDefaultInstance() {
}

AddFriendVerifyResponse::AddFriendVerifyResponse(const AddFriendVerifyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.AddFriendVerifyResponse)
}

void AddFriendVerifyResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  friend_id_ = GOOGLE_ULONGLONG(0);
  is_allow_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddFriendVerifyResponse::~AddFriendVerifyResponse() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.AddFriendVerifyResponse)
  SharedDtor();
}

void AddFriendVerifyResponse::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void AddFriendVerifyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddFriendVerifyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddFriendVerifyResponse_descriptor_;
}

const AddFriendVerifyResponse& AddFriendVerifyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

AddFriendVerifyResponse* AddFriendVerifyResponse::default_instance_ = NULL;

AddFriendVerifyResponse* AddFriendVerifyResponse::New() const {
  return new AddFriendVerifyResponse;
}

void AddFriendVerifyResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AddFriendVerifyResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(user_id_, friend_id_);
    is_allow_ = 0u;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddFriendVerifyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.AddFriendVerifyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_friend_id;
        break;
      }

      // required uint64 friend_id = 2;
      case 2: {
        if (tag == 16) {
         parse_friend_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend_id_)));
          set_has_friend_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_allow;
        break;
      }

      // required uint32 is_allow = 3;
      case 3: {
        if (tag == 24) {
         parse_is_allow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_allow_)));
          set_has_is_allow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_reason;
        break;
      }

      // optional string reason = 4;
      case 4: {
        if (tag == 34) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.AddFriendVerifyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.AddFriendVerifyResponse)
  return false;
#undef DO_
}

void AddFriendVerifyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.AddFriendVerifyResponse)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 friend_id = 2;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->friend_id(), output);
  }

  // required uint32 is_allow = 3;
  if (has_is_allow()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_allow(), output);
  }

  // optional string reason = 4;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.AddFriendVerifyResponse)
}

::google::protobuf::uint8* AddFriendVerifyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.AddFriendVerifyResponse)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 friend_id = 2;
  if (has_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->friend_id(), target);
  }

  // required uint32 is_allow = 3;
  if (has_is_allow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->is_allow(), target);
  }

  // optional string reason = 4;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.AddFriendVerifyResponse)
  return target;
}

int AddFriendVerifyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 friend_id = 2;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friend_id());
    }

    // required uint32 is_allow = 3;
    if (has_is_allow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_allow());
    }

    // optional string reason = 4;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFriendVerifyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddFriendVerifyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddFriendVerifyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddFriendVerifyResponse::MergeFrom(const AddFriendVerifyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
    if (from.has_is_allow()) {
      set_is_allow(from.is_allow());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddFriendVerifyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFriendVerifyResponse::CopyFrom(const AddFriendVerifyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFriendVerifyResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AddFriendVerifyResponse::Swap(AddFriendVerifyResponse* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(friend_id_, other->friend_id_);
    std::swap(is_allow_, other->is_allow_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddFriendVerifyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddFriendVerifyResponse_descriptor_;
  metadata.reflection = AddFriendVerifyResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddFriendConfirmRequest::kResultFieldNumber;
const int AddFriendConfirmRequest::kUserIdFieldNumber;
const int AddFriendConfirmRequest::kFriendIdFieldNumber;
#endif  // !_MSC_VER

AddFriendConfirmRequest::AddFriendConfirmRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.AddFriendConfirmRequest)
}

void AddFriendConfirmRequest::InitAsDefaultInstance() {
  result_ = const_cast< ::TerminalProtocol::Result*>(&::TerminalProtocol::Result::default_instance());
}

AddFriendConfirmRequest::AddFriendConfirmRequest(const AddFriendConfirmRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.AddFriendConfirmRequest)
}

void AddFriendConfirmRequest::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  user_id_ = GOOGLE_ULONGLONG(0);
  friend_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddFriendConfirmRequest::~AddFriendConfirmRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.AddFriendConfirmRequest)
  SharedDtor();
}

void AddFriendConfirmRequest::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void AddFriendConfirmRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddFriendConfirmRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddFriendConfirmRequest_descriptor_;
}

const AddFriendConfirmRequest& AddFriendConfirmRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

AddFriendConfirmRequest* AddFriendConfirmRequest::default_instance_ = NULL;

AddFriendConfirmRequest* AddFriendConfirmRequest::New() const {
  return new AddFriendConfirmRequest;
}

void AddFriendConfirmRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AddFriendConfirmRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(user_id_, friend_id_);
    if (has_result()) {
      if (result_ != NULL) result_->::TerminalProtocol::Result::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddFriendConfirmRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.AddFriendConfirmRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TerminalProtocol.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint64 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_friend_id;
        break;
      }

      // required uint64 friend_id = 3;
      case 3: {
        if (tag == 24) {
         parse_friend_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend_id_)));
          set_has_friend_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.AddFriendConfirmRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.AddFriendConfirmRequest)
  return false;
#undef DO_
}

void AddFriendConfirmRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.AddFriendConfirmRequest)
  // required .TerminalProtocol.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // required uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // required uint64 friend_id = 3;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->friend_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.AddFriendConfirmRequest)
}

::google::protobuf::uint8* AddFriendConfirmRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.AddFriendConfirmRequest)
  // required .TerminalProtocol.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // required uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // required uint64 friend_id = 3;
  if (has_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->friend_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.AddFriendConfirmRequest)
  return target;
}

int AddFriendConfirmRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TerminalProtocol.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // required uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 friend_id = 3;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friend_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFriendConfirmRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddFriendConfirmRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddFriendConfirmRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddFriendConfirmRequest::MergeFrom(const AddFriendConfirmRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::TerminalProtocol::Result::MergeFrom(from.result());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddFriendConfirmRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFriendConfirmRequest::CopyFrom(const AddFriendConfirmRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFriendConfirmRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void AddFriendConfirmRequest::Swap(AddFriendConfirmRequest* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_id_, other->user_id_);
    std::swap(friend_id_, other->friend_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddFriendConfirmRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddFriendConfirmRequest_descriptor_;
  metadata.reflection = AddFriendConfirmRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddFriendNotify::kResultFieldNumber;
const int AddFriendNotify::kUserIdFieldNumber;
const int AddFriendNotify::kFriendIdFieldNumber;
#endif  // !_MSC_VER

AddFriendNotify::AddFriendNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.AddFriendNotify)
}

void AddFriendNotify::InitAsDefaultInstance() {
  result_ = const_cast< ::TerminalProtocol::Result*>(&::TerminalProtocol::Result::default_instance());
}

AddFriendNotify::AddFriendNotify(const AddFriendNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.AddFriendNotify)
}

void AddFriendNotify::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  user_id_ = GOOGLE_ULONGLONG(0);
  friend_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddFriendNotify::~AddFriendNotify() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.AddFriendNotify)
  SharedDtor();
}

void AddFriendNotify::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void AddFriendNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddFriendNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddFriendNotify_descriptor_;
}

const AddFriendNotify& AddFriendNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

AddFriendNotify* AddFriendNotify::default_instance_ = NULL;

AddFriendNotify* AddFriendNotify::New() const {
  return new AddFriendNotify;
}

void AddFriendNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AddFriendNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(user_id_, friend_id_);
    if (has_result()) {
      if (result_ != NULL) result_->::TerminalProtocol::Result::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddFriendNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.AddFriendNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TerminalProtocol.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint64 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_friend_id;
        break;
      }

      // required uint64 friend_id = 3;
      case 3: {
        if (tag == 24) {
         parse_friend_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend_id_)));
          set_has_friend_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.AddFriendNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.AddFriendNotify)
  return false;
#undef DO_
}

void AddFriendNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.AddFriendNotify)
  // required .TerminalProtocol.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // required uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // required uint64 friend_id = 3;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->friend_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.AddFriendNotify)
}

::google::protobuf::uint8* AddFriendNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.AddFriendNotify)
  // required .TerminalProtocol.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // required uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // required uint64 friend_id = 3;
  if (has_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->friend_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.AddFriendNotify)
  return target;
}

int AddFriendNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TerminalProtocol.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // required uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 friend_id = 3;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friend_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFriendNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddFriendNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddFriendNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddFriendNotify::MergeFrom(const AddFriendNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::TerminalProtocol::Result::MergeFrom(from.result());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddFriendNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFriendNotify::CopyFrom(const AddFriendNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFriendNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void AddFriendNotify::Swap(AddFriendNotify* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_id_, other->user_id_);
    std::swap(friend_id_, other->friend_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddFriendNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddFriendNotify_descriptor_;
  metadata.reflection = AddFriendNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteFriendRequest::kUserIdFieldNumber;
const int DeleteFriendRequest::kFriendIdFieldNumber;
#endif  // !_MSC_VER

DeleteFriendRequest::DeleteFriendRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.DeleteFriendRequest)
}

void DeleteFriendRequest::InitAsDefaultInstance() {
}

DeleteFriendRequest::DeleteFriendRequest(const DeleteFriendRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.DeleteFriendRequest)
}

void DeleteFriendRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  friend_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteFriendRequest::~DeleteFriendRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.DeleteFriendRequest)
  SharedDtor();
}

void DeleteFriendRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteFriendRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteFriendRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteFriendRequest_descriptor_;
}

const DeleteFriendRequest& DeleteFriendRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

DeleteFriendRequest* DeleteFriendRequest::default_instance_ = NULL;

DeleteFriendRequest* DeleteFriendRequest::New() const {
  return new DeleteFriendRequest;
}

void DeleteFriendRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DeleteFriendRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, friend_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteFriendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.DeleteFriendRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_friend_id;
        break;
      }

      // required uint64 friend_id = 2;
      case 2: {
        if (tag == 16) {
         parse_friend_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend_id_)));
          set_has_friend_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.DeleteFriendRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.DeleteFriendRequest)
  return false;
#undef DO_
}

void DeleteFriendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.DeleteFriendRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 friend_id = 2;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->friend_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.DeleteFriendRequest)
}

::google::protobuf::uint8* DeleteFriendRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.DeleteFriendRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 friend_id = 2;
  if (has_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->friend_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.DeleteFriendRequest)
  return target;
}

int DeleteFriendRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 friend_id = 2;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friend_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteFriendRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteFriendRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteFriendRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteFriendRequest::MergeFrom(const DeleteFriendRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteFriendRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteFriendRequest::CopyFrom(const DeleteFriendRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteFriendRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DeleteFriendRequest::Swap(DeleteFriendRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(friend_id_, other->friend_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteFriendRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteFriendRequest_descriptor_;
  metadata.reflection = DeleteFriendRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteFriendNotify::kUserIdFieldNumber;
const int DeleteFriendNotify::kFriendIdFieldNumber;
#endif  // !_MSC_VER

DeleteFriendNotify::DeleteFriendNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.DeleteFriendNotify)
}

void DeleteFriendNotify::InitAsDefaultInstance() {
}

DeleteFriendNotify::DeleteFriendNotify(const DeleteFriendNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.DeleteFriendNotify)
}

void DeleteFriendNotify::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  friend_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteFriendNotify::~DeleteFriendNotify() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.DeleteFriendNotify)
  SharedDtor();
}

void DeleteFriendNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteFriendNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteFriendNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteFriendNotify_descriptor_;
}

const DeleteFriendNotify& DeleteFriendNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

DeleteFriendNotify* DeleteFriendNotify::default_instance_ = NULL;

DeleteFriendNotify* DeleteFriendNotify::New() const {
  return new DeleteFriendNotify;
}

void DeleteFriendNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DeleteFriendNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, friend_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteFriendNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.DeleteFriendNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_friend_id;
        break;
      }

      // required uint64 friend_id = 2;
      case 2: {
        if (tag == 16) {
         parse_friend_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend_id_)));
          set_has_friend_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.DeleteFriendNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.DeleteFriendNotify)
  return false;
#undef DO_
}

void DeleteFriendNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.DeleteFriendNotify)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 friend_id = 2;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->friend_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.DeleteFriendNotify)
}

::google::protobuf::uint8* DeleteFriendNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.DeleteFriendNotify)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 friend_id = 2;
  if (has_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->friend_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.DeleteFriendNotify)
  return target;
}

int DeleteFriendNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 friend_id = 2;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friend_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteFriendNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteFriendNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteFriendNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteFriendNotify::MergeFrom(const DeleteFriendNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteFriendNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteFriendNotify::CopyFrom(const DeleteFriendNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteFriendNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DeleteFriendNotify::Swap(DeleteFriendNotify* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(friend_id_, other->friend_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteFriendNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteFriendNotify_descriptor_;
  metadata.reflection = DeleteFriendNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateFriendBranchRequest::kUserIdFieldNumber;
const int UpdateFriendBranchRequest::kFriendIdFieldNumber;
const int UpdateFriendBranchRequest::kBranchIdFieldNumber;
#endif  // !_MSC_VER

UpdateFriendBranchRequest::UpdateFriendBranchRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.UpdateFriendBranchRequest)
}

void UpdateFriendBranchRequest::InitAsDefaultInstance() {
}

UpdateFriendBranchRequest::UpdateFriendBranchRequest(const UpdateFriendBranchRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.UpdateFriendBranchRequest)
}

void UpdateFriendBranchRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  friend_id_ = GOOGLE_ULONGLONG(0);
  branch_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateFriendBranchRequest::~UpdateFriendBranchRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.UpdateFriendBranchRequest)
  SharedDtor();
}

void UpdateFriendBranchRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateFriendBranchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateFriendBranchRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateFriendBranchRequest_descriptor_;
}

const UpdateFriendBranchRequest& UpdateFriendBranchRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

UpdateFriendBranchRequest* UpdateFriendBranchRequest::default_instance_ = NULL;

UpdateFriendBranchRequest* UpdateFriendBranchRequest::New() const {
  return new UpdateFriendBranchRequest;
}

void UpdateFriendBranchRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UpdateFriendBranchRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, branch_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateFriendBranchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.UpdateFriendBranchRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_friend_id;
        break;
      }

      // required uint64 friend_id = 2;
      case 2: {
        if (tag == 16) {
         parse_friend_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend_id_)));
          set_has_friend_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_branch_id;
        break;
      }

      // required uint64 branch_id = 3;
      case 3: {
        if (tag == 24) {
         parse_branch_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &branch_id_)));
          set_has_branch_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.UpdateFriendBranchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.UpdateFriendBranchRequest)
  return false;
#undef DO_
}

void UpdateFriendBranchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.UpdateFriendBranchRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 friend_id = 2;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->friend_id(), output);
  }

  // required uint64 branch_id = 3;
  if (has_branch_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->branch_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.UpdateFriendBranchRequest)
}

::google::protobuf::uint8* UpdateFriendBranchRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.UpdateFriendBranchRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 friend_id = 2;
  if (has_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->friend_id(), target);
  }

  // required uint64 branch_id = 3;
  if (has_branch_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->branch_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.UpdateFriendBranchRequest)
  return target;
}

int UpdateFriendBranchRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 friend_id = 2;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friend_id());
    }

    // required uint64 branch_id = 3;
    if (has_branch_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->branch_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateFriendBranchRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateFriendBranchRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateFriendBranchRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateFriendBranchRequest::MergeFrom(const UpdateFriendBranchRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
    if (from.has_branch_id()) {
      set_branch_id(from.branch_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateFriendBranchRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateFriendBranchRequest::CopyFrom(const UpdateFriendBranchRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateFriendBranchRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UpdateFriendBranchRequest::Swap(UpdateFriendBranchRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(friend_id_, other->friend_id_);
    std::swap(branch_id_, other->branch_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateFriendBranchRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateFriendBranchRequest_descriptor_;
  metadata.reflection = UpdateFriendBranchRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddBranchRequest::kUserIdFieldNumber;
const int AddBranchRequest::kBranchNameFieldNumber;
const int AddBranchRequest::kBranchSortFieldNumber;
#endif  // !_MSC_VER

AddBranchRequest::AddBranchRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.AddBranchRequest)
}

void AddBranchRequest::InitAsDefaultInstance() {
}

AddBranchRequest::AddBranchRequest(const AddBranchRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.AddBranchRequest)
}

void AddBranchRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  branch_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  branch_sort_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddBranchRequest::~AddBranchRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.AddBranchRequest)
  SharedDtor();
}

void AddBranchRequest::SharedDtor() {
  if (branch_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete branch_name_;
  }
  if (this != default_instance_) {
  }
}

void AddBranchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddBranchRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddBranchRequest_descriptor_;
}

const AddBranchRequest& AddBranchRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

AddBranchRequest* AddBranchRequest::default_instance_ = NULL;

AddBranchRequest* AddBranchRequest::New() const {
  return new AddBranchRequest;
}

void AddBranchRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_branch_name()) {
      if (branch_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        branch_name_->clear();
      }
    }
    branch_sort_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddBranchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.AddBranchRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_branch_name;
        break;
      }

      // optional string branch_name = 2;
      case 2: {
        if (tag == 18) {
         parse_branch_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_branch_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->branch_name().data(), this->branch_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "branch_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_branch_sort;
        break;
      }

      // optional uint32 branch_sort = 3;
      case 3: {
        if (tag == 24) {
         parse_branch_sort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &branch_sort_)));
          set_has_branch_sort();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.AddBranchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.AddBranchRequest)
  return false;
#undef DO_
}

void AddBranchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.AddBranchRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional string branch_name = 2;
  if (has_branch_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->branch_name().data(), this->branch_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "branch_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->branch_name(), output);
  }

  // optional uint32 branch_sort = 3;
  if (has_branch_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->branch_sort(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.AddBranchRequest)
}

::google::protobuf::uint8* AddBranchRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.AddBranchRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional string branch_name = 2;
  if (has_branch_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->branch_name().data(), this->branch_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "branch_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->branch_name(), target);
  }

  // optional uint32 branch_sort = 3;
  if (has_branch_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->branch_sort(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.AddBranchRequest)
  return target;
}

int AddBranchRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string branch_name = 2;
    if (has_branch_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->branch_name());
    }

    // optional uint32 branch_sort = 3;
    if (has_branch_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->branch_sort());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddBranchRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddBranchRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddBranchRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddBranchRequest::MergeFrom(const AddBranchRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_branch_name()) {
      set_branch_name(from.branch_name());
    }
    if (from.has_branch_sort()) {
      set_branch_sort(from.branch_sort());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddBranchRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddBranchRequest::CopyFrom(const AddBranchRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddBranchRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AddBranchRequest::Swap(AddBranchRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(branch_name_, other->branch_name_);
    std::swap(branch_sort_, other->branch_sort_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddBranchRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddBranchRequest_descriptor_;
  metadata.reflection = AddBranchRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddBranchResponse::kUserIdFieldNumber;
const int AddBranchResponse::kBranchIdFieldNumber;
const int AddBranchResponse::kBranchNameFieldNumber;
const int AddBranchResponse::kBranchSortFieldNumber;
#endif  // !_MSC_VER

AddBranchResponse::AddBranchResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.AddBranchResponse)
}

void AddBranchResponse::InitAsDefaultInstance() {
}

AddBranchResponse::AddBranchResponse(const AddBranchResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.AddBranchResponse)
}

void AddBranchResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  branch_id_ = GOOGLE_ULONGLONG(0);
  branch_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  branch_sort_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddBranchResponse::~AddBranchResponse() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.AddBranchResponse)
  SharedDtor();
}

void AddBranchResponse::SharedDtor() {
  if (branch_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete branch_name_;
  }
  if (this != default_instance_) {
  }
}

void AddBranchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddBranchResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddBranchResponse_descriptor_;
}

const AddBranchResponse& AddBranchResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

AddBranchResponse* AddBranchResponse::default_instance_ = NULL;

AddBranchResponse* AddBranchResponse::New() const {
  return new AddBranchResponse;
}

void AddBranchResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AddBranchResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(user_id_, branch_id_);
    if (has_branch_name()) {
      if (branch_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        branch_name_->clear();
      }
    }
    branch_sort_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddBranchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.AddBranchResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_branch_id;
        break;
      }

      // optional uint64 branch_id = 2;
      case 2: {
        if (tag == 16) {
         parse_branch_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &branch_id_)));
          set_has_branch_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_branch_name;
        break;
      }

      // optional string branch_name = 3;
      case 3: {
        if (tag == 26) {
         parse_branch_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_branch_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->branch_name().data(), this->branch_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "branch_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_branch_sort;
        break;
      }

      // optional uint32 branch_sort = 4;
      case 4: {
        if (tag == 32) {
         parse_branch_sort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &branch_sort_)));
          set_has_branch_sort();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.AddBranchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.AddBranchResponse)
  return false;
#undef DO_
}

void AddBranchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.AddBranchResponse)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint64 branch_id = 2;
  if (has_branch_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->branch_id(), output);
  }

  // optional string branch_name = 3;
  if (has_branch_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->branch_name().data(), this->branch_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "branch_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->branch_name(), output);
  }

  // optional uint32 branch_sort = 4;
  if (has_branch_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->branch_sort(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.AddBranchResponse)
}

::google::protobuf::uint8* AddBranchResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.AddBranchResponse)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint64 branch_id = 2;
  if (has_branch_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->branch_id(), target);
  }

  // optional string branch_name = 3;
  if (has_branch_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->branch_name().data(), this->branch_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "branch_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->branch_name(), target);
  }

  // optional uint32 branch_sort = 4;
  if (has_branch_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->branch_sort(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.AddBranchResponse)
  return target;
}

int AddBranchResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 branch_id = 2;
    if (has_branch_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->branch_id());
    }

    // optional string branch_name = 3;
    if (has_branch_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->branch_name());
    }

    // optional uint32 branch_sort = 4;
    if (has_branch_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->branch_sort());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddBranchResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddBranchResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddBranchResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddBranchResponse::MergeFrom(const AddBranchResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_branch_id()) {
      set_branch_id(from.branch_id());
    }
    if (from.has_branch_name()) {
      set_branch_name(from.branch_name());
    }
    if (from.has_branch_sort()) {
      set_branch_sort(from.branch_sort());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddBranchResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddBranchResponse::CopyFrom(const AddBranchResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddBranchResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AddBranchResponse::Swap(AddBranchResponse* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(branch_id_, other->branch_id_);
    std::swap(branch_name_, other->branch_name_);
    std::swap(branch_sort_, other->branch_sort_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddBranchResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddBranchResponse_descriptor_;
  metadata.reflection = AddBranchResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteBranchRequest::kUserIdFieldNumber;
const int DeleteBranchRequest::kBranchIdFieldNumber;
#endif  // !_MSC_VER

DeleteBranchRequest::DeleteBranchRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.DeleteBranchRequest)
}

void DeleteBranchRequest::InitAsDefaultInstance() {
}

DeleteBranchRequest::DeleteBranchRequest(const DeleteBranchRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.DeleteBranchRequest)
}

void DeleteBranchRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  branch_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteBranchRequest::~DeleteBranchRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.DeleteBranchRequest)
  SharedDtor();
}

void DeleteBranchRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteBranchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteBranchRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteBranchRequest_descriptor_;
}

const DeleteBranchRequest& DeleteBranchRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

DeleteBranchRequest* DeleteBranchRequest::default_instance_ = NULL;

DeleteBranchRequest* DeleteBranchRequest::New() const {
  return new DeleteBranchRequest;
}

void DeleteBranchRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DeleteBranchRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, branch_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteBranchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.DeleteBranchRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_branch_id;
        break;
      }

      // required uint64 branch_id = 2;
      case 2: {
        if (tag == 16) {
         parse_branch_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &branch_id_)));
          set_has_branch_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.DeleteBranchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.DeleteBranchRequest)
  return false;
#undef DO_
}

void DeleteBranchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.DeleteBranchRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 branch_id = 2;
  if (has_branch_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->branch_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.DeleteBranchRequest)
}

::google::protobuf::uint8* DeleteBranchRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.DeleteBranchRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 branch_id = 2;
  if (has_branch_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->branch_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.DeleteBranchRequest)
  return target;
}

int DeleteBranchRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 branch_id = 2;
    if (has_branch_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->branch_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteBranchRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteBranchRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteBranchRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteBranchRequest::MergeFrom(const DeleteBranchRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_branch_id()) {
      set_branch_id(from.branch_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteBranchRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteBranchRequest::CopyFrom(const DeleteBranchRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteBranchRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DeleteBranchRequest::Swap(DeleteBranchRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(branch_id_, other->branch_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteBranchRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteBranchRequest_descriptor_;
  metadata.reflection = DeleteBranchRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateBranchNameRequest::kUserIdFieldNumber;
const int UpdateBranchNameRequest::kBranchIdFieldNumber;
const int UpdateBranchNameRequest::kBranchNameFieldNumber;
const int UpdateBranchNameRequest::kBranchSortFieldNumber;
#endif  // !_MSC_VER

UpdateBranchNameRequest::UpdateBranchNameRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.UpdateBranchNameRequest)
}

void UpdateBranchNameRequest::InitAsDefaultInstance() {
}

UpdateBranchNameRequest::UpdateBranchNameRequest(const UpdateBranchNameRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.UpdateBranchNameRequest)
}

void UpdateBranchNameRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  branch_id_ = GOOGLE_ULONGLONG(0);
  branch_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  branch_sort_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateBranchNameRequest::~UpdateBranchNameRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.UpdateBranchNameRequest)
  SharedDtor();
}

void UpdateBranchNameRequest::SharedDtor() {
  if (branch_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete branch_name_;
  }
  if (this != default_instance_) {
  }
}

void UpdateBranchNameRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateBranchNameRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateBranchNameRequest_descriptor_;
}

const UpdateBranchNameRequest& UpdateBranchNameRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

UpdateBranchNameRequest* UpdateBranchNameRequest::default_instance_ = NULL;

UpdateBranchNameRequest* UpdateBranchNameRequest::New() const {
  return new UpdateBranchNameRequest;
}

void UpdateBranchNameRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UpdateBranchNameRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(user_id_, branch_id_);
    if (has_branch_name()) {
      if (branch_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        branch_name_->clear();
      }
    }
    branch_sort_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateBranchNameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.UpdateBranchNameRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_branch_id;
        break;
      }

      // optional uint64 branch_id = 2;
      case 2: {
        if (tag == 16) {
         parse_branch_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &branch_id_)));
          set_has_branch_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_branch_name;
        break;
      }

      // optional string branch_name = 3;
      case 3: {
        if (tag == 26) {
         parse_branch_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_branch_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->branch_name().data(), this->branch_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "branch_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_branch_sort;
        break;
      }

      // optional uint32 branch_sort = 4;
      case 4: {
        if (tag == 32) {
         parse_branch_sort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &branch_sort_)));
          set_has_branch_sort();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.UpdateBranchNameRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.UpdateBranchNameRequest)
  return false;
#undef DO_
}

void UpdateBranchNameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.UpdateBranchNameRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint64 branch_id = 2;
  if (has_branch_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->branch_id(), output);
  }

  // optional string branch_name = 3;
  if (has_branch_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->branch_name().data(), this->branch_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "branch_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->branch_name(), output);
  }

  // optional uint32 branch_sort = 4;
  if (has_branch_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->branch_sort(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.UpdateBranchNameRequest)
}

::google::protobuf::uint8* UpdateBranchNameRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.UpdateBranchNameRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint64 branch_id = 2;
  if (has_branch_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->branch_id(), target);
  }

  // optional string branch_name = 3;
  if (has_branch_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->branch_name().data(), this->branch_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "branch_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->branch_name(), target);
  }

  // optional uint32 branch_sort = 4;
  if (has_branch_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->branch_sort(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.UpdateBranchNameRequest)
  return target;
}

int UpdateBranchNameRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 branch_id = 2;
    if (has_branch_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->branch_id());
    }

    // optional string branch_name = 3;
    if (has_branch_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->branch_name());
    }

    // optional uint32 branch_sort = 4;
    if (has_branch_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->branch_sort());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateBranchNameRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateBranchNameRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateBranchNameRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateBranchNameRequest::MergeFrom(const UpdateBranchNameRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_branch_id()) {
      set_branch_id(from.branch_id());
    }
    if (from.has_branch_name()) {
      set_branch_name(from.branch_name());
    }
    if (from.has_branch_sort()) {
      set_branch_sort(from.branch_sort());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateBranchNameRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateBranchNameRequest::CopyFrom(const UpdateBranchNameRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateBranchNameRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UpdateBranchNameRequest::Swap(UpdateBranchNameRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(branch_id_, other->branch_id_);
    std::swap(branch_name_, other->branch_name_);
    std::swap(branch_sort_, other->branch_sort_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateBranchNameRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateBranchNameRequest_descriptor_;
  metadata.reflection = UpdateBranchNameRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KickoutGroupUserRequest::kUserIdFieldNumber;
const int KickoutGroupUserRequest::kGroupUserIdFieldNumber;
const int KickoutGroupUserRequest::kGroupIdFieldNumber;
#endif  // !_MSC_VER

KickoutGroupUserRequest::KickoutGroupUserRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.KickoutGroupUserRequest)
}

void KickoutGroupUserRequest::InitAsDefaultInstance() {
}

KickoutGroupUserRequest::KickoutGroupUserRequest(const KickoutGroupUserRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.KickoutGroupUserRequest)
}

void KickoutGroupUserRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickoutGroupUserRequest::~KickoutGroupUserRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.KickoutGroupUserRequest)
  SharedDtor();
}

void KickoutGroupUserRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KickoutGroupUserRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickoutGroupUserRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickoutGroupUserRequest_descriptor_;
}

const KickoutGroupUserRequest& KickoutGroupUserRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

KickoutGroupUserRequest* KickoutGroupUserRequest::default_instance_ = NULL;

KickoutGroupUserRequest* KickoutGroupUserRequest::New() const {
  return new KickoutGroupUserRequest;
}

void KickoutGroupUserRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<KickoutGroupUserRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, group_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KickoutGroupUserRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.KickoutGroupUserRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_user_id;
        break;
      }

      // optional uint64 group_user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_user_id_)));
          set_has_group_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_id;
        break;
      }

      // optional uint64 group_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.KickoutGroupUserRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.KickoutGroupUserRequest)
  return false;
#undef DO_
}

void KickoutGroupUserRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.KickoutGroupUserRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint64 group_user_id = 2;
  if (has_group_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_user_id(), output);
  }

  // optional uint64 group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.KickoutGroupUserRequest)
}

::google::protobuf::uint8* KickoutGroupUserRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.KickoutGroupUserRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint64 group_user_id = 2;
  if (has_group_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_user_id(), target);
  }

  // optional uint64 group_id = 3;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.KickoutGroupUserRequest)
  return target;
}

int KickoutGroupUserRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 group_user_id = 2;
    if (has_group_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_user_id());
    }

    // optional uint64 group_id = 3;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickoutGroupUserRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KickoutGroupUserRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KickoutGroupUserRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KickoutGroupUserRequest::MergeFrom(const KickoutGroupUserRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_user_id()) {
      set_group_user_id(from.group_user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KickoutGroupUserRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickoutGroupUserRequest::CopyFrom(const KickoutGroupUserRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickoutGroupUserRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void KickoutGroupUserRequest::Swap(KickoutGroupUserRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_user_id_, other->group_user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KickoutGroupUserRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KickoutGroupUserRequest_descriptor_;
  metadata.reflection = KickoutGroupUserRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetGroupManagerRequest::kUserIdFieldNumber;
const int SetGroupManagerRequest::kGroupIdFieldNumber;
const int SetGroupManagerRequest::kGroupUserIdFieldNumber;
const int SetGroupManagerRequest::kControlValueFieldNumber;
#endif  // !_MSC_VER

SetGroupManagerRequest::SetGroupManagerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.SetGroupManagerRequest)
}

void SetGroupManagerRequest::InitAsDefaultInstance() {
}

SetGroupManagerRequest::SetGroupManagerRequest(const SetGroupManagerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.SetGroupManagerRequest)
}

void SetGroupManagerRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  group_user_id_ = GOOGLE_ULONGLONG(0);
  control_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetGroupManagerRequest::~SetGroupManagerRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.SetGroupManagerRequest)
  SharedDtor();
}

void SetGroupManagerRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetGroupManagerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetGroupManagerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetGroupManagerRequest_descriptor_;
}

const SetGroupManagerRequest& SetGroupManagerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

SetGroupManagerRequest* SetGroupManagerRequest::default_instance_ = NULL;

SetGroupManagerRequest* SetGroupManagerRequest::New() const {
  return new SetGroupManagerRequest;
}

void SetGroupManagerRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SetGroupManagerRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, control_value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetGroupManagerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.SetGroupManagerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // optional uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_user_id;
        break;
      }

      // optional uint64 group_user_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_user_id_)));
          set_has_group_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_control_value;
        break;
      }

      // optional uint32 control_value = 4;
      case 4: {
        if (tag == 32) {
         parse_control_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &control_value_)));
          set_has_control_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.SetGroupManagerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.SetGroupManagerRequest)
  return false;
#undef DO_
}

void SetGroupManagerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.SetGroupManagerRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  // optional uint64 group_user_id = 3;
  if (has_group_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->group_user_id(), output);
  }

  // optional uint32 control_value = 4;
  if (has_control_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->control_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.SetGroupManagerRequest)
}

::google::protobuf::uint8* SetGroupManagerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.SetGroupManagerRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  // optional uint64 group_user_id = 3;
  if (has_group_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->group_user_id(), target);
  }

  // optional uint32 control_value = 4;
  if (has_control_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->control_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.SetGroupManagerRequest)
  return target;
}

int SetGroupManagerRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional uint64 group_user_id = 3;
    if (has_group_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_user_id());
    }

    // optional uint32 control_value = 4;
    if (has_control_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->control_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetGroupManagerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetGroupManagerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetGroupManagerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetGroupManagerRequest::MergeFrom(const SetGroupManagerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_user_id()) {
      set_group_user_id(from.group_user_id());
    }
    if (from.has_control_value()) {
      set_control_value(from.control_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetGroupManagerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetGroupManagerRequest::CopyFrom(const SetGroupManagerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetGroupManagerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetGroupManagerRequest::Swap(SetGroupManagerRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(group_user_id_, other->group_user_id_);
    std::swap(control_value_, other->control_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetGroupManagerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetGroupManagerRequest_descriptor_;
  metadata.reflection = SetGroupManagerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateFriendRemarkRequest::kUserIdFieldNumber;
const int UpdateFriendRemarkRequest::kFriendIdFieldNumber;
const int UpdateFriendRemarkRequest::kRemarkFieldNumber;
#endif  // !_MSC_VER

UpdateFriendRemarkRequest::UpdateFriendRemarkRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.UpdateFriendRemarkRequest)
}

void UpdateFriendRemarkRequest::InitAsDefaultInstance() {
}

UpdateFriendRemarkRequest::UpdateFriendRemarkRequest(const UpdateFriendRemarkRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.UpdateFriendRemarkRequest)
}

void UpdateFriendRemarkRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  friend_id_ = GOOGLE_ULONGLONG(0);
  remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateFriendRemarkRequest::~UpdateFriendRemarkRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.UpdateFriendRemarkRequest)
  SharedDtor();
}

void UpdateFriendRemarkRequest::SharedDtor() {
  if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete remark_;
  }
  if (this != default_instance_) {
  }
}

void UpdateFriendRemarkRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateFriendRemarkRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateFriendRemarkRequest_descriptor_;
}

const UpdateFriendRemarkRequest& UpdateFriendRemarkRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

UpdateFriendRemarkRequest* UpdateFriendRemarkRequest::default_instance_ = NULL;

UpdateFriendRemarkRequest* UpdateFriendRemarkRequest::New() const {
  return new UpdateFriendRemarkRequest;
}

void UpdateFriendRemarkRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UpdateFriendRemarkRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(user_id_, friend_id_);
    if (has_remark()) {
      if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        remark_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateFriendRemarkRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.UpdateFriendRemarkRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_friend_id;
        break;
      }

      // optional uint64 friend_id = 2;
      case 2: {
        if (tag == 16) {
         parse_friend_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend_id_)));
          set_has_friend_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_remark;
        break;
      }

      // optional string remark = 3;
      case 3: {
        if (tag == 26) {
         parse_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->remark().data(), this->remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "remark");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.UpdateFriendRemarkRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.UpdateFriendRemarkRequest)
  return false;
#undef DO_
}

void UpdateFriendRemarkRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.UpdateFriendRemarkRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint64 friend_id = 2;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->friend_id(), output);
  }

  // optional string remark = 3;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->remark(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.UpdateFriendRemarkRequest)
}

::google::protobuf::uint8* UpdateFriendRemarkRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.UpdateFriendRemarkRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint64 friend_id = 2;
  if (has_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->friend_id(), target);
  }

  // optional string remark = 3;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->remark(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.UpdateFriendRemarkRequest)
  return target;
}

int UpdateFriendRemarkRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 friend_id = 2;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friend_id());
    }

    // optional string remark = 3;
    if (has_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remark());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateFriendRemarkRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateFriendRemarkRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateFriendRemarkRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateFriendRemarkRequest::MergeFrom(const UpdateFriendRemarkRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
    if (from.has_remark()) {
      set_remark(from.remark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateFriendRemarkRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateFriendRemarkRequest::CopyFrom(const UpdateFriendRemarkRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateFriendRemarkRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UpdateFriendRemarkRequest::Swap(UpdateFriendRemarkRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(friend_id_, other->friend_id_);
    std::swap(remark_, other->remark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateFriendRemarkRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateFriendRemarkRequest_descriptor_;
  metadata.reflection = UpdateFriendRemarkRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetBranchListRequest::kUserIdFieldNumber;
const int GetBranchListRequest::kVersionIdFieldNumber;
#endif  // !_MSC_VER

GetBranchListRequest::GetBranchListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.GetBranchListRequest)
}

void GetBranchListRequest::InitAsDefaultInstance() {
}

GetBranchListRequest::GetBranchListRequest(const GetBranchListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.GetBranchListRequest)
}

void GetBranchListRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  version_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBranchListRequest::~GetBranchListRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.GetBranchListRequest)
  SharedDtor();
}

void GetBranchListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetBranchListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBranchListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBranchListRequest_descriptor_;
}

const GetBranchListRequest& GetBranchListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

GetBranchListRequest* GetBranchListRequest::default_instance_ = NULL;

GetBranchListRequest* GetBranchListRequest::New() const {
  return new GetBranchListRequest;
}

void GetBranchListRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetBranchListRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, version_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBranchListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.GetBranchListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version_id;
        break;
      }

      // optional uint64 version_id = 2;
      case 2: {
        if (tag == 16) {
         parse_version_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_id_)));
          set_has_version_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.GetBranchListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.GetBranchListRequest)
  return false;
#undef DO_
}

void GetBranchListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.GetBranchListRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint64 version_id = 2;
  if (has_version_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->version_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.GetBranchListRequest)
}

::google::protobuf::uint8* GetBranchListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.GetBranchListRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint64 version_id = 2;
  if (has_version_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->version_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.GetBranchListRequest)
  return target;
}

int GetBranchListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 version_id = 2;
    if (has_version_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBranchListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBranchListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBranchListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBranchListRequest::MergeFrom(const GetBranchListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_version_id()) {
      set_version_id(from.version_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBranchListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBranchListRequest::CopyFrom(const GetBranchListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBranchListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetBranchListRequest::Swap(GetBranchListRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(version_id_, other->version_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBranchListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBranchListRequest_descriptor_;
  metadata.reflection = GetBranchListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserIdRemarkItem::kUserIdFieldNumber;
const int UserIdRemarkItem::kUserRemarkFieldNumber;
#endif  // !_MSC_VER

UserIdRemarkItem::UserIdRemarkItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.UserIdRemarkItem)
}

void UserIdRemarkItem::InitAsDefaultInstance() {
}

UserIdRemarkItem::UserIdRemarkItem(const UserIdRemarkItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.UserIdRemarkItem)
}

void UserIdRemarkItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  user_remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserIdRemarkItem::~UserIdRemarkItem() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.UserIdRemarkItem)
  SharedDtor();
}

void UserIdRemarkItem::SharedDtor() {
  if (user_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_remark_;
  }
  if (this != default_instance_) {
  }
}

void UserIdRemarkItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserIdRemarkItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserIdRemarkItem_descriptor_;
}

const UserIdRemarkItem& UserIdRemarkItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

UserIdRemarkItem* UserIdRemarkItem::default_instance_ = NULL;

UserIdRemarkItem* UserIdRemarkItem::New() const {
  return new UserIdRemarkItem;
}

void UserIdRemarkItem::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_user_remark()) {
      if (user_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_remark_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserIdRemarkItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.UserIdRemarkItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_remark;
        break;
      }

      // optional string user_remark = 2;
      case 2: {
        if (tag == 18) {
         parse_user_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_remark().data(), this->user_remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user_remark");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.UserIdRemarkItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.UserIdRemarkItem)
  return false;
#undef DO_
}

void UserIdRemarkItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.UserIdRemarkItem)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional string user_remark = 2;
  if (has_user_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_remark().data(), this->user_remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_remark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_remark(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.UserIdRemarkItem)
}

::google::protobuf::uint8* UserIdRemarkItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.UserIdRemarkItem)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional string user_remark = 2;
  if (has_user_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_remark().data(), this->user_remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_remark");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_remark(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.UserIdRemarkItem)
  return target;
}

int UserIdRemarkItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string user_remark = 2;
    if (has_user_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_remark());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserIdRemarkItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserIdRemarkItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserIdRemarkItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserIdRemarkItem::MergeFrom(const UserIdRemarkItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_remark()) {
      set_user_remark(from.user_remark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserIdRemarkItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserIdRemarkItem::CopyFrom(const UserIdRemarkItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserIdRemarkItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UserIdRemarkItem::Swap(UserIdRemarkItem* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(user_remark_, other->user_remark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserIdRemarkItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserIdRemarkItem_descriptor_;
  metadata.reflection = UserIdRemarkItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BranchListItem::kBranchIdFieldNumber;
const int BranchListItem::kBranchNameFieldNumber;
const int BranchListItem::kBranchSortFieldNumber;
const int BranchListItem::kUsersFieldNumber;
#endif  // !_MSC_VER

BranchListItem::BranchListItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.BranchListItem)
}

void BranchListItem::InitAsDefaultInstance() {
}

BranchListItem::BranchListItem(const BranchListItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.BranchListItem)
}

void BranchListItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  branch_id_ = GOOGLE_ULONGLONG(0);
  branch_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  branch_sort_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BranchListItem::~BranchListItem() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.BranchListItem)
  SharedDtor();
}

void BranchListItem::SharedDtor() {
  if (branch_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete branch_name_;
  }
  if (this != default_instance_) {
  }
}

void BranchListItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BranchListItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BranchListItem_descriptor_;
}

const BranchListItem& BranchListItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

BranchListItem* BranchListItem::default_instance_ = NULL;

BranchListItem* BranchListItem::New() const {
  return new BranchListItem;
}

void BranchListItem::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    branch_id_ = GOOGLE_ULONGLONG(0);
    if (has_branch_name()) {
      if (branch_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        branch_name_->clear();
      }
    }
    branch_sort_ = 0u;
  }
  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BranchListItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.BranchListItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 branch_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &branch_id_)));
          set_has_branch_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_branch_name;
        break;
      }

      // optional string branch_name = 2;
      case 2: {
        if (tag == 18) {
         parse_branch_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_branch_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->branch_name().data(), this->branch_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "branch_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_branch_sort;
        break;
      }

      // optional uint32 branch_sort = 3;
      case 3: {
        if (tag == 24) {
         parse_branch_sort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &branch_sort_)));
          set_has_branch_sort();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_users;
        break;
      }

      // repeated .TerminalProtocol.UserIdRemarkItem users = 4;
      case 4: {
        if (tag == 34) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_users;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.BranchListItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.BranchListItem)
  return false;
#undef DO_
}

void BranchListItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.BranchListItem)
  // required uint64 branch_id = 1;
  if (has_branch_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->branch_id(), output);
  }

  // optional string branch_name = 2;
  if (has_branch_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->branch_name().data(), this->branch_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "branch_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->branch_name(), output);
  }

  // optional uint32 branch_sort = 3;
  if (has_branch_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->branch_sort(), output);
  }

  // repeated .TerminalProtocol.UserIdRemarkItem users = 4;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->users(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.BranchListItem)
}

::google::protobuf::uint8* BranchListItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.BranchListItem)
  // required uint64 branch_id = 1;
  if (has_branch_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->branch_id(), target);
  }

  // optional string branch_name = 2;
  if (has_branch_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->branch_name().data(), this->branch_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "branch_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->branch_name(), target);
  }

  // optional uint32 branch_sort = 3;
  if (has_branch_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->branch_sort(), target);
  }

  // repeated .TerminalProtocol.UserIdRemarkItem users = 4;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->users(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.BranchListItem)
  return target;
}

int BranchListItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 branch_id = 1;
    if (has_branch_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->branch_id());
    }

    // optional string branch_name = 2;
    if (has_branch_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->branch_name());
    }

    // optional uint32 branch_sort = 3;
    if (has_branch_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->branch_sort());
    }

  }
  // repeated .TerminalProtocol.UserIdRemarkItem users = 4;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BranchListItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BranchListItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BranchListItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BranchListItem::MergeFrom(const BranchListItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_branch_id()) {
      set_branch_id(from.branch_id());
    }
    if (from.has_branch_name()) {
      set_branch_name(from.branch_name());
    }
    if (from.has_branch_sort()) {
      set_branch_sort(from.branch_sort());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BranchListItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BranchListItem::CopyFrom(const BranchListItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BranchListItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->users())) return false;
  return true;
}

void BranchListItem::Swap(BranchListItem* other) {
  if (other != this) {
    std::swap(branch_id_, other->branch_id_);
    std::swap(branch_name_, other->branch_name_);
    std::swap(branch_sort_, other->branch_sort_);
    users_.Swap(&other->users_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BranchListItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BranchListItem_descriptor_;
  metadata.reflection = BranchListItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetBranchListResponse::kUserIdFieldNumber;
const int GetBranchListResponse::kVersionIdFieldNumber;
const int GetBranchListResponse::kListItemFieldNumber;
#endif  // !_MSC_VER

GetBranchListResponse::GetBranchListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.GetBranchListResponse)
}

void GetBranchListResponse::InitAsDefaultInstance() {
}

GetBranchListResponse::GetBranchListResponse(const GetBranchListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.GetBranchListResponse)
}

void GetBranchListResponse::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  version_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBranchListResponse::~GetBranchListResponse() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.GetBranchListResponse)
  SharedDtor();
}

void GetBranchListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetBranchListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBranchListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBranchListResponse_descriptor_;
}

const GetBranchListResponse& GetBranchListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

GetBranchListResponse* GetBranchListResponse::default_instance_ = NULL;

GetBranchListResponse* GetBranchListResponse::New() const {
  return new GetBranchListResponse;
}

void GetBranchListResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetBranchListResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, version_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  list_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBranchListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.GetBranchListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version_id;
        break;
      }

      // optional uint64 version_id = 2;
      case 2: {
        if (tag == 16) {
         parse_version_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_id_)));
          set_has_version_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_list_item;
        break;
      }

      // repeated .TerminalProtocol.BranchListItem list_item = 3;
      case 3: {
        if (tag == 26) {
         parse_list_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_list_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.GetBranchListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.GetBranchListResponse)
  return false;
#undef DO_
}

void GetBranchListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.GetBranchListResponse)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint64 version_id = 2;
  if (has_version_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->version_id(), output);
  }

  // repeated .TerminalProtocol.BranchListItem list_item = 3;
  for (int i = 0; i < this->list_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list_item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.GetBranchListResponse)
}

::google::protobuf::uint8* GetBranchListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.GetBranchListResponse)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint64 version_id = 2;
  if (has_version_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->version_id(), target);
  }

  // repeated .TerminalProtocol.BranchListItem list_item = 3;
  for (int i = 0; i < this->list_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->list_item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.GetBranchListResponse)
  return target;
}

int GetBranchListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 version_id = 2;
    if (has_version_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version_id());
    }

  }
  // repeated .TerminalProtocol.BranchListItem list_item = 3;
  total_size += 1 * this->list_item_size();
  for (int i = 0; i < this->list_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBranchListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBranchListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBranchListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBranchListResponse::MergeFrom(const GetBranchListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_item_.MergeFrom(from.list_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_version_id()) {
      set_version_id(from.version_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBranchListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBranchListResponse::CopyFrom(const GetBranchListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBranchListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->list_item())) return false;
  return true;
}

void GetBranchListResponse::Swap(GetBranchListResponse* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(version_id_, other->version_id_);
    list_item_.Swap(&other->list_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBranchListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBranchListResponse_descriptor_;
  metadata.reflection = GetBranchListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetFriendOptionRequest::kUserIdFieldNumber;
const int SetFriendOptionRequest::kVerifyTypeFieldNumber;
const int SetFriendOptionRequest::kQuestionTypeFieldNumber;
const int SetFriendOptionRequest::kAnswerFieldNumber;
#endif  // !_MSC_VER

SetFriendOptionRequest::SetFriendOptionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.SetFriendOptionRequest)
}

void SetFriendOptionRequest::InitAsDefaultInstance() {
}

SetFriendOptionRequest::SetFriendOptionRequest(const SetFriendOptionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.SetFriendOptionRequest)
}

void SetFriendOptionRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  verify_type_ = 0u;
  question_type_ = 0u;
  answer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetFriendOptionRequest::~SetFriendOptionRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.SetFriendOptionRequest)
  SharedDtor();
}

void SetFriendOptionRequest::SharedDtor() {
  if (answer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete answer_;
  }
  if (this != default_instance_) {
  }
}

void SetFriendOptionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetFriendOptionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetFriendOptionRequest_descriptor_;
}

const SetFriendOptionRequest& SetFriendOptionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

SetFriendOptionRequest* SetFriendOptionRequest::default_instance_ = NULL;

SetFriendOptionRequest* SetFriendOptionRequest::New() const {
  return new SetFriendOptionRequest;
}

void SetFriendOptionRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SetFriendOptionRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(user_id_, question_type_);
    if (has_answer()) {
      if (answer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        answer_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetFriendOptionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.SetFriendOptionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_verify_type;
        break;
      }

      // optional uint32 verify_type = 2;
      case 2: {
        if (tag == 16) {
         parse_verify_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &verify_type_)));
          set_has_verify_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_question_type;
        break;
      }

      // optional uint32 question_type = 3;
      case 3: {
        if (tag == 24) {
         parse_question_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &question_type_)));
          set_has_question_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_answer;
        break;
      }

      // optional string answer = 4;
      case 4: {
        if (tag == 34) {
         parse_answer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_answer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->answer().data(), this->answer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "answer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.SetFriendOptionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.SetFriendOptionRequest)
  return false;
#undef DO_
}

void SetFriendOptionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.SetFriendOptionRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint32 verify_type = 2;
  if (has_verify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->verify_type(), output);
  }

  // optional uint32 question_type = 3;
  if (has_question_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->question_type(), output);
  }

  // optional string answer = 4;
  if (has_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "answer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->answer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.SetFriendOptionRequest)
}

::google::protobuf::uint8* SetFriendOptionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.SetFriendOptionRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint32 verify_type = 2;
  if (has_verify_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->verify_type(), target);
  }

  // optional uint32 question_type = 3;
  if (has_question_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->question_type(), target);
  }

  // optional string answer = 4;
  if (has_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "answer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->answer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.SetFriendOptionRequest)
  return target;
}

int SetFriendOptionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint32 verify_type = 2;
    if (has_verify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->verify_type());
    }

    // optional uint32 question_type = 3;
    if (has_question_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->question_type());
    }

    // optional string answer = 4;
    if (has_answer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->answer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetFriendOptionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetFriendOptionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetFriendOptionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetFriendOptionRequest::MergeFrom(const SetFriendOptionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_verify_type()) {
      set_verify_type(from.verify_type());
    }
    if (from.has_question_type()) {
      set_question_type(from.question_type());
    }
    if (from.has_answer()) {
      set_answer(from.answer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetFriendOptionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetFriendOptionRequest::CopyFrom(const SetFriendOptionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetFriendOptionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetFriendOptionRequest::Swap(SetFriendOptionRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(verify_type_, other->verify_type_);
    std::swap(question_type_, other->question_type_);
    std::swap(answer_, other->answer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetFriendOptionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetFriendOptionRequest_descriptor_;
  metadata.reflection = SetFriendOptionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupManagerVerifyRequest::kUserIdFieldNumber;
const int GroupManagerVerifyRequest::kGroupIdFieldNumber;
const int GroupManagerVerifyRequest::kMsgFieldNumber;
#endif  // !_MSC_VER

GroupManagerVerifyRequest::GroupManagerVerifyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.GroupManagerVerifyRequest)
}

void GroupManagerVerifyRequest::InitAsDefaultInstance() {
}

GroupManagerVerifyRequest::GroupManagerVerifyRequest(const GroupManagerVerifyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.GroupManagerVerifyRequest)
}

void GroupManagerVerifyRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupManagerVerifyRequest::~GroupManagerVerifyRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.GroupManagerVerifyRequest)
  SharedDtor();
}

void GroupManagerVerifyRequest::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void GroupManagerVerifyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupManagerVerifyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupManagerVerifyRequest_descriptor_;
}

const GroupManagerVerifyRequest& GroupManagerVerifyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

GroupManagerVerifyRequest* GroupManagerVerifyRequest::default_instance_ = NULL;

GroupManagerVerifyRequest* GroupManagerVerifyRequest::New() const {
  return new GroupManagerVerifyRequest;
}

void GroupManagerVerifyRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GroupManagerVerifyRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(user_id_, group_id_);
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupManagerVerifyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.GroupManagerVerifyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }

      // optional string msg = 3;
      case 3: {
        if (tag == 26) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.GroupManagerVerifyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.GroupManagerVerifyRequest)
  return false;
#undef DO_
}

void GroupManagerVerifyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.GroupManagerVerifyRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  // optional string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.GroupManagerVerifyRequest)
}

::google::protobuf::uint8* GroupManagerVerifyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.GroupManagerVerifyRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  // optional string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.GroupManagerVerifyRequest)
  return target;
}

int GroupManagerVerifyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional string msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupManagerVerifyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupManagerVerifyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupManagerVerifyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupManagerVerifyRequest::MergeFrom(const GroupManagerVerifyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupManagerVerifyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupManagerVerifyRequest::CopyFrom(const GroupManagerVerifyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupManagerVerifyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GroupManagerVerifyRequest::Swap(GroupManagerVerifyRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupManagerVerifyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupManagerVerifyRequest_descriptor_;
  metadata.reflection = GroupManagerVerifyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupManagerVerifyResponse::kUserIdFieldNumber;
const int GroupManagerVerifyResponse::kGroupIdFieldNumber;
const int GroupManagerVerifyResponse::kIsAllowFieldNumber;
const int GroupManagerVerifyResponse::kReasonFieldNumber;
#endif  // !_MSC_VER

GroupManagerVerifyResponse::GroupManagerVerifyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.GroupManagerVerifyResponse)
}

void GroupManagerVerifyResponse::InitAsDefaultInstance() {
}

GroupManagerVerifyResponse::GroupManagerVerifyResponse(const GroupManagerVerifyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.GroupManagerVerifyResponse)
}

void GroupManagerVerifyResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  is_allow_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupManagerVerifyResponse::~GroupManagerVerifyResponse() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.GroupManagerVerifyResponse)
  SharedDtor();
}

void GroupManagerVerifyResponse::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void GroupManagerVerifyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupManagerVerifyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupManagerVerifyResponse_descriptor_;
}

const GroupManagerVerifyResponse& GroupManagerVerifyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

GroupManagerVerifyResponse* GroupManagerVerifyResponse::default_instance_ = NULL;

GroupManagerVerifyResponse* GroupManagerVerifyResponse::New() const {
  return new GroupManagerVerifyResponse;
}

void GroupManagerVerifyResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GroupManagerVerifyResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(user_id_, group_id_);
    is_allow_ = 0u;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupManagerVerifyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.GroupManagerVerifyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_allow;
        break;
      }

      // optional uint32 is_allow = 3;
      case 3: {
        if (tag == 24) {
         parse_is_allow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_allow_)));
          set_has_is_allow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_reason;
        break;
      }

      // optional string reason = 4;
      case 4: {
        if (tag == 34) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.GroupManagerVerifyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.GroupManagerVerifyResponse)
  return false;
#undef DO_
}

void GroupManagerVerifyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.GroupManagerVerifyResponse)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  // optional uint32 is_allow = 3;
  if (has_is_allow()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_allow(), output);
  }

  // optional string reason = 4;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.GroupManagerVerifyResponse)
}

::google::protobuf::uint8* GroupManagerVerifyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.GroupManagerVerifyResponse)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  // optional uint32 is_allow = 3;
  if (has_is_allow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->is_allow(), target);
  }

  // optional string reason = 4;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.GroupManagerVerifyResponse)
  return target;
}

int GroupManagerVerifyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional uint32 is_allow = 3;
    if (has_is_allow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_allow());
    }

    // optional string reason = 4;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupManagerVerifyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupManagerVerifyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupManagerVerifyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupManagerVerifyResponse::MergeFrom(const GroupManagerVerifyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_is_allow()) {
      set_is_allow(from.is_allow());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupManagerVerifyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupManagerVerifyResponse::CopyFrom(const GroupManagerVerifyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupManagerVerifyResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GroupManagerVerifyResponse::Swap(GroupManagerVerifyResponse* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(is_allow_, other->is_allow_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupManagerVerifyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupManagerVerifyResponse_descriptor_;
  metadata.reflection = GroupManagerVerifyResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteGroupRequest::kUserIdFieldNumber;
const int DeleteGroupRequest::kGroupIdFieldNumber;
#endif  // !_MSC_VER

DeleteGroupRequest::DeleteGroupRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.DeleteGroupRequest)
}

void DeleteGroupRequest::InitAsDefaultInstance() {
}

DeleteGroupRequest::DeleteGroupRequest(const DeleteGroupRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.DeleteGroupRequest)
}

void DeleteGroupRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteGroupRequest::~DeleteGroupRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.DeleteGroupRequest)
  SharedDtor();
}

void DeleteGroupRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteGroupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteGroupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteGroupRequest_descriptor_;
}

const DeleteGroupRequest& DeleteGroupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

DeleteGroupRequest* DeleteGroupRequest::default_instance_ = NULL;

DeleteGroupRequest* DeleteGroupRequest::New() const {
  return new DeleteGroupRequest;
}

void DeleteGroupRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DeleteGroupRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, group_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.DeleteGroupRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // optional uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.DeleteGroupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.DeleteGroupRequest)
  return false;
#undef DO_
}

void DeleteGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.DeleteGroupRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.DeleteGroupRequest)
}

::google::protobuf::uint8* DeleteGroupRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.DeleteGroupRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.DeleteGroupRequest)
  return target;
}

int DeleteGroupRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteGroupRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteGroupRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteGroupRequest::MergeFrom(const DeleteGroupRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteGroupRequest::CopyFrom(const DeleteGroupRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteGroupRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DeleteGroupRequest::Swap(DeleteGroupRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteGroupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteGroupRequest_descriptor_;
  metadata.reflection = DeleteGroupRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteGroupResponse::kResultFieldNumber;
#endif  // !_MSC_VER

DeleteGroupResponse::DeleteGroupResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.DeleteGroupResponse)
}

void DeleteGroupResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::TerminalProtocol::Result*>(&::TerminalProtocol::Result::default_instance());
}

DeleteGroupResponse::DeleteGroupResponse(const DeleteGroupResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.DeleteGroupResponse)
}

void DeleteGroupResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteGroupResponse::~DeleteGroupResponse() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.DeleteGroupResponse)
  SharedDtor();
}

void DeleteGroupResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void DeleteGroupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteGroupResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteGroupResponse_descriptor_;
}

const DeleteGroupResponse& DeleteGroupResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

DeleteGroupResponse* DeleteGroupResponse::default_instance_ = NULL;

DeleteGroupResponse* DeleteGroupResponse::New() const {
  return new DeleteGroupResponse;
}

void DeleteGroupResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::TerminalProtocol::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.DeleteGroupResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TerminalProtocol.Result result = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.DeleteGroupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.DeleteGroupResponse)
  return false;
#undef DO_
}

void DeleteGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.DeleteGroupResponse)
  // optional .TerminalProtocol.Result result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.DeleteGroupResponse)
}

::google::protobuf::uint8* DeleteGroupResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.DeleteGroupResponse)
  // optional .TerminalProtocol.Result result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.DeleteGroupResponse)
  return target;
}

int DeleteGroupResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TerminalProtocol.Result result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteGroupResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteGroupResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteGroupResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteGroupResponse::MergeFrom(const DeleteGroupResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::TerminalProtocol::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteGroupResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteGroupResponse::CopyFrom(const DeleteGroupResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteGroupResponse::IsInitialized() const {

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void DeleteGroupResponse::Swap(DeleteGroupResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteGroupResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteGroupResponse_descriptor_;
  metadata.reflection = DeleteGroupResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateGroupRemarkRequest::kUserIdFieldNumber;
const int UpdateGroupRemarkRequest::kGroupIdFieldNumber;
const int UpdateGroupRemarkRequest::kGroupUserIdFieldNumber;
const int UpdateGroupRemarkRequest::kRemarkFieldNumber;
#endif  // !_MSC_VER

UpdateGroupRemarkRequest::UpdateGroupRemarkRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.UpdateGroupRemarkRequest)
}

void UpdateGroupRemarkRequest::InitAsDefaultInstance() {
}

UpdateGroupRemarkRequest::UpdateGroupRemarkRequest(const UpdateGroupRemarkRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.UpdateGroupRemarkRequest)
}

void UpdateGroupRemarkRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  group_user_id_ = GOOGLE_ULONGLONG(0);
  remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateGroupRemarkRequest::~UpdateGroupRemarkRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.UpdateGroupRemarkRequest)
  SharedDtor();
}

void UpdateGroupRemarkRequest::SharedDtor() {
  if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete remark_;
  }
  if (this != default_instance_) {
  }
}

void UpdateGroupRemarkRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateGroupRemarkRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateGroupRemarkRequest_descriptor_;
}

const UpdateGroupRemarkRequest& UpdateGroupRemarkRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

UpdateGroupRemarkRequest* UpdateGroupRemarkRequest::default_instance_ = NULL;

UpdateGroupRemarkRequest* UpdateGroupRemarkRequest::New() const {
  return new UpdateGroupRemarkRequest;
}

void UpdateGroupRemarkRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UpdateGroupRemarkRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(user_id_, group_user_id_);
    if (has_remark()) {
      if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        remark_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateGroupRemarkRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.UpdateGroupRemarkRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_user_id;
        break;
      }

      // required uint64 group_user_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_user_id_)));
          set_has_group_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_remark;
        break;
      }

      // optional string remark = 4;
      case 4: {
        if (tag == 34) {
         parse_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->remark().data(), this->remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "remark");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.UpdateGroupRemarkRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.UpdateGroupRemarkRequest)
  return false;
#undef DO_
}

void UpdateGroupRemarkRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.UpdateGroupRemarkRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  // required uint64 group_user_id = 3;
  if (has_group_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->group_user_id(), output);
  }

  // optional string remark = 4;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->remark(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.UpdateGroupRemarkRequest)
}

::google::protobuf::uint8* UpdateGroupRemarkRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.UpdateGroupRemarkRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  // required uint64 group_user_id = 3;
  if (has_group_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->group_user_id(), target);
  }

  // optional string remark = 4;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->remark(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.UpdateGroupRemarkRequest)
  return target;
}

int UpdateGroupRemarkRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // required uint64 group_user_id = 3;
    if (has_group_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_user_id());
    }

    // optional string remark = 4;
    if (has_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remark());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateGroupRemarkRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateGroupRemarkRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateGroupRemarkRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateGroupRemarkRequest::MergeFrom(const UpdateGroupRemarkRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_user_id()) {
      set_group_user_id(from.group_user_id());
    }
    if (from.has_remark()) {
      set_remark(from.remark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateGroupRemarkRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateGroupRemarkRequest::CopyFrom(const UpdateGroupRemarkRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateGroupRemarkRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UpdateGroupRemarkRequest::Swap(UpdateGroupRemarkRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(group_user_id_, other->group_user_id_);
    std::swap(remark_, other->remark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateGroupRemarkRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateGroupRemarkRequest_descriptor_;
  metadata.reflection = UpdateGroupRemarkRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateGroupInfoRequest::kUserIdFieldNumber;
const int UpdateGroupInfoRequest::kGroupIdFieldNumber;
const int UpdateGroupInfoRequest::kGroupNameFieldNumber;
const int UpdateGroupInfoRequest::kRemarkFieldNumber;
const int UpdateGroupInfoRequest::kTypeFieldNumber;
const int UpdateGroupInfoRequest::kGroupIntroFieldNumber;
const int UpdateGroupInfoRequest::kGroupNoticeFieldNumber;
const int UpdateGroupInfoRequest::kAvatarFieldNumber;
const int UpdateGroupInfoRequest::kAvatarIdFieldNumber;
const int UpdateGroupInfoRequest::kSubTypeFieldNumber;
#endif  // !_MSC_VER

UpdateGroupInfoRequest::UpdateGroupInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.UpdateGroupInfoRequest)
}

void UpdateGroupInfoRequest::InitAsDefaultInstance() {
}

UpdateGroupInfoRequest::UpdateGroupInfoRequest(const UpdateGroupInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.UpdateGroupInfoRequest)
}

void UpdateGroupInfoRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
  group_intro_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_id_ = 0u;
  sub_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateGroupInfoRequest::~UpdateGroupInfoRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.UpdateGroupInfoRequest)
  SharedDtor();
}

void UpdateGroupInfoRequest::SharedDtor() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete remark_;
  }
  if (group_intro_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_intro_;
  }
  if (group_notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_notice_;
  }
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (this != default_instance_) {
  }
}

void UpdateGroupInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateGroupInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateGroupInfoRequest_descriptor_;
}

const UpdateGroupInfoRequest& UpdateGroupInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

UpdateGroupInfoRequest* UpdateGroupInfoRequest::default_instance_ = NULL;

UpdateGroupInfoRequest* UpdateGroupInfoRequest::New() const {
  return new UpdateGroupInfoRequest;
}

void UpdateGroupInfoRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UpdateGroupInfoRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(user_id_, group_id_);
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_name_->clear();
      }
    }
    if (has_remark()) {
      if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        remark_->clear();
      }
    }
    type_ = 0u;
    if (has_group_intro()) {
      if (group_intro_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_intro_->clear();
      }
    }
    if (has_group_notice()) {
      if (group_notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_notice_->clear();
      }
    }
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    avatar_id_ = 0u;
    sub_type_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateGroupInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.UpdateGroupInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_group_name;
        break;
      }

      // optional string group_name = 3;
      case 3: {
        if (tag == 26) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_name().data(), this->group_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_remark;
        break;
      }

      // optional string remark = 4;
      case 4: {
        if (tag == 34) {
         parse_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->remark().data(), this->remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "remark");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional uint32 type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_group_intro;
        break;
      }

      // optional string group_intro = 6;
      case 6: {
        if (tag == 50) {
         parse_group_intro:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_intro()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_intro().data(), this->group_intro().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group_intro");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_group_notice;
        break;
      }

      // optional string group_notice = 7;
      case 7: {
        if (tag == 58) {
         parse_group_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_notice().data(), this->group_notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group_notice");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_avatar;
        break;
      }

      // optional string avatar = 8;
      case 8: {
        if (tag == 66) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->avatar().data(), this->avatar().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "avatar");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_avatar_id;
        break;
      }

      // optional uint32 avatar_id = 9;
      case 9: {
        if (tag == 72) {
         parse_avatar_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_id_)));
          set_has_avatar_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_sub_type;
        break;
      }

      // optional uint32 sub_type = 10;
      case 10: {
        if (tag == 80) {
         parse_sub_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sub_type_)));
          set_has_sub_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.UpdateGroupInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.UpdateGroupInfoRequest)
  return false;
#undef DO_
}

void UpdateGroupInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.UpdateGroupInfoRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  // optional string group_name = 3;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->group_name(), output);
  }

  // optional string remark = 4;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->remark(), output);
  }

  // optional uint32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->type(), output);
  }

  // optional string group_intro = 6;
  if (has_group_intro()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_intro().data(), this->group_intro().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_intro");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->group_intro(), output);
  }

  // optional string group_notice = 7;
  if (has_group_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_notice().data(), this->group_notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_notice");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->group_notice(), output);
  }

  // optional string avatar = 8;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->avatar(), output);
  }

  // optional uint32 avatar_id = 9;
  if (has_avatar_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->avatar_id(), output);
  }

  // optional uint32 sub_type = 10;
  if (has_sub_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->sub_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.UpdateGroupInfoRequest)
}

::google::protobuf::uint8* UpdateGroupInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.UpdateGroupInfoRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  // optional string group_name = 3;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->group_name(), target);
  }

  // optional string remark = 4;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->remark(), target);
  }

  // optional uint32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->type(), target);
  }

  // optional string group_intro = 6;
  if (has_group_intro()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_intro().data(), this->group_intro().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_intro");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->group_intro(), target);
  }

  // optional string group_notice = 7;
  if (has_group_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_notice().data(), this->group_notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_notice");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->group_notice(), target);
  }

  // optional string avatar = 8;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->avatar(), target);
  }

  // optional uint32 avatar_id = 9;
  if (has_avatar_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->avatar_id(), target);
  }

  // optional uint32 sub_type = 10;
  if (has_sub_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->sub_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.UpdateGroupInfoRequest)
  return target;
}

int UpdateGroupInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional string group_name = 3;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // optional string remark = 4;
    if (has_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remark());
    }

    // optional uint32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional string group_intro = 6;
    if (has_group_intro()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_intro());
    }

    // optional string group_notice = 7;
    if (has_group_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_notice());
    }

    // optional string avatar = 8;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 avatar_id = 9;
    if (has_avatar_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatar_id());
    }

    // optional uint32 sub_type = 10;
    if (has_sub_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sub_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateGroupInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateGroupInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateGroupInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateGroupInfoRequest::MergeFrom(const UpdateGroupInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
    if (from.has_remark()) {
      set_remark(from.remark());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_group_intro()) {
      set_group_intro(from.group_intro());
    }
    if (from.has_group_notice()) {
      set_group_notice(from.group_notice());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_avatar_id()) {
      set_avatar_id(from.avatar_id());
    }
    if (from.has_sub_type()) {
      set_sub_type(from.sub_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateGroupInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateGroupInfoRequest::CopyFrom(const UpdateGroupInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateGroupInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UpdateGroupInfoRequest::Swap(UpdateGroupInfoRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(group_name_, other->group_name_);
    std::swap(remark_, other->remark_);
    std::swap(type_, other->type_);
    std::swap(group_intro_, other->group_intro_);
    std::swap(group_notice_, other->group_notice_);
    std::swap(avatar_, other->avatar_);
    std::swap(avatar_id_, other->avatar_id_);
    std::swap(sub_type_, other->sub_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateGroupInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateGroupInfoRequest_descriptor_;
  metadata.reflection = UpdateGroupInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateGroupOptionRequest::kUserIdFieldNumber;
const int UpdateGroupOptionRequest::kGroupIdFieldNumber;
const int UpdateGroupOptionRequest::kVerifyTypeFieldNumber;
const int UpdateGroupOptionRequest::kChannelIdFieldNumber;
#endif  // !_MSC_VER

UpdateGroupOptionRequest::UpdateGroupOptionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.UpdateGroupOptionRequest)
}

void UpdateGroupOptionRequest::InitAsDefaultInstance() {
}

UpdateGroupOptionRequest::UpdateGroupOptionRequest(const UpdateGroupOptionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.UpdateGroupOptionRequest)
}

void UpdateGroupOptionRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  verify_type_ = 0u;
  channel_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateGroupOptionRequest::~UpdateGroupOptionRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.UpdateGroupOptionRequest)
  SharedDtor();
}

void UpdateGroupOptionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateGroupOptionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateGroupOptionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateGroupOptionRequest_descriptor_;
}

const UpdateGroupOptionRequest& UpdateGroupOptionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

UpdateGroupOptionRequest* UpdateGroupOptionRequest::default_instance_ = NULL;

UpdateGroupOptionRequest* UpdateGroupOptionRequest::New() const {
  return new UpdateGroupOptionRequest;
}

void UpdateGroupOptionRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UpdateGroupOptionRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, verify_type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateGroupOptionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.UpdateGroupOptionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_verify_type;
        break;
      }

      // optional uint32 verify_type = 3;
      case 3: {
        if (tag == 24) {
         parse_verify_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &verify_type_)));
          set_has_verify_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_channel_id;
        break;
      }

      // optional uint64 channel_id = 4;
      case 4: {
        if (tag == 32) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.UpdateGroupOptionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.UpdateGroupOptionRequest)
  return false;
#undef DO_
}

void UpdateGroupOptionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.UpdateGroupOptionRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  // optional uint32 verify_type = 3;
  if (has_verify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->verify_type(), output);
  }

  // optional uint64 channel_id = 4;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->channel_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.UpdateGroupOptionRequest)
}

::google::protobuf::uint8* UpdateGroupOptionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.UpdateGroupOptionRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  // optional uint32 verify_type = 3;
  if (has_verify_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->verify_type(), target);
  }

  // optional uint64 channel_id = 4;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->channel_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.UpdateGroupOptionRequest)
  return target;
}

int UpdateGroupOptionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional uint32 verify_type = 3;
    if (has_verify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->verify_type());
    }

    // optional uint64 channel_id = 4;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->channel_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateGroupOptionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateGroupOptionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateGroupOptionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateGroupOptionRequest::MergeFrom(const UpdateGroupOptionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_verify_type()) {
      set_verify_type(from.verify_type());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateGroupOptionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateGroupOptionRequest::CopyFrom(const UpdateGroupOptionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateGroupOptionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UpdateGroupOptionRequest::Swap(UpdateGroupOptionRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(verify_type_, other->verify_type_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateGroupOptionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateGroupOptionRequest_descriptor_;
  metadata.reflection = UpdateGroupOptionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGroupOptionRequest::kUserIdFieldNumber;
const int GetGroupOptionRequest::kGroupIdFieldNumber;
#endif  // !_MSC_VER

GetGroupOptionRequest::GetGroupOptionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.GetGroupOptionRequest)
}

void GetGroupOptionRequest::InitAsDefaultInstance() {
}

GetGroupOptionRequest::GetGroupOptionRequest(const GetGroupOptionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.GetGroupOptionRequest)
}

void GetGroupOptionRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGroupOptionRequest::~GetGroupOptionRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.GetGroupOptionRequest)
  SharedDtor();
}

void GetGroupOptionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGroupOptionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGroupOptionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGroupOptionRequest_descriptor_;
}

const GetGroupOptionRequest& GetGroupOptionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

GetGroupOptionRequest* GetGroupOptionRequest::default_instance_ = NULL;

GetGroupOptionRequest* GetGroupOptionRequest::New() const {
  return new GetGroupOptionRequest;
}

void GetGroupOptionRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetGroupOptionRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, group_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGroupOptionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.GetGroupOptionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.GetGroupOptionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.GetGroupOptionRequest)
  return false;
#undef DO_
}

void GetGroupOptionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.GetGroupOptionRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.GetGroupOptionRequest)
}

::google::protobuf::uint8* GetGroupOptionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.GetGroupOptionRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.GetGroupOptionRequest)
  return target;
}

int GetGroupOptionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroupOptionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGroupOptionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGroupOptionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGroupOptionRequest::MergeFrom(const GetGroupOptionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGroupOptionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGroupOptionRequest::CopyFrom(const GetGroupOptionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupOptionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetGroupOptionRequest::Swap(GetGroupOptionRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGroupOptionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGroupOptionRequest_descriptor_;
  metadata.reflection = GetGroupOptionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGroupOptionResponse::kResultFieldNumber;
const int GetGroupOptionResponse::kUserIdFieldNumber;
const int GetGroupOptionResponse::kGroupIdFieldNumber;
const int GetGroupOptionResponse::kVerifyTypeFieldNumber;
const int GetGroupOptionResponse::kChannelIdFieldNumber;
const int GetGroupOptionResponse::kMsgModeFieldNumber;
const int GetGroupOptionResponse::kTalkModeFieldNumber;
#endif  // !_MSC_VER

GetGroupOptionResponse::GetGroupOptionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.GetGroupOptionResponse)
}

void GetGroupOptionResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::TerminalProtocol::Result*>(&::TerminalProtocol::Result::default_instance());
}

GetGroupOptionResponse::GetGroupOptionResponse(const GetGroupOptionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.GetGroupOptionResponse)
}

void GetGroupOptionResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  verify_type_ = 0u;
  channel_id_ = GOOGLE_ULONGLONG(0);
  msg_mode_ = 0;
  talk_mode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGroupOptionResponse::~GetGroupOptionResponse() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.GetGroupOptionResponse)
  SharedDtor();
}

void GetGroupOptionResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void GetGroupOptionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGroupOptionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGroupOptionResponse_descriptor_;
}

const GetGroupOptionResponse& GetGroupOptionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

GetGroupOptionResponse* GetGroupOptionResponse::default_instance_ = NULL;

GetGroupOptionResponse* GetGroupOptionResponse::New() const {
  return new GetGroupOptionResponse;
}

void GetGroupOptionResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetGroupOptionResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(user_id_, talk_mode_);
    if (has_result()) {
      if (result_ != NULL) result_->::TerminalProtocol::Result::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGroupOptionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.GetGroupOptionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TerminalProtocol.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_id;
        break;
      }

      // optional uint64 group_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_verify_type;
        break;
      }

      // optional uint32 verify_type = 4;
      case 4: {
        if (tag == 32) {
         parse_verify_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &verify_type_)));
          set_has_verify_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channel_id;
        break;
      }

      // optional uint64 channel_id = 5;
      case 5: {
        if (tag == 40) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_msg_mode;
        break;
      }

      // optional int32 msg_mode = 6;
      case 6: {
        if (tag == 48) {
         parse_msg_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_mode_)));
          set_has_msg_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_talk_mode;
        break;
      }

      // optional int32 talk_mode = 7;
      case 7: {
        if (tag == 56) {
         parse_talk_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &talk_mode_)));
          set_has_talk_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.GetGroupOptionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.GetGroupOptionResponse)
  return false;
#undef DO_
}

void GetGroupOptionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.GetGroupOptionResponse)
  // required .TerminalProtocol.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional uint64 group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->group_id(), output);
  }

  // optional uint32 verify_type = 4;
  if (has_verify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->verify_type(), output);
  }

  // optional uint64 channel_id = 5;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->channel_id(), output);
  }

  // optional int32 msg_mode = 6;
  if (has_msg_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->msg_mode(), output);
  }

  // optional int32 talk_mode = 7;
  if (has_talk_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->talk_mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.GetGroupOptionResponse)
}

::google::protobuf::uint8* GetGroupOptionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.GetGroupOptionResponse)
  // required .TerminalProtocol.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional uint64 group_id = 3;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->group_id(), target);
  }

  // optional uint32 verify_type = 4;
  if (has_verify_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->verify_type(), target);
  }

  // optional uint64 channel_id = 5;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->channel_id(), target);
  }

  // optional int32 msg_mode = 6;
  if (has_msg_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->msg_mode(), target);
  }

  // optional int32 talk_mode = 7;
  if (has_talk_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->talk_mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.GetGroupOptionResponse)
  return target;
}

int GetGroupOptionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TerminalProtocol.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 group_id = 3;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional uint32 verify_type = 4;
    if (has_verify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->verify_type());
    }

    // optional uint64 channel_id = 5;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->channel_id());
    }

    // optional int32 msg_mode = 6;
    if (has_msg_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_mode());
    }

    // optional int32 talk_mode = 7;
    if (has_talk_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->talk_mode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroupOptionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGroupOptionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGroupOptionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGroupOptionResponse::MergeFrom(const GetGroupOptionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::TerminalProtocol::Result::MergeFrom(from.result());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_verify_type()) {
      set_verify_type(from.verify_type());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_msg_mode()) {
      set_msg_mode(from.msg_mode());
    }
    if (from.has_talk_mode()) {
      set_talk_mode(from.talk_mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGroupOptionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGroupOptionResponse::CopyFrom(const GetGroupOptionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupOptionResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void GetGroupOptionResponse::Swap(GetGroupOptionResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(verify_type_, other->verify_type_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(msg_mode_, other->msg_mode_);
    std::swap(talk_mode_, other->talk_mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGroupOptionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGroupOptionResponse_descriptor_;
  metadata.reflection = GetGroupOptionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateGroupNotice::kUserIdFieldNumber;
const int UpdateGroupNotice::kGroupIdFieldNumber;
const int UpdateGroupNotice::kNoticeFieldNumber;
#endif  // !_MSC_VER

UpdateGroupNotice::UpdateGroupNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.UpdateGroupNotice)
}

void UpdateGroupNotice::InitAsDefaultInstance() {
}

UpdateGroupNotice::UpdateGroupNotice(const UpdateGroupNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.UpdateGroupNotice)
}

void UpdateGroupNotice::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateGroupNotice::~UpdateGroupNotice() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.UpdateGroupNotice)
  SharedDtor();
}

void UpdateGroupNotice::SharedDtor() {
  if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

void UpdateGroupNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateGroupNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateGroupNotice_descriptor_;
}

const UpdateGroupNotice& UpdateGroupNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

UpdateGroupNotice* UpdateGroupNotice::default_instance_ = NULL;

UpdateGroupNotice* UpdateGroupNotice::New() const {
  return new UpdateGroupNotice;
}

void UpdateGroupNotice::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UpdateGroupNotice*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(user_id_, group_id_);
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        notice_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateGroupNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.UpdateGroupNotice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_notice;
        break;
      }

      // optional string notice = 3;
      case 3: {
        if (tag == 26) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "notice");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.UpdateGroupNotice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.UpdateGroupNotice)
  return false;
#undef DO_
}

void UpdateGroupNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.UpdateGroupNotice)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  // optional string notice = 3;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "notice");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->notice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.UpdateGroupNotice)
}

::google::protobuf::uint8* UpdateGroupNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.UpdateGroupNotice)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  // optional string notice = 3;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "notice");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->notice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.UpdateGroupNotice)
  return target;
}

int UpdateGroupNotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional string notice = 3;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateGroupNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateGroupNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateGroupNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateGroupNotice::MergeFrom(const UpdateGroupNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateGroupNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateGroupNotice::CopyFrom(const UpdateGroupNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateGroupNotice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UpdateGroupNotice::Swap(UpdateGroupNotice* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(notice_, other->notice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateGroupNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateGroupNotice_descriptor_;
  metadata.reflection = UpdateGroupNotice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGroupInfoRequest::kUserIdFieldNumber;
const int GetGroupInfoRequest::kGroupIdFieldNumber;
#endif  // !_MSC_VER

GetGroupInfoRequest::GetGroupInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.GetGroupInfoRequest)
}

void GetGroupInfoRequest::InitAsDefaultInstance() {
}

GetGroupInfoRequest::GetGroupInfoRequest(const GetGroupInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.GetGroupInfoRequest)
}

void GetGroupInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGroupInfoRequest::~GetGroupInfoRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.GetGroupInfoRequest)
  SharedDtor();
}

void GetGroupInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGroupInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGroupInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGroupInfoRequest_descriptor_;
}

const GetGroupInfoRequest& GetGroupInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

GetGroupInfoRequest* GetGroupInfoRequest::default_instance_ = NULL;

GetGroupInfoRequest* GetGroupInfoRequest::New() const {
  return new GetGroupInfoRequest;
}

void GetGroupInfoRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetGroupInfoRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, group_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGroupInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.GetGroupInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.GetGroupInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.GetGroupInfoRequest)
  return false;
#undef DO_
}

void GetGroupInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.GetGroupInfoRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.GetGroupInfoRequest)
}

::google::protobuf::uint8* GetGroupInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.GetGroupInfoRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.GetGroupInfoRequest)
  return target;
}

int GetGroupInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroupInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGroupInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGroupInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGroupInfoRequest::MergeFrom(const GetGroupInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGroupInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGroupInfoRequest::CopyFrom(const GetGroupInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetGroupInfoRequest::Swap(GetGroupInfoRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGroupInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGroupInfoRequest_descriptor_;
  metadata.reflection = GetGroupInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGroupInfoResponse::kUserIdFieldNumber;
const int GetGroupInfoResponse::kGroupIdFieldNumber;
const int GetGroupInfoResponse::kGroupNameFieldNumber;
const int GetGroupInfoResponse::kRemarkFieldNumber;
const int GetGroupInfoResponse::kTypeFieldNumber;
const int GetGroupInfoResponse::kGroupIntroFieldNumber;
const int GetGroupInfoResponse::kGroupNoticeFieldNumber;
const int GetGroupInfoResponse::kAvatarFieldNumber;
const int GetGroupInfoResponse::kSubTypeFieldNumber;
const int GetGroupInfoResponse::kGroupNumberFieldNumber;
const int GetGroupInfoResponse::kAvatarIdFieldNumber;
const int GetGroupInfoResponse::kOwnerIdFieldNumber;
#endif  // !_MSC_VER

GetGroupInfoResponse::GetGroupInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.GetGroupInfoResponse)
}

void GetGroupInfoResponse::InitAsDefaultInstance() {
}

GetGroupInfoResponse::GetGroupInfoResponse(const GetGroupInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.GetGroupInfoResponse)
}

void GetGroupInfoResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
  group_intro_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sub_type_ = 0u;
  group_number_ = GOOGLE_ULONGLONG(0);
  avatar_id_ = 0u;
  owner_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGroupInfoResponse::~GetGroupInfoResponse() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.GetGroupInfoResponse)
  SharedDtor();
}

void GetGroupInfoResponse::SharedDtor() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete remark_;
  }
  if (group_intro_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_intro_;
  }
  if (group_notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_notice_;
  }
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (this != default_instance_) {
  }
}

void GetGroupInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGroupInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGroupInfoResponse_descriptor_;
}

const GetGroupInfoResponse& GetGroupInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

GetGroupInfoResponse* GetGroupInfoResponse::default_instance_ = NULL;

GetGroupInfoResponse* GetGroupInfoResponse::New() const {
  return new GetGroupInfoResponse;
}

void GetGroupInfoResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetGroupInfoResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(user_id_, group_id_);
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_name_->clear();
      }
    }
    if (has_remark()) {
      if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        remark_->clear();
      }
    }
    type_ = 0u;
    if (has_group_intro()) {
      if (group_intro_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_intro_->clear();
      }
    }
    if (has_group_notice()) {
      if (group_notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_notice_->clear();
      }
    }
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(group_number_, avatar_id_);
    sub_type_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGroupInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.GetGroupInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_group_name;
        break;
      }

      // optional string group_name = 3;
      case 3: {
        if (tag == 26) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_name().data(), this->group_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_remark;
        break;
      }

      // optional string remark = 4;
      case 4: {
        if (tag == 34) {
         parse_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->remark().data(), this->remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "remark");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional uint32 type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_group_intro;
        break;
      }

      // optional string group_intro = 6;
      case 6: {
        if (tag == 50) {
         parse_group_intro:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_intro()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_intro().data(), this->group_intro().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group_intro");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_group_notice;
        break;
      }

      // optional string group_notice = 7;
      case 7: {
        if (tag == 58) {
         parse_group_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_notice().data(), this->group_notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group_notice");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_avatar;
        break;
      }

      // optional string avatar = 8;
      case 8: {
        if (tag == 66) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->avatar().data(), this->avatar().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "avatar");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_sub_type;
        break;
      }

      // optional uint32 sub_type = 9;
      case 9: {
        if (tag == 72) {
         parse_sub_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sub_type_)));
          set_has_sub_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_group_number;
        break;
      }

      // optional uint64 group_number = 10;
      case 10: {
        if (tag == 80) {
         parse_group_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_number_)));
          set_has_group_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_avatar_id;
        break;
      }

      // optional uint32 avatar_id = 11;
      case 11: {
        if (tag == 88) {
         parse_avatar_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_id_)));
          set_has_avatar_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_owner_id;
        break;
      }

      // optional uint64 owner_id = 12;
      case 12: {
        if (tag == 96) {
         parse_owner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &owner_id_)));
          set_has_owner_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.GetGroupInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.GetGroupInfoResponse)
  return false;
#undef DO_
}

void GetGroupInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.GetGroupInfoResponse)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  // optional string group_name = 3;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->group_name(), output);
  }

  // optional string remark = 4;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->remark(), output);
  }

  // optional uint32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->type(), output);
  }

  // optional string group_intro = 6;
  if (has_group_intro()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_intro().data(), this->group_intro().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_intro");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->group_intro(), output);
  }

  // optional string group_notice = 7;
  if (has_group_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_notice().data(), this->group_notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_notice");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->group_notice(), output);
  }

  // optional string avatar = 8;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->avatar(), output);
  }

  // optional uint32 sub_type = 9;
  if (has_sub_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->sub_type(), output);
  }

  // optional uint64 group_number = 10;
  if (has_group_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->group_number(), output);
  }

  // optional uint32 avatar_id = 11;
  if (has_avatar_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->avatar_id(), output);
  }

  // optional uint64 owner_id = 12;
  if (has_owner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->owner_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.GetGroupInfoResponse)
}

::google::protobuf::uint8* GetGroupInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.GetGroupInfoResponse)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  // optional string group_name = 3;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->group_name(), target);
  }

  // optional string remark = 4;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->remark(), target);
  }

  // optional uint32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->type(), target);
  }

  // optional string group_intro = 6;
  if (has_group_intro()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_intro().data(), this->group_intro().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_intro");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->group_intro(), target);
  }

  // optional string group_notice = 7;
  if (has_group_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_notice().data(), this->group_notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_notice");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->group_notice(), target);
  }

  // optional string avatar = 8;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->avatar(), target);
  }

  // optional uint32 sub_type = 9;
  if (has_sub_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->sub_type(), target);
  }

  // optional uint64 group_number = 10;
  if (has_group_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->group_number(), target);
  }

  // optional uint32 avatar_id = 11;
  if (has_avatar_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->avatar_id(), target);
  }

  // optional uint64 owner_id = 12;
  if (has_owner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->owner_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.GetGroupInfoResponse)
  return target;
}

int GetGroupInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional string group_name = 3;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // optional string remark = 4;
    if (has_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remark());
    }

    // optional uint32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional string group_intro = 6;
    if (has_group_intro()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_intro());
    }

    // optional string group_notice = 7;
    if (has_group_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_notice());
    }

    // optional string avatar = 8;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 sub_type = 9;
    if (has_sub_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sub_type());
    }

    // optional uint64 group_number = 10;
    if (has_group_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_number());
    }

    // optional uint32 avatar_id = 11;
    if (has_avatar_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatar_id());
    }

    // optional uint64 owner_id = 12;
    if (has_owner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->owner_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroupInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGroupInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGroupInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGroupInfoResponse::MergeFrom(const GetGroupInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
    if (from.has_remark()) {
      set_remark(from.remark());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_group_intro()) {
      set_group_intro(from.group_intro());
    }
    if (from.has_group_notice()) {
      set_group_notice(from.group_notice());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sub_type()) {
      set_sub_type(from.sub_type());
    }
    if (from.has_group_number()) {
      set_group_number(from.group_number());
    }
    if (from.has_avatar_id()) {
      set_avatar_id(from.avatar_id());
    }
    if (from.has_owner_id()) {
      set_owner_id(from.owner_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGroupInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGroupInfoResponse::CopyFrom(const GetGroupInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetGroupInfoResponse::Swap(GetGroupInfoResponse* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(group_name_, other->group_name_);
    std::swap(remark_, other->remark_);
    std::swap(type_, other->type_);
    std::swap(group_intro_, other->group_intro_);
    std::swap(group_notice_, other->group_notice_);
    std::swap(avatar_, other->avatar_);
    std::swap(sub_type_, other->sub_type_);
    std::swap(group_number_, other->group_number_);
    std::swap(avatar_id_, other->avatar_id_);
    std::swap(owner_id_, other->owner_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGroupInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGroupInfoResponse_descriptor_;
  metadata.reflection = GetGroupInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateGroupNoticeNotify::kUserIdFieldNumber;
const int UpdateGroupNoticeNotify::kGroupIdFieldNumber;
const int UpdateGroupNoticeNotify::kNoticeFieldNumber;
#endif  // !_MSC_VER

UpdateGroupNoticeNotify::UpdateGroupNoticeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.UpdateGroupNoticeNotify)
}

void UpdateGroupNoticeNotify::InitAsDefaultInstance() {
}

UpdateGroupNoticeNotify::UpdateGroupNoticeNotify(const UpdateGroupNoticeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.UpdateGroupNoticeNotify)
}

void UpdateGroupNoticeNotify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateGroupNoticeNotify::~UpdateGroupNoticeNotify() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.UpdateGroupNoticeNotify)
  SharedDtor();
}

void UpdateGroupNoticeNotify::SharedDtor() {
  if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

void UpdateGroupNoticeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateGroupNoticeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateGroupNoticeNotify_descriptor_;
}

const UpdateGroupNoticeNotify& UpdateGroupNoticeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

UpdateGroupNoticeNotify* UpdateGroupNoticeNotify::default_instance_ = NULL;

UpdateGroupNoticeNotify* UpdateGroupNoticeNotify::New() const {
  return new UpdateGroupNoticeNotify;
}

void UpdateGroupNoticeNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UpdateGroupNoticeNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(user_id_, group_id_);
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        notice_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateGroupNoticeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.UpdateGroupNoticeNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_notice;
        break;
      }

      // optional string notice = 3;
      case 3: {
        if (tag == 26) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "notice");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.UpdateGroupNoticeNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.UpdateGroupNoticeNotify)
  return false;
#undef DO_
}

void UpdateGroupNoticeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.UpdateGroupNoticeNotify)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  // optional string notice = 3;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "notice");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->notice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.UpdateGroupNoticeNotify)
}

::google::protobuf::uint8* UpdateGroupNoticeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.UpdateGroupNoticeNotify)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  // optional string notice = 3;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "notice");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->notice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.UpdateGroupNoticeNotify)
  return target;
}

int UpdateGroupNoticeNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional string notice = 3;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateGroupNoticeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateGroupNoticeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateGroupNoticeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateGroupNoticeNotify::MergeFrom(const UpdateGroupNoticeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateGroupNoticeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateGroupNoticeNotify::CopyFrom(const UpdateGroupNoticeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateGroupNoticeNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UpdateGroupNoticeNotify::Swap(UpdateGroupNoticeNotify* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(notice_, other->notice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateGroupNoticeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateGroupNoticeNotify_descriptor_;
  metadata.reflection = UpdateGroupNoticeNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateUserInfoRequest::kUserIdFieldNumber;
const int UpdateUserInfoRequest::kNickNameFieldNumber;
const int UpdateUserInfoRequest::kSexFieldNumber;
const int UpdateUserInfoRequest::kMobileFieldNumber;
const int UpdateUserInfoRequest::kBirthdayFieldNumber;
const int UpdateUserInfoRequest::kEmailFieldNumber;
const int UpdateUserInfoRequest::kAgeFieldNumber;
const int UpdateUserInfoRequest::kConstellationFieldNumber;
const int UpdateUserInfoRequest::kSignFieldNumber;
const int UpdateUserInfoRequest::kLikeFieldNumber;
const int UpdateUserInfoRequest::kCityFieldNumber;
const int UpdateUserInfoRequest::kPersonalDescFieldNumber;
const int UpdateUserInfoRequest::kRealNameFieldNumber;
#endif  // !_MSC_VER

UpdateUserInfoRequest::UpdateUserInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.UpdateUserInfoRequest)
}

void UpdateUserInfoRequest::InitAsDefaultInstance() {
}

UpdateUserInfoRequest::UpdateUserInfoRequest(const UpdateUserInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.UpdateUserInfoRequest)
}

void UpdateUserInfoRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 0u;
  mobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  birthday_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  age_ = 0u;
  constellation_ = 0u;
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  like_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  personal_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateUserInfoRequest::~UpdateUserInfoRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.UpdateUserInfoRequest)
  SharedDtor();
}

void UpdateUserInfoRequest::SharedDtor() {
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_name_;
  }
  if (mobile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_;
  }
  if (birthday_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete birthday_;
  }
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (like_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete like_;
  }
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_;
  }
  if (personal_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete personal_desc_;
  }
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (this != default_instance_) {
  }
}

void UpdateUserInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateUserInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateUserInfoRequest_descriptor_;
}

const UpdateUserInfoRequest& UpdateUserInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

UpdateUserInfoRequest* UpdateUserInfoRequest::default_instance_ = NULL;

UpdateUserInfoRequest* UpdateUserInfoRequest::New() const {
  return new UpdateUserInfoRequest;
}

void UpdateUserInfoRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UpdateUserInfoRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(sex_, age_);
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nick_name_->clear();
      }
    }
    if (has_mobile()) {
      if (mobile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_->clear();
      }
    }
    if (has_birthday()) {
      if (birthday_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        birthday_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        email_->clear();
      }
    }
    constellation_ = 0u;
  }
  if (_has_bits_[8 / 32] & 7936) {
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_->clear();
      }
    }
    if (has_like()) {
      if (like_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        like_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        city_->clear();
      }
    }
    if (has_personal_desc()) {
      if (personal_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        personal_desc_->clear();
      }
    }
    if (has_real_name()) {
      if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        real_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateUserInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.UpdateUserInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 2;
      case 2: {
        if (tag == 18) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nick_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 3;
      case 3: {
        if (tag == 24) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mobile;
        break;
      }

      // optional string mobile = 4;
      case 4: {
        if (tag == 34) {
         parse_mobile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mobile().data(), this->mobile().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mobile");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_birthday;
        break;
      }

      // optional string birthday = 5;
      case 5: {
        if (tag == 42) {
         parse_birthday:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_birthday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->birthday().data(), this->birthday().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "birthday");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_email;
        break;
      }

      // optional string email = 6;
      case 6: {
        if (tag == 50) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "email");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_age;
        break;
      }

      // optional uint32 age = 7;
      case 7: {
        if (tag == 56) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &age_)));
          set_has_age();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_constellation;
        break;
      }

      // optional uint32 constellation = 8;
      case 8: {
        if (tag == 64) {
         parse_constellation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &constellation_)));
          set_has_constellation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_sign;
        break;
      }

      // optional string sign = 9;
      case 9: {
        if (tag == 74) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sign");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_like;
        break;
      }

      // optional string like = 10;
      case 10: {
        if (tag == 82) {
         parse_like:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_like()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->like().data(), this->like().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "like");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_city;
        break;
      }

      // optional string city = 11;
      case 11: {
        if (tag == 90) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "city");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_personal_desc;
        break;
      }

      // optional string personal_desc = 12;
      case 12: {
        if (tag == 98) {
         parse_personal_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_personal_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->personal_desc().data(), this->personal_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "personal_desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_real_name;
        break;
      }

      // optional string real_name = 13;
      case 13: {
        if (tag == 106) {
         parse_real_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_real_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->real_name().data(), this->real_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "real_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.UpdateUserInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.UpdateUserInfoRequest)
  return false;
#undef DO_
}

void UpdateUserInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.UpdateUserInfoRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nick_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nick_name(), output);
  }

  // optional uint32 sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sex(), output);
  }

  // optional string mobile = 4;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mobile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->mobile(), output);
  }

  // optional string birthday = 5;
  if (has_birthday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->birthday().data(), this->birthday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "birthday");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->birthday(), output);
  }

  // optional string email = 6;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->email(), output);
  }

  // optional uint32 age = 7;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->age(), output);
  }

  // optional uint32 constellation = 8;
  if (has_constellation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->constellation(), output);
  }

  // optional string sign = 9;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->sign(), output);
  }

  // optional string like = 10;
  if (has_like()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->like().data(), this->like().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "like");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->like(), output);
  }

  // optional string city = 11;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->city(), output);
  }

  // optional string personal_desc = 12;
  if (has_personal_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->personal_desc().data(), this->personal_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "personal_desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->personal_desc(), output);
  }

  // optional string real_name = 13;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->real_name().data(), this->real_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "real_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->real_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.UpdateUserInfoRequest)
}

::google::protobuf::uint8* UpdateUserInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.UpdateUserInfoRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nick_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nick_name(), target);
  }

  // optional uint32 sex = 3;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sex(), target);
  }

  // optional string mobile = 4;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mobile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mobile(), target);
  }

  // optional string birthday = 5;
  if (has_birthday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->birthday().data(), this->birthday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "birthday");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->birthday(), target);
  }

  // optional string email = 6;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->email(), target);
  }

  // optional uint32 age = 7;
  if (has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->age(), target);
  }

  // optional uint32 constellation = 8;
  if (has_constellation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->constellation(), target);
  }

  // optional string sign = 9;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->sign(), target);
  }

  // optional string like = 10;
  if (has_like()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->like().data(), this->like().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "like");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->like(), target);
  }

  // optional string city = 11;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->city(), target);
  }

  // optional string personal_desc = 12;
  if (has_personal_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->personal_desc().data(), this->personal_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "personal_desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->personal_desc(), target);
  }

  // optional string real_name = 13;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->real_name().data(), this->real_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "real_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->real_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.UpdateUserInfoRequest)
  return target;
}

int UpdateUserInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string nick_name = 2;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

    // optional uint32 sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional string mobile = 4;
    if (has_mobile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobile());
    }

    // optional string birthday = 5;
    if (has_birthday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->birthday());
    }

    // optional string email = 6;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional uint32 age = 7;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->age());
    }

    // optional uint32 constellation = 8;
    if (has_constellation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->constellation());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string sign = 9;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

    // optional string like = 10;
    if (has_like()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->like());
    }

    // optional string city = 11;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // optional string personal_desc = 12;
    if (has_personal_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->personal_desc());
    }

    // optional string real_name = 13;
    if (has_real_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->real_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateUserInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateUserInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateUserInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateUserInfoRequest::MergeFrom(const UpdateUserInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_mobile()) {
      set_mobile(from.mobile());
    }
    if (from.has_birthday()) {
      set_birthday(from.birthday());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
    if (from.has_constellation()) {
      set_constellation(from.constellation());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_like()) {
      set_like(from.like());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_personal_desc()) {
      set_personal_desc(from.personal_desc());
    }
    if (from.has_real_name()) {
      set_real_name(from.real_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateUserInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateUserInfoRequest::CopyFrom(const UpdateUserInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UpdateUserInfoRequest::Swap(UpdateUserInfoRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(sex_, other->sex_);
    std::swap(mobile_, other->mobile_);
    std::swap(birthday_, other->birthday_);
    std::swap(email_, other->email_);
    std::swap(age_, other->age_);
    std::swap(constellation_, other->constellation_);
    std::swap(sign_, other->sign_);
    std::swap(like_, other->like_);
    std::swap(city_, other->city_);
    std::swap(personal_desc_, other->personal_desc_);
    std::swap(real_name_, other->real_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateUserInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateUserInfoRequest_descriptor_;
  metadata.reflection = UpdateUserInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateUserMoodRequest::kUserIdFieldNumber;
const int UpdateUserMoodRequest::kMoodFieldNumber;
#endif  // !_MSC_VER

UpdateUserMoodRequest::UpdateUserMoodRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.UpdateUserMoodRequest)
}

void UpdateUserMoodRequest::InitAsDefaultInstance() {
}

UpdateUserMoodRequest::UpdateUserMoodRequest(const UpdateUserMoodRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.UpdateUserMoodRequest)
}

void UpdateUserMoodRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  mood_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateUserMoodRequest::~UpdateUserMoodRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.UpdateUserMoodRequest)
  SharedDtor();
}

void UpdateUserMoodRequest::SharedDtor() {
  if (mood_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mood_;
  }
  if (this != default_instance_) {
  }
}

void UpdateUserMoodRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateUserMoodRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateUserMoodRequest_descriptor_;
}

const UpdateUserMoodRequest& UpdateUserMoodRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

UpdateUserMoodRequest* UpdateUserMoodRequest::default_instance_ = NULL;

UpdateUserMoodRequest* UpdateUserMoodRequest::New() const {
  return new UpdateUserMoodRequest;
}

void UpdateUserMoodRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_mood()) {
      if (mood_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mood_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateUserMoodRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.UpdateUserMoodRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mood;
        break;
      }

      // optional string mood = 2;
      case 2: {
        if (tag == 18) {
         parse_mood:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mood()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mood().data(), this->mood().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mood");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.UpdateUserMoodRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.UpdateUserMoodRequest)
  return false;
#undef DO_
}

void UpdateUserMoodRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.UpdateUserMoodRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional string mood = 2;
  if (has_mood()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mood().data(), this->mood().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mood");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mood(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.UpdateUserMoodRequest)
}

::google::protobuf::uint8* UpdateUserMoodRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.UpdateUserMoodRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional string mood = 2;
  if (has_mood()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mood().data(), this->mood().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mood");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mood(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.UpdateUserMoodRequest)
  return target;
}

int UpdateUserMoodRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string mood = 2;
    if (has_mood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mood());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateUserMoodRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateUserMoodRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateUserMoodRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateUserMoodRequest::MergeFrom(const UpdateUserMoodRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_mood()) {
      set_mood(from.mood());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateUserMoodRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateUserMoodRequest::CopyFrom(const UpdateUserMoodRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserMoodRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UpdateUserMoodRequest::Swap(UpdateUserMoodRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(mood_, other->mood_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateUserMoodRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateUserMoodRequest_descriptor_;
  metadata.reflection = UpdateUserMoodRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateUserNickNameRequest::kUserIdFieldNumber;
const int UpdateUserNickNameRequest::kNickNameFieldNumber;
#endif  // !_MSC_VER

UpdateUserNickNameRequest::UpdateUserNickNameRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.UpdateUserNickNameRequest)
}

void UpdateUserNickNameRequest::InitAsDefaultInstance() {
}

UpdateUserNickNameRequest::UpdateUserNickNameRequest(const UpdateUserNickNameRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.UpdateUserNickNameRequest)
}

void UpdateUserNickNameRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateUserNickNameRequest::~UpdateUserNickNameRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.UpdateUserNickNameRequest)
  SharedDtor();
}

void UpdateUserNickNameRequest::SharedDtor() {
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_name_;
  }
  if (this != default_instance_) {
  }
}

void UpdateUserNickNameRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateUserNickNameRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateUserNickNameRequest_descriptor_;
}

const UpdateUserNickNameRequest& UpdateUserNickNameRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

UpdateUserNickNameRequest* UpdateUserNickNameRequest::default_instance_ = NULL;

UpdateUserNickNameRequest* UpdateUserNickNameRequest::New() const {
  return new UpdateUserNickNameRequest;
}

void UpdateUserNickNameRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nick_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateUserNickNameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.UpdateUserNickNameRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 2;
      case 2: {
        if (tag == 18) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nick_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.UpdateUserNickNameRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.UpdateUserNickNameRequest)
  return false;
#undef DO_
}

void UpdateUserNickNameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.UpdateUserNickNameRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nick_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nick_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.UpdateUserNickNameRequest)
}

::google::protobuf::uint8* UpdateUserNickNameRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.UpdateUserNickNameRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nick_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nick_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.UpdateUserNickNameRequest)
  return target;
}

int UpdateUserNickNameRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string nick_name = 2;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateUserNickNameRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateUserNickNameRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateUserNickNameRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateUserNickNameRequest::MergeFrom(const UpdateUserNickNameRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateUserNickNameRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateUserNickNameRequest::CopyFrom(const UpdateUserNickNameRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserNickNameRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UpdateUserNickNameRequest::Swap(UpdateUserNickNameRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateUserNickNameRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateUserNickNameRequest_descriptor_;
  metadata.reflection = UpdateUserNickNameRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateAvatarRequest::kUserIdFieldNumber;
const int UpdateAvatarRequest::kAvatarIdFieldNumber;
const int UpdateAvatarRequest::kAvatarFieldNumber;
#endif  // !_MSC_VER

UpdateAvatarRequest::UpdateAvatarRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.UpdateAvatarRequest)
}

void UpdateAvatarRequest::InitAsDefaultInstance() {
}

UpdateAvatarRequest::UpdateAvatarRequest(const UpdateAvatarRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.UpdateAvatarRequest)
}

void UpdateAvatarRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  avatar_id_ = 0u;
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateAvatarRequest::~UpdateAvatarRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.UpdateAvatarRequest)
  SharedDtor();
}

void UpdateAvatarRequest::SharedDtor() {
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (this != default_instance_) {
  }
}

void UpdateAvatarRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateAvatarRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateAvatarRequest_descriptor_;
}

const UpdateAvatarRequest& UpdateAvatarRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

UpdateAvatarRequest* UpdateAvatarRequest::default_instance_ = NULL;

UpdateAvatarRequest* UpdateAvatarRequest::New() const {
  return new UpdateAvatarRequest;
}

void UpdateAvatarRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    user_id_ = GOOGLE_ULONGLONG(0);
    avatar_id_ = 0u;
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateAvatarRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.UpdateAvatarRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_avatar_id;
        break;
      }

      // optional uint32 avatar_id = 2;
      case 2: {
        if (tag == 16) {
         parse_avatar_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_id_)));
          set_has_avatar_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_avatar;
        break;
      }

      // optional string avatar = 3;
      case 3: {
        if (tag == 26) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->avatar().data(), this->avatar().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "avatar");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.UpdateAvatarRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.UpdateAvatarRequest)
  return false;
#undef DO_
}

void UpdateAvatarRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.UpdateAvatarRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint32 avatar_id = 2;
  if (has_avatar_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->avatar_id(), output);
  }

  // optional string avatar = 3;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->avatar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.UpdateAvatarRequest)
}

::google::protobuf::uint8* UpdateAvatarRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.UpdateAvatarRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint32 avatar_id = 2;
  if (has_avatar_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->avatar_id(), target);
  }

  // optional string avatar = 3;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->avatar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.UpdateAvatarRequest)
  return target;
}

int UpdateAvatarRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint32 avatar_id = 2;
    if (has_avatar_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatar_id());
    }

    // optional string avatar = 3;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateAvatarRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateAvatarRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateAvatarRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateAvatarRequest::MergeFrom(const UpdateAvatarRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_avatar_id()) {
      set_avatar_id(from.avatar_id());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateAvatarRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateAvatarRequest::CopyFrom(const UpdateAvatarRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateAvatarRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UpdateAvatarRequest::Swap(UpdateAvatarRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(avatar_id_, other->avatar_id_);
    std::swap(avatar_, other->avatar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateAvatarRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateAvatarRequest_descriptor_;
  metadata.reflection = UpdateAvatarRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KickUserOffline::kResultFieldNumber;
const int KickUserOffline::kIpFieldNumber;
const int KickUserOffline::kPortFieldNumber;
#endif  // !_MSC_VER

KickUserOffline::KickUserOffline()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.KickUserOffline)
}

void KickUserOffline::InitAsDefaultInstance() {
  result_ = const_cast< ::TerminalProtocol::Result*>(&::TerminalProtocol::Result::default_instance());
}

KickUserOffline::KickUserOffline(const KickUserOffline& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.KickUserOffline)
}

void KickUserOffline::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = NULL;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickUserOffline::~KickUserOffline() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.KickUserOffline)
  SharedDtor();
}

void KickUserOffline::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (this != default_instance_) {
    delete result_;
  }
}

void KickUserOffline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickUserOffline::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickUserOffline_descriptor_;
}

const KickUserOffline& KickUserOffline::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

KickUserOffline* KickUserOffline::default_instance_ = NULL;

KickUserOffline* KickUserOffline::New() const {
  return new KickUserOffline;
}

void KickUserOffline::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_result()) {
      if (result_ != NULL) result_->::TerminalProtocol::Result::Clear();
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KickUserOffline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.KickUserOffline)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TerminalProtocol.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (tag == 18) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional uint32 port = 3;
      case 3: {
        if (tag == 24) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.KickUserOffline)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.KickUserOffline)
  return false;
#undef DO_
}

void KickUserOffline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.KickUserOffline)
  // required .TerminalProtocol.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // optional uint32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.KickUserOffline)
}

::google::protobuf::uint8* KickUserOffline::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.KickUserOffline)
  // required .TerminalProtocol.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional uint32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.KickUserOffline)
  return target;
}

int KickUserOffline::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TerminalProtocol.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickUserOffline::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KickUserOffline* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KickUserOffline*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KickUserOffline::MergeFrom(const KickUserOffline& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::TerminalProtocol::Result::MergeFrom(from.result());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KickUserOffline::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickUserOffline::CopyFrom(const KickUserOffline& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickUserOffline::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void KickUserOffline::Swap(KickUserOffline* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KickUserOffline::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KickUserOffline_descriptor_;
  metadata.reflection = KickUserOffline_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserOnlineStateRequest::kUserIdFieldNumber;
#endif  // !_MSC_VER

GetUserOnlineStateRequest::GetUserOnlineStateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.GetUserOnlineStateRequest)
}

void GetUserOnlineStateRequest::InitAsDefaultInstance() {
}

GetUserOnlineStateRequest::GetUserOnlineStateRequest(const GetUserOnlineStateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.GetUserOnlineStateRequest)
}

void GetUserOnlineStateRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserOnlineStateRequest::~GetUserOnlineStateRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.GetUserOnlineStateRequest)
  SharedDtor();
}

void GetUserOnlineStateRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetUserOnlineStateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUserOnlineStateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUserOnlineStateRequest_descriptor_;
}

const GetUserOnlineStateRequest& GetUserOnlineStateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

GetUserOnlineStateRequest* GetUserOnlineStateRequest::default_instance_ = NULL;

GetUserOnlineStateRequest* GetUserOnlineStateRequest::New() const {
  return new GetUserOnlineStateRequest;
}

void GetUserOnlineStateRequest::Clear() {
  user_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUserOnlineStateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.GetUserOnlineStateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_user_id())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_user_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_user_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.GetUserOnlineStateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.GetUserOnlineStateRequest)
  return false;
#undef DO_
}

void GetUserOnlineStateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.GetUserOnlineStateRequest)
  // repeated uint64 user_id = 1;
  for (int i = 0; i < this->user_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->user_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.GetUserOnlineStateRequest)
}

::google::protobuf::uint8* GetUserOnlineStateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.GetUserOnlineStateRequest)
  // repeated uint64 user_id = 1;
  for (int i = 0; i < this->user_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->user_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.GetUserOnlineStateRequest)
  return target;
}

int GetUserOnlineStateRequest::ByteSize() const {
  int total_size = 0;

  // repeated uint64 user_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->user_id(i));
    }
    total_size += 1 * this->user_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserOnlineStateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUserOnlineStateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUserOnlineStateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUserOnlineStateRequest::MergeFrom(const GetUserOnlineStateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_id_.MergeFrom(from.user_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUserOnlineStateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserOnlineStateRequest::CopyFrom(const GetUserOnlineStateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserOnlineStateRequest::IsInitialized() const {

  return true;
}

void GetUserOnlineStateRequest::Swap(GetUserOnlineStateRequest* other) {
  if (other != this) {
    user_id_.Swap(&other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUserOnlineStateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUserOnlineStateRequest_descriptor_;
  metadata.reflection = GetUserOnlineStateRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserOnlineStateInfo::kUserIdFieldNumber;
const int UserOnlineStateInfo::kOnlineStateFieldNumber;
const int UserOnlineStateInfo::kMtsIpFieldNumber;
const int UserOnlineStateInfo::kMtsPortFieldNumber;
const int UserOnlineStateInfo::kHasCameraFieldNumber;
const int UserOnlineStateInfo::kTerminalTypeFieldNumber;
#endif  // !_MSC_VER

UserOnlineStateInfo::UserOnlineStateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.UserOnlineStateInfo)
}

void UserOnlineStateInfo::InitAsDefaultInstance() {
}

UserOnlineStateInfo::UserOnlineStateInfo(const UserOnlineStateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.UserOnlineStateInfo)
}

void UserOnlineStateInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  online_state_ = 0u;
  mts_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mts_port_ = 0u;
  has_camera_ = false;
  terminal_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserOnlineStateInfo::~UserOnlineStateInfo() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.UserOnlineStateInfo)
  SharedDtor();
}

void UserOnlineStateInfo::SharedDtor() {
  if (mts_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mts_ip_;
  }
  if (this != default_instance_) {
  }
}

void UserOnlineStateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserOnlineStateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserOnlineStateInfo_descriptor_;
}

const UserOnlineStateInfo& UserOnlineStateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

UserOnlineStateInfo* UserOnlineStateInfo::default_instance_ = NULL;

UserOnlineStateInfo* UserOnlineStateInfo::New() const {
  return new UserOnlineStateInfo;
}

void UserOnlineStateInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserOnlineStateInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(online_state_, terminal_type_);
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_mts_ip()) {
      if (mts_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mts_ip_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserOnlineStateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.UserOnlineStateInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_online_state;
        break;
      }

      // optional uint32 online_state = 2;
      case 2: {
        if (tag == 16) {
         parse_online_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_state_)));
          set_has_online_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mts_ip;
        break;
      }

      // optional string mts_ip = 3;
      case 3: {
        if (tag == 26) {
         parse_mts_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mts_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mts_ip().data(), this->mts_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mts_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mts_port;
        break;
      }

      // optional uint32 mts_port = 4;
      case 4: {
        if (tag == 32) {
         parse_mts_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mts_port_)));
          set_has_mts_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_has_camera;
        break;
      }

      // optional bool has_camera = 6;
      case 6: {
        if (tag == 48) {
         parse_has_camera:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_camera_)));
          set_has_has_camera();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_terminal_type;
        break;
      }

      // optional uint32 terminal_type = 7;
      case 7: {
        if (tag == 56) {
         parse_terminal_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terminal_type_)));
          set_has_terminal_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.UserOnlineStateInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.UserOnlineStateInfo)
  return false;
#undef DO_
}

void UserOnlineStateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.UserOnlineStateInfo)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint32 online_state = 2;
  if (has_online_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->online_state(), output);
  }

  // optional string mts_ip = 3;
  if (has_mts_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mts_ip().data(), this->mts_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mts_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mts_ip(), output);
  }

  // optional uint32 mts_port = 4;
  if (has_mts_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mts_port(), output);
  }

  // optional bool has_camera = 6;
  if (has_has_camera()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->has_camera(), output);
  }

  // optional uint32 terminal_type = 7;
  if (has_terminal_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->terminal_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.UserOnlineStateInfo)
}

::google::protobuf::uint8* UserOnlineStateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.UserOnlineStateInfo)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint32 online_state = 2;
  if (has_online_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->online_state(), target);
  }

  // optional string mts_ip = 3;
  if (has_mts_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mts_ip().data(), this->mts_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mts_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mts_ip(), target);
  }

  // optional uint32 mts_port = 4;
  if (has_mts_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mts_port(), target);
  }

  // optional bool has_camera = 6;
  if (has_has_camera()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->has_camera(), target);
  }

  // optional uint32 terminal_type = 7;
  if (has_terminal_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->terminal_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.UserOnlineStateInfo)
  return target;
}

int UserOnlineStateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint32 online_state = 2;
    if (has_online_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_state());
    }

    // optional string mts_ip = 3;
    if (has_mts_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mts_ip());
    }

    // optional uint32 mts_port = 4;
    if (has_mts_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mts_port());
    }

    // optional bool has_camera = 6;
    if (has_has_camera()) {
      total_size += 1 + 1;
    }

    // optional uint32 terminal_type = 7;
    if (has_terminal_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terminal_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserOnlineStateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserOnlineStateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserOnlineStateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserOnlineStateInfo::MergeFrom(const UserOnlineStateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_online_state()) {
      set_online_state(from.online_state());
    }
    if (from.has_mts_ip()) {
      set_mts_ip(from.mts_ip());
    }
    if (from.has_mts_port()) {
      set_mts_port(from.mts_port());
    }
    if (from.has_has_camera()) {
      set_has_camera(from.has_camera());
    }
    if (from.has_terminal_type()) {
      set_terminal_type(from.terminal_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserOnlineStateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserOnlineStateInfo::CopyFrom(const UserOnlineStateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserOnlineStateInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UserOnlineStateInfo::Swap(UserOnlineStateInfo* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(online_state_, other->online_state_);
    std::swap(mts_ip_, other->mts_ip_);
    std::swap(mts_port_, other->mts_port_);
    std::swap(has_camera_, other->has_camera_);
    std::swap(terminal_type_, other->terminal_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserOnlineStateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserOnlineStateInfo_descriptor_;
  metadata.reflection = UserOnlineStateInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserOnlineStateResponse::kUserInfoFieldNumber;
#endif  // !_MSC_VER

GetUserOnlineStateResponse::GetUserOnlineStateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.GetUserOnlineStateResponse)
}

void GetUserOnlineStateResponse::InitAsDefaultInstance() {
}

GetUserOnlineStateResponse::GetUserOnlineStateResponse(const GetUserOnlineStateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.GetUserOnlineStateResponse)
}

void GetUserOnlineStateResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserOnlineStateResponse::~GetUserOnlineStateResponse() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.GetUserOnlineStateResponse)
  SharedDtor();
}

void GetUserOnlineStateResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetUserOnlineStateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUserOnlineStateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUserOnlineStateResponse_descriptor_;
}

const GetUserOnlineStateResponse& GetUserOnlineStateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

GetUserOnlineStateResponse* GetUserOnlineStateResponse::default_instance_ = NULL;

GetUserOnlineStateResponse* GetUserOnlineStateResponse::New() const {
  return new GetUserOnlineStateResponse;
}

void GetUserOnlineStateResponse::Clear() {
  user_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUserOnlineStateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.GetUserOnlineStateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TerminalProtocol.UserOnlineStateInfo user_info = 1;
      case 1: {
        if (tag == 10) {
         parse_user_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_user_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.GetUserOnlineStateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.GetUserOnlineStateResponse)
  return false;
#undef DO_
}

void GetUserOnlineStateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.GetUserOnlineStateResponse)
  // repeated .TerminalProtocol.UserOnlineStateInfo user_info = 1;
  for (int i = 0; i < this->user_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.GetUserOnlineStateResponse)
}

::google::protobuf::uint8* GetUserOnlineStateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.GetUserOnlineStateResponse)
  // repeated .TerminalProtocol.UserOnlineStateInfo user_info = 1;
  for (int i = 0; i < this->user_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.GetUserOnlineStateResponse)
  return target;
}

int GetUserOnlineStateResponse::ByteSize() const {
  int total_size = 0;

  // repeated .TerminalProtocol.UserOnlineStateInfo user_info = 1;
  total_size += 1 * this->user_info_size();
  for (int i = 0; i < this->user_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserOnlineStateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUserOnlineStateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUserOnlineStateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUserOnlineStateResponse::MergeFrom(const GetUserOnlineStateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_info_.MergeFrom(from.user_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUserOnlineStateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserOnlineStateResponse::CopyFrom(const GetUserOnlineStateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserOnlineStateResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->user_info())) return false;
  return true;
}

void GetUserOnlineStateResponse::Swap(GetUserOnlineStateResponse* other) {
  if (other != this) {
    user_info_.Swap(&other->user_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUserOnlineStateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUserOnlineStateResponse_descriptor_;
  metadata.reflection = GetUserOnlineStateResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGroupUserCardRequest::kUserIdFieldNumber;
const int GetGroupUserCardRequest::kGroupIdFieldNumber;
#endif  // !_MSC_VER

GetGroupUserCardRequest::GetGroupUserCardRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.GetGroupUserCardRequest)
}

void GetGroupUserCardRequest::InitAsDefaultInstance() {
}

GetGroupUserCardRequest::GetGroupUserCardRequest(const GetGroupUserCardRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.GetGroupUserCardRequest)
}

void GetGroupUserCardRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGroupUserCardRequest::~GetGroupUserCardRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.GetGroupUserCardRequest)
  SharedDtor();
}

void GetGroupUserCardRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGroupUserCardRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGroupUserCardRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGroupUserCardRequest_descriptor_;
}

const GetGroupUserCardRequest& GetGroupUserCardRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

GetGroupUserCardRequest* GetGroupUserCardRequest::default_instance_ = NULL;

GetGroupUserCardRequest* GetGroupUserCardRequest::New() const {
  return new GetGroupUserCardRequest;
}

void GetGroupUserCardRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetGroupUserCardRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, group_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGroupUserCardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.GetGroupUserCardRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_id;
        break;
      }

      // required uint64 group_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.GetGroupUserCardRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.GetGroupUserCardRequest)
  return false;
#undef DO_
}

void GetGroupUserCardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.GetGroupUserCardRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.GetGroupUserCardRequest)
}

::google::protobuf::uint8* GetGroupUserCardRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.GetGroupUserCardRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 group_id = 3;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.GetGroupUserCardRequest)
  return target;
}

int GetGroupUserCardRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 group_id = 3;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroupUserCardRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGroupUserCardRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGroupUserCardRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGroupUserCardRequest::MergeFrom(const GetGroupUserCardRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGroupUserCardRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGroupUserCardRequest::CopyFrom(const GetGroupUserCardRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupUserCardRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetGroupUserCardRequest::Swap(GetGroupUserCardRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGroupUserCardRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGroupUserCardRequest_descriptor_;
  metadata.reflection = GetGroupUserCardRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGroupUserCardResponse::kUserIdFieldNumber;
const int GetGroupUserCardResponse::kGroupIdFieldNumber;
const int GetGroupUserCardResponse::kNicknameFieldNumber;
const int GetGroupUserCardResponse::kTelFieldNumber;
const int GetGroupUserCardResponse::kEmailFieldNumber;
const int GetGroupUserCardResponse::kRemarkFieldNumber;
#endif  // !_MSC_VER

GetGroupUserCardResponse::GetGroupUserCardResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.GetGroupUserCardResponse)
}

void GetGroupUserCardResponse::InitAsDefaultInstance() {
}

GetGroupUserCardResponse::GetGroupUserCardResponse(const GetGroupUserCardResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.GetGroupUserCardResponse)
}

void GetGroupUserCardResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGroupUserCardResponse::~GetGroupUserCardResponse() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.GetGroupUserCardResponse)
  SharedDtor();
}

void GetGroupUserCardResponse::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (tel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tel_;
  }
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete remark_;
  }
  if (this != default_instance_) {
  }
}

void GetGroupUserCardResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGroupUserCardResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGroupUserCardResponse_descriptor_;
}

const GetGroupUserCardResponse& GetGroupUserCardResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

GetGroupUserCardResponse* GetGroupUserCardResponse::default_instance_ = NULL;

GetGroupUserCardResponse* GetGroupUserCardResponse::New() const {
  return new GetGroupUserCardResponse;
}

void GetGroupUserCardResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetGroupUserCardResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(user_id_, group_id_);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    if (has_tel()) {
      if (tel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tel_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        email_->clear();
      }
    }
    if (has_remark()) {
      if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        remark_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGroupUserCardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.GetGroupUserCardResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // optional string nickname = 3;
      case 3: {
        if (tag == 26) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tel;
        break;
      }

      // optional string tel = 4;
      case 4: {
        if (tag == 34) {
         parse_tel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tel().data(), this->tel().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tel");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_email;
        break;
      }

      // optional string email = 5;
      case 5: {
        if (tag == 42) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "email");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_remark;
        break;
      }

      // optional string remark = 6;
      case 6: {
        if (tag == 50) {
         parse_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->remark().data(), this->remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "remark");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.GetGroupUserCardResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.GetGroupUserCardResponse)
  return false;
#undef DO_
}

void GetGroupUserCardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.GetGroupUserCardResponse)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nickname(), output);
  }

  // optional string tel = 4;
  if (has_tel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tel().data(), this->tel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->tel(), output);
  }

  // optional string email = 5;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->email(), output);
  }

  // optional string remark = 6;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->remark(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.GetGroupUserCardResponse)
}

::google::protobuf::uint8* GetGroupUserCardResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.GetGroupUserCardResponse)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // optional string tel = 4;
  if (has_tel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tel().data(), this->tel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tel(), target);
  }

  // optional string email = 5;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->email(), target);
  }

  // optional string remark = 6;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->remark(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.GetGroupUserCardResponse)
  return target;
}

int GetGroupUserCardResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional string nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string tel = 4;
    if (has_tel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tel());
    }

    // optional string email = 5;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional string remark = 6;
    if (has_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remark());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroupUserCardResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGroupUserCardResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGroupUserCardResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGroupUserCardResponse::MergeFrom(const GetGroupUserCardResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_tel()) {
      set_tel(from.tel());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_remark()) {
      set_remark(from.remark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGroupUserCardResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGroupUserCardResponse::CopyFrom(const GetGroupUserCardResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupUserCardResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetGroupUserCardResponse::Swap(GetGroupUserCardResponse* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(nickname_, other->nickname_);
    std::swap(tel_, other->tel_);
    std::swap(email_, other->email_);
    std::swap(remark_, other->remark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGroupUserCardResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGroupUserCardResponse_descriptor_;
  metadata.reflection = GetGroupUserCardResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateGroupUserCardRequest::kUserIdFieldNumber;
const int UpdateGroupUserCardRequest::kGroupIdFieldNumber;
const int UpdateGroupUserCardRequest::kNicknameFieldNumber;
const int UpdateGroupUserCardRequest::kTelFieldNumber;
const int UpdateGroupUserCardRequest::kEmailFieldNumber;
const int UpdateGroupUserCardRequest::kRemarkFieldNumber;
const int UpdateGroupUserCardRequest::kGroupUserIdFieldNumber;
#endif  // !_MSC_VER

UpdateGroupUserCardRequest::UpdateGroupUserCardRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.UpdateGroupUserCardRequest)
}

void UpdateGroupUserCardRequest::InitAsDefaultInstance() {
}

UpdateGroupUserCardRequest::UpdateGroupUserCardRequest(const UpdateGroupUserCardRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.UpdateGroupUserCardRequest)
}

void UpdateGroupUserCardRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateGroupUserCardRequest::~UpdateGroupUserCardRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.UpdateGroupUserCardRequest)
  SharedDtor();
}

void UpdateGroupUserCardRequest::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (tel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tel_;
  }
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete remark_;
  }
  if (this != default_instance_) {
  }
}

void UpdateGroupUserCardRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateGroupUserCardRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateGroupUserCardRequest_descriptor_;
}

const UpdateGroupUserCardRequest& UpdateGroupUserCardRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

UpdateGroupUserCardRequest* UpdateGroupUserCardRequest::default_instance_ = NULL;

UpdateGroupUserCardRequest* UpdateGroupUserCardRequest::New() const {
  return new UpdateGroupUserCardRequest;
}

void UpdateGroupUserCardRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UpdateGroupUserCardRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(user_id_, group_id_);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    if (has_tel()) {
      if (tel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tel_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        email_->clear();
      }
    }
    if (has_remark()) {
      if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        remark_->clear();
      }
    }
    group_user_id_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateGroupUserCardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.UpdateGroupUserCardRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // optional string nickname = 3;
      case 3: {
        if (tag == 26) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tel;
        break;
      }

      // optional string tel = 4;
      case 4: {
        if (tag == 34) {
         parse_tel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tel().data(), this->tel().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tel");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_email;
        break;
      }

      // optional string email = 5;
      case 5: {
        if (tag == 42) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "email");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_remark;
        break;
      }

      // optional string remark = 6;
      case 6: {
        if (tag == 50) {
         parse_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->remark().data(), this->remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "remark");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_group_user_id;
        break;
      }

      // optional uint64 group_user_id = 7;
      case 7: {
        if (tag == 56) {
         parse_group_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_user_id_)));
          set_has_group_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.UpdateGroupUserCardRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.UpdateGroupUserCardRequest)
  return false;
#undef DO_
}

void UpdateGroupUserCardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.UpdateGroupUserCardRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nickname(), output);
  }

  // optional string tel = 4;
  if (has_tel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tel().data(), this->tel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->tel(), output);
  }

  // optional string email = 5;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->email(), output);
  }

  // optional string remark = 6;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->remark(), output);
  }

  // optional uint64 group_user_id = 7;
  if (has_group_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->group_user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.UpdateGroupUserCardRequest)
}

::google::protobuf::uint8* UpdateGroupUserCardRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.UpdateGroupUserCardRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // optional string tel = 4;
  if (has_tel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tel().data(), this->tel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tel(), target);
  }

  // optional string email = 5;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->email(), target);
  }

  // optional string remark = 6;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->remark(), target);
  }

  // optional uint64 group_user_id = 7;
  if (has_group_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->group_user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.UpdateGroupUserCardRequest)
  return target;
}

int UpdateGroupUserCardRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional string nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string tel = 4;
    if (has_tel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tel());
    }

    // optional string email = 5;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional string remark = 6;
    if (has_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remark());
    }

    // optional uint64 group_user_id = 7;
    if (has_group_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateGroupUserCardRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateGroupUserCardRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateGroupUserCardRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateGroupUserCardRequest::MergeFrom(const UpdateGroupUserCardRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_tel()) {
      set_tel(from.tel());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_remark()) {
      set_remark(from.remark());
    }
    if (from.has_group_user_id()) {
      set_group_user_id(from.group_user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateGroupUserCardRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateGroupUserCardRequest::CopyFrom(const UpdateGroupUserCardRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateGroupUserCardRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UpdateGroupUserCardRequest::Swap(UpdateGroupUserCardRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(nickname_, other->nickname_);
    std::swap(tel_, other->tel_);
    std::swap(email_, other->email_);
    std::swap(remark_, other->remark_);
    std::swap(group_user_id_, other->group_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateGroupUserCardRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateGroupUserCardRequest_descriptor_;
  metadata.reflection = UpdateGroupUserCardRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetGroupMsgModeRequest::kUserIdFieldNumber;
const int SetGroupMsgModeRequest::kGroupIdFieldNumber;
const int SetGroupMsgModeRequest::kMsgModeFieldNumber;
#endif  // !_MSC_VER

SetGroupMsgModeRequest::SetGroupMsgModeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.SetGroupMsgModeRequest)
}

void SetGroupMsgModeRequest::InitAsDefaultInstance() {
}

SetGroupMsgModeRequest::SetGroupMsgModeRequest(const SetGroupMsgModeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.SetGroupMsgModeRequest)
}

void SetGroupMsgModeRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  msg_mode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetGroupMsgModeRequest::~SetGroupMsgModeRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.SetGroupMsgModeRequest)
  SharedDtor();
}

void SetGroupMsgModeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetGroupMsgModeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetGroupMsgModeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetGroupMsgModeRequest_descriptor_;
}

const SetGroupMsgModeRequest& SetGroupMsgModeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

SetGroupMsgModeRequest* SetGroupMsgModeRequest::default_instance_ = NULL;

SetGroupMsgModeRequest* SetGroupMsgModeRequest::New() const {
  return new SetGroupMsgModeRequest;
}

void SetGroupMsgModeRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SetGroupMsgModeRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, msg_mode_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetGroupMsgModeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.SetGroupMsgModeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msg_mode;
        break;
      }

      // required uint32 msg_mode = 3;
      case 3: {
        if (tag == 24) {
         parse_msg_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_mode_)));
          set_has_msg_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.SetGroupMsgModeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.SetGroupMsgModeRequest)
  return false;
#undef DO_
}

void SetGroupMsgModeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.SetGroupMsgModeRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  // required uint32 msg_mode = 3;
  if (has_msg_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->msg_mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.SetGroupMsgModeRequest)
}

::google::protobuf::uint8* SetGroupMsgModeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.SetGroupMsgModeRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  // required uint32 msg_mode = 3;
  if (has_msg_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->msg_mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.SetGroupMsgModeRequest)
  return target;
}

int SetGroupMsgModeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // required uint32 msg_mode = 3;
    if (has_msg_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_mode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetGroupMsgModeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetGroupMsgModeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetGroupMsgModeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetGroupMsgModeRequest::MergeFrom(const SetGroupMsgModeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_msg_mode()) {
      set_msg_mode(from.msg_mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetGroupMsgModeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetGroupMsgModeRequest::CopyFrom(const SetGroupMsgModeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetGroupMsgModeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SetGroupMsgModeRequest::Swap(SetGroupMsgModeRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(msg_mode_, other->msg_mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetGroupMsgModeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetGroupMsgModeRequest_descriptor_;
  metadata.reflection = SetGroupMsgModeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetGroupTalkModeRequest::kUserIdFieldNumber;
const int SetGroupTalkModeRequest::kGroupIdFieldNumber;
const int SetGroupTalkModeRequest::kTalkModeFieldNumber;
#endif  // !_MSC_VER

SetGroupTalkModeRequest::SetGroupTalkModeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.SetGroupTalkModeRequest)
}

void SetGroupTalkModeRequest::InitAsDefaultInstance() {
}

SetGroupTalkModeRequest::SetGroupTalkModeRequest(const SetGroupTalkModeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.SetGroupTalkModeRequest)
}

void SetGroupTalkModeRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  talk_mode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetGroupTalkModeRequest::~SetGroupTalkModeRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.SetGroupTalkModeRequest)
  SharedDtor();
}

void SetGroupTalkModeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetGroupTalkModeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetGroupTalkModeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetGroupTalkModeRequest_descriptor_;
}

const SetGroupTalkModeRequest& SetGroupTalkModeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

SetGroupTalkModeRequest* SetGroupTalkModeRequest::default_instance_ = NULL;

SetGroupTalkModeRequest* SetGroupTalkModeRequest::New() const {
  return new SetGroupTalkModeRequest;
}

void SetGroupTalkModeRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SetGroupTalkModeRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, talk_mode_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetGroupTalkModeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.SetGroupTalkModeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_talk_mode;
        break;
      }

      // required uint32 talk_mode = 3;
      case 3: {
        if (tag == 24) {
         parse_talk_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &talk_mode_)));
          set_has_talk_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.SetGroupTalkModeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.SetGroupTalkModeRequest)
  return false;
#undef DO_
}

void SetGroupTalkModeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.SetGroupTalkModeRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  // required uint32 talk_mode = 3;
  if (has_talk_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->talk_mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.SetGroupTalkModeRequest)
}

::google::protobuf::uint8* SetGroupTalkModeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.SetGroupTalkModeRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  // required uint32 talk_mode = 3;
  if (has_talk_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->talk_mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.SetGroupTalkModeRequest)
  return target;
}

int SetGroupTalkModeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // required uint32 talk_mode = 3;
    if (has_talk_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->talk_mode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetGroupTalkModeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetGroupTalkModeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetGroupTalkModeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetGroupTalkModeRequest::MergeFrom(const SetGroupTalkModeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_talk_mode()) {
      set_talk_mode(from.talk_mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetGroupTalkModeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetGroupTalkModeRequest::CopyFrom(const SetGroupTalkModeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetGroupTalkModeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SetGroupTalkModeRequest::Swap(SetGroupTalkModeRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(talk_mode_, other->talk_mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetGroupTalkModeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetGroupTalkModeRequest_descriptor_;
  metadata.reflection = SetGroupTalkModeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFriendVerifyInfoRequest::kUserIdFieldNumber;
#endif  // !_MSC_VER

GetFriendVerifyInfoRequest::GetFriendVerifyInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.GetFriendVerifyInfoRequest)
}

void GetFriendVerifyInfoRequest::InitAsDefaultInstance() {
}

GetFriendVerifyInfoRequest::GetFriendVerifyInfoRequest(const GetFriendVerifyInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.GetFriendVerifyInfoRequest)
}

void GetFriendVerifyInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFriendVerifyInfoRequest::~GetFriendVerifyInfoRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.GetFriendVerifyInfoRequest)
  SharedDtor();
}

void GetFriendVerifyInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetFriendVerifyInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFriendVerifyInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFriendVerifyInfoRequest_descriptor_;
}

const GetFriendVerifyInfoRequest& GetFriendVerifyInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

GetFriendVerifyInfoRequest* GetFriendVerifyInfoRequest::default_instance_ = NULL;

GetFriendVerifyInfoRequest* GetFriendVerifyInfoRequest::New() const {
  return new GetFriendVerifyInfoRequest;
}

void GetFriendVerifyInfoRequest::Clear() {
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFriendVerifyInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.GetFriendVerifyInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.GetFriendVerifyInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.GetFriendVerifyInfoRequest)
  return false;
#undef DO_
}

void GetFriendVerifyInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.GetFriendVerifyInfoRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.GetFriendVerifyInfoRequest)
}

::google::protobuf::uint8* GetFriendVerifyInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.GetFriendVerifyInfoRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.GetFriendVerifyInfoRequest)
  return target;
}

int GetFriendVerifyInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFriendVerifyInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFriendVerifyInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFriendVerifyInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFriendVerifyInfoRequest::MergeFrom(const GetFriendVerifyInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFriendVerifyInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFriendVerifyInfoRequest::CopyFrom(const GetFriendVerifyInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendVerifyInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetFriendVerifyInfoRequest::Swap(GetFriendVerifyInfoRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFriendVerifyInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFriendVerifyInfoRequest_descriptor_;
  metadata.reflection = GetFriendVerifyInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFriendVerifyInfoResponse::kVerifyTypeFieldNumber;
const int GetFriendVerifyInfoResponse::kQuestionTypeFieldNumber;
const int GetFriendVerifyInfoResponse::kAnswerFieldNumber;
const int GetFriendVerifyInfoResponse::kResultFieldNumber;
#endif  // !_MSC_VER

GetFriendVerifyInfoResponse::GetFriendVerifyInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.GetFriendVerifyInfoResponse)
}

void GetFriendVerifyInfoResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::TerminalProtocol::Result*>(&::TerminalProtocol::Result::default_instance());
}

GetFriendVerifyInfoResponse::GetFriendVerifyInfoResponse(const GetFriendVerifyInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.GetFriendVerifyInfoResponse)
}

void GetFriendVerifyInfoResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  verify_type_ = 0u;
  question_type_ = 0u;
  answer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFriendVerifyInfoResponse::~GetFriendVerifyInfoResponse() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.GetFriendVerifyInfoResponse)
  SharedDtor();
}

void GetFriendVerifyInfoResponse::SharedDtor() {
  if (answer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete answer_;
  }
  if (this != default_instance_) {
    delete result_;
  }
}

void GetFriendVerifyInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFriendVerifyInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFriendVerifyInfoResponse_descriptor_;
}

const GetFriendVerifyInfoResponse& GetFriendVerifyInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

GetFriendVerifyInfoResponse* GetFriendVerifyInfoResponse::default_instance_ = NULL;

GetFriendVerifyInfoResponse* GetFriendVerifyInfoResponse::New() const {
  return new GetFriendVerifyInfoResponse;
}

void GetFriendVerifyInfoResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetFriendVerifyInfoResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(verify_type_, question_type_);
    if (has_answer()) {
      if (answer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        answer_->clear();
      }
    }
    if (has_result()) {
      if (result_ != NULL) result_->::TerminalProtocol::Result::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFriendVerifyInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.GetFriendVerifyInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 verify_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &verify_type_)));
          set_has_verify_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_question_type;
        break;
      }

      // optional uint32 question_type = 2;
      case 2: {
        if (tag == 16) {
         parse_question_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &question_type_)));
          set_has_question_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_answer;
        break;
      }

      // optional string answer = 3;
      case 3: {
        if (tag == 26) {
         parse_answer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_answer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->answer().data(), this->answer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "answer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_result;
        break;
      }

      // required .TerminalProtocol.Result result = 4;
      case 4: {
        if (tag == 34) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.GetFriendVerifyInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.GetFriendVerifyInfoResponse)
  return false;
#undef DO_
}

void GetFriendVerifyInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.GetFriendVerifyInfoResponse)
  // optional uint32 verify_type = 1;
  if (has_verify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->verify_type(), output);
  }

  // optional uint32 question_type = 2;
  if (has_question_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->question_type(), output);
  }

  // optional string answer = 3;
  if (has_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "answer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->answer(), output);
  }

  // required .TerminalProtocol.Result result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.GetFriendVerifyInfoResponse)
}

::google::protobuf::uint8* GetFriendVerifyInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.GetFriendVerifyInfoResponse)
  // optional uint32 verify_type = 1;
  if (has_verify_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->verify_type(), target);
  }

  // optional uint32 question_type = 2;
  if (has_question_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->question_type(), target);
  }

  // optional string answer = 3;
  if (has_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "answer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->answer(), target);
  }

  // required .TerminalProtocol.Result result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.GetFriendVerifyInfoResponse)
  return target;
}

int GetFriendVerifyInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 verify_type = 1;
    if (has_verify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->verify_type());
    }

    // optional uint32 question_type = 2;
    if (has_question_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->question_type());
    }

    // optional string answer = 3;
    if (has_answer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->answer());
    }

    // required .TerminalProtocol.Result result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFriendVerifyInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFriendVerifyInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFriendVerifyInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFriendVerifyInfoResponse::MergeFrom(const GetFriendVerifyInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_verify_type()) {
      set_verify_type(from.verify_type());
    }
    if (from.has_question_type()) {
      set_question_type(from.question_type());
    }
    if (from.has_answer()) {
      set_answer(from.answer());
    }
    if (from.has_result()) {
      mutable_result()->::TerminalProtocol::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFriendVerifyInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFriendVerifyInfoResponse::CopyFrom(const GetFriendVerifyInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendVerifyInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void GetFriendVerifyInfoResponse::Swap(GetFriendVerifyInfoResponse* other) {
  if (other != this) {
    std::swap(verify_type_, other->verify_type_);
    std::swap(question_type_, other->question_type_);
    std::swap(answer_, other->answer_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFriendVerifyInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFriendVerifyInfoResponse_descriptor_;
  metadata.reflection = GetFriendVerifyInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGroupManagerListRequest::kUserIdFieldNumber;
const int GetGroupManagerListRequest::kGroupIdFieldNumber;
#endif  // !_MSC_VER

GetGroupManagerListRequest::GetGroupManagerListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.GetGroupManagerListRequest)
}

void GetGroupManagerListRequest::InitAsDefaultInstance() {
}

GetGroupManagerListRequest::GetGroupManagerListRequest(const GetGroupManagerListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.GetGroupManagerListRequest)
}

void GetGroupManagerListRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGroupManagerListRequest::~GetGroupManagerListRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.GetGroupManagerListRequest)
  SharedDtor();
}

void GetGroupManagerListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGroupManagerListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGroupManagerListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGroupManagerListRequest_descriptor_;
}

const GetGroupManagerListRequest& GetGroupManagerListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

GetGroupManagerListRequest* GetGroupManagerListRequest::default_instance_ = NULL;

GetGroupManagerListRequest* GetGroupManagerListRequest::New() const {
  return new GetGroupManagerListRequest;
}

void GetGroupManagerListRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetGroupManagerListRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, group_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGroupManagerListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.GetGroupManagerListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint64 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.GetGroupManagerListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.GetGroupManagerListRequest)
  return false;
#undef DO_
}

void GetGroupManagerListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.GetGroupManagerListRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.GetGroupManagerListRequest)
}

::google::protobuf::uint8* GetGroupManagerListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.GetGroupManagerListRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.GetGroupManagerListRequest)
  return target;
}

int GetGroupManagerListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroupManagerListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGroupManagerListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGroupManagerListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGroupManagerListRequest::MergeFrom(const GetGroupManagerListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGroupManagerListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGroupManagerListRequest::CopyFrom(const GetGroupManagerListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupManagerListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetGroupManagerListRequest::Swap(GetGroupManagerListRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGroupManagerListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGroupManagerListRequest_descriptor_;
  metadata.reflection = GetGroupManagerListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGroupManagerListResponse::kGroupIdFieldNumber;
const int GetGroupManagerListResponse::kSumNumFieldNumber;
const int GetGroupManagerListResponse::kGroupUserIdFieldNumber;
const int GetGroupManagerListResponse::kResultFieldNumber;
#endif  // !_MSC_VER

GetGroupManagerListResponse::GetGroupManagerListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.GetGroupManagerListResponse)
}

void GetGroupManagerListResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::TerminalProtocol::Result*>(&::TerminalProtocol::Result::default_instance());
}

GetGroupManagerListResponse::GetGroupManagerListResponse(const GetGroupManagerListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.GetGroupManagerListResponse)
}

void GetGroupManagerListResponse::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = GOOGLE_ULONGLONG(0);
  sum_num_ = 0u;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGroupManagerListResponse::~GetGroupManagerListResponse() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.GetGroupManagerListResponse)
  SharedDtor();
}

void GetGroupManagerListResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void GetGroupManagerListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGroupManagerListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGroupManagerListResponse_descriptor_;
}

const GetGroupManagerListResponse& GetGroupManagerListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

GetGroupManagerListResponse* GetGroupManagerListResponse::default_instance_ = NULL;

GetGroupManagerListResponse* GetGroupManagerListResponse::New() const {
  return new GetGroupManagerListResponse;
}

void GetGroupManagerListResponse::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    group_id_ = GOOGLE_ULONGLONG(0);
    sum_num_ = 0u;
    if (has_result()) {
      if (result_ != NULL) result_->::TerminalProtocol::Result::Clear();
    }
  }
  group_user_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGroupManagerListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.GetGroupManagerListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sum_num;
        break;
      }

      // optional uint32 sum_num = 2;
      case 2: {
        if (tag == 16) {
         parse_sum_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sum_num_)));
          set_has_sum_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_user_id;
        break;
      }

      // repeated uint64 group_user_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_group_user_id())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_group_user_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_user_id;
        if (input->ExpectTag(34)) goto parse_result;
        break;
      }

      // required .TerminalProtocol.Result result = 4;
      case 4: {
        if (tag == 34) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.GetGroupManagerListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.GetGroupManagerListResponse)
  return false;
#undef DO_
}

void GetGroupManagerListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.GetGroupManagerListResponse)
  // optional uint64 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->group_id(), output);
  }

  // optional uint32 sum_num = 2;
  if (has_sum_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sum_num(), output);
  }

  // repeated uint64 group_user_id = 3;
  for (int i = 0; i < this->group_user_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->group_user_id(i), output);
  }

  // required .TerminalProtocol.Result result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.GetGroupManagerListResponse)
}

::google::protobuf::uint8* GetGroupManagerListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.GetGroupManagerListResponse)
  // optional uint64 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->group_id(), target);
  }

  // optional uint32 sum_num = 2;
  if (has_sum_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sum_num(), target);
  }

  // repeated uint64 group_user_id = 3;
  for (int i = 0; i < this->group_user_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->group_user_id(i), target);
  }

  // required .TerminalProtocol.Result result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.GetGroupManagerListResponse)
  return target;
}

int GetGroupManagerListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional uint32 sum_num = 2;
    if (has_sum_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sum_num());
    }

    // required .TerminalProtocol.Result result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated uint64 group_user_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->group_user_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->group_user_id(i));
    }
    total_size += 1 * this->group_user_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroupManagerListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGroupManagerListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGroupManagerListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGroupManagerListResponse::MergeFrom(const GetGroupManagerListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_user_id_.MergeFrom(from.group_user_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_sum_num()) {
      set_sum_num(from.sum_num());
    }
    if (from.has_result()) {
      mutable_result()->::TerminalProtocol::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGroupManagerListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGroupManagerListResponse::CopyFrom(const GetGroupManagerListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupManagerListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void GetGroupManagerListResponse::Swap(GetGroupManagerListResponse* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(sum_num_, other->sum_num_);
    group_user_id_.Swap(&other->group_user_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGroupManagerListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGroupManagerListResponse_descriptor_;
  metadata.reflection = GetGroupManagerListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteHistoryMessageRequest::kUserIdFieldNumber;
const int DeleteHistoryMessageRequest::kMsgTypeFieldNumber;
const int DeleteHistoryMessageRequest::kLastTimeFieldNumber;
#endif  // !_MSC_VER

DeleteHistoryMessageRequest::DeleteHistoryMessageRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalProtocol.DeleteHistoryMessageRequest)
}

void DeleteHistoryMessageRequest::InitAsDefaultInstance() {
}

DeleteHistoryMessageRequest::DeleteHistoryMessageRequest(const DeleteHistoryMessageRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalProtocol.DeleteHistoryMessageRequest)
}

void DeleteHistoryMessageRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  msg_type_ = 0u;
  last_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteHistoryMessageRequest::~DeleteHistoryMessageRequest() {
  // @@protoc_insertion_point(destructor:TerminalProtocol.DeleteHistoryMessageRequest)
  SharedDtor();
}

void DeleteHistoryMessageRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteHistoryMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteHistoryMessageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteHistoryMessageRequest_descriptor_;
}

const DeleteHistoryMessageRequest& DeleteHistoryMessageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_terminal_5fprotocol_2eproto();
  return *default_instance_;
}

DeleteHistoryMessageRequest* DeleteHistoryMessageRequest::default_instance_ = NULL;

DeleteHistoryMessageRequest* DeleteHistoryMessageRequest::New() const {
  return new DeleteHistoryMessageRequest;
}

void DeleteHistoryMessageRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DeleteHistoryMessageRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, last_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteHistoryMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalProtocol.DeleteHistoryMessageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msg_type;
        break;
      }

      // optional uint32 msg_type = 2;
      case 2: {
        if (tag == 16) {
         parse_msg_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_type_)));
          set_has_msg_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_last_time;
        break;
      }

      // optional uint32 last_time = 3;
      case 3: {
        if (tag == 24) {
         parse_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalProtocol.DeleteHistoryMessageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalProtocol.DeleteHistoryMessageRequest)
  return false;
#undef DO_
}

void DeleteHistoryMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalProtocol.DeleteHistoryMessageRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint32 msg_type = 2;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msg_type(), output);
  }

  // optional uint32 last_time = 3;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->last_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalProtocol.DeleteHistoryMessageRequest)
}

::google::protobuf::uint8* DeleteHistoryMessageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalProtocol.DeleteHistoryMessageRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint32 msg_type = 2;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msg_type(), target);
  }

  // optional uint32 last_time = 3;
  if (has_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->last_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalProtocol.DeleteHistoryMessageRequest)
  return target;
}

int DeleteHistoryMessageRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint32 msg_type = 2;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_type());
    }

    // optional uint32 last_time = 3;
    if (has_last_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteHistoryMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteHistoryMessageRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteHistoryMessageRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteHistoryMessageRequest::MergeFrom(const DeleteHistoryMessageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteHistoryMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteHistoryMessageRequest::CopyFrom(const DeleteHistoryMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteHistoryMessageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DeleteHistoryMessageRequest::Swap(DeleteHistoryMessageRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(msg_type_, other->msg_type_);
    std::swap(last_time_, other->last_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteHistoryMessageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteHistoryMessageRequest_descriptor_;
  metadata.reflection = DeleteHistoryMessageRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TerminalProtocol

// @@protoc_insertion_point(global_scope)
