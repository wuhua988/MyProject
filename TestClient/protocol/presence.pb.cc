// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: presence.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "presence.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tt_presence {

namespace {

const ::google::protobuf::Descriptor* ChgUserInfoRequset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChgUserInfoRequset_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChgUserInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChgUserInfoNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUserStateRequset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUserStateRequset_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUserStateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUserStateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUserStateResponse_UserStateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUserStateResponse_UserStateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUserInfoFromPresence_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUserInfoFromPresence_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperUserFriendRequestFromPresence_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperUserFriendRequestFromPresence_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageTransferRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageTransferRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageTransferResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageTransferResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* KickUserRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KickUserRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UserInfoMessageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UserState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_presence_2eproto() {
  protobuf_AddDesc_presence_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "presence.proto");
  GOOGLE_CHECK(file != NULL);
  ChgUserInfoRequset_descriptor_ = file->message_type(0);
  static const int ChgUserInfoRequset_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgUserInfoRequset, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgUserInfoRequset, acc_ident_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgUserInfoRequset, trans_ident_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgUserInfoRequset, is_camera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgUserInfoRequset, ttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgUserInfoRequset, user_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgUserInfoRequset, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgUserInfoRequset, msg_content_),
  };
  ChgUserInfoRequset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChgUserInfoRequset_descriptor_,
      ChgUserInfoRequset::default_instance_,
      ChgUserInfoRequset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgUserInfoRequset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgUserInfoRequset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChgUserInfoRequset));
  ChgUserInfoNotify_descriptor_ = file->message_type(1);
  static const int ChgUserInfoNotify_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgUserInfoNotify, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgUserInfoNotify, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgUserInfoNotify, user_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgUserInfoNotify, is_camera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgUserInfoNotify, trans_ident_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgUserInfoNotify, ttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgUserInfoNotify, msg_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgUserInfoNotify, user_list_),
  };
  ChgUserInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChgUserInfoNotify_descriptor_,
      ChgUserInfoNotify::default_instance_,
      ChgUserInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgUserInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgUserInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChgUserInfoNotify));
  GetUserStateRequset_descriptor_ = file->message_type(2);
  static const int GetUserStateRequset_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserStateRequset, user_list_),
  };
  GetUserStateRequset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUserStateRequset_descriptor_,
      GetUserStateRequset::default_instance_,
      GetUserStateRequset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserStateRequset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserStateRequset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUserStateRequset));
  GetUserStateResponse_descriptor_ = file->message_type(3);
  static const int GetUserStateResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserStateResponse, user_list_),
  };
  GetUserStateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUserStateResponse_descriptor_,
      GetUserStateResponse::default_instance_,
      GetUserStateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserStateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserStateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUserStateResponse));
  GetUserStateResponse_UserStateInfo_descriptor_ = GetUserStateResponse_descriptor_->nested_type(0);
  static const int GetUserStateResponse_UserStateInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserStateResponse_UserStateInfo, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserStateResponse_UserStateInfo, user_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserStateResponse_UserStateInfo, trans_ident_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserStateResponse_UserStateInfo, is_camera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserStateResponse_UserStateInfo, ttype_),
  };
  GetUserStateResponse_UserStateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUserStateResponse_UserStateInfo_descriptor_,
      GetUserStateResponse_UserStateInfo::default_instance_,
      GetUserStateResponse_UserStateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserStateResponse_UserStateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserStateResponse_UserStateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUserStateResponse_UserStateInfo));
  GetUserInfoFromPresence_descriptor_ = file->message_type(4);
  static const int GetUserInfoFromPresence_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoFromPresence, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoFromPresence, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoFromPresence, user_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoFromPresence, is_camera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoFromPresence, ttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoFromPresence, trans_ident_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoFromPresence, msg_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoFromPresence, user_list_),
  };
  GetUserInfoFromPresence_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUserInfoFromPresence_descriptor_,
      GetUserInfoFromPresence::default_instance_,
      GetUserInfoFromPresence_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoFromPresence, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoFromPresence, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUserInfoFromPresence));
  OperUserFriendRequestFromPresence_descriptor_ = file->message_type(5);
  static const int OperUserFriendRequestFromPresence_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperUserFriendRequestFromPresence, from_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperUserFriendRequestFromPresence, to_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperUserFriendRequestFromPresence, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperUserFriendRequestFromPresence, content_),
  };
  OperUserFriendRequestFromPresence_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperUserFriendRequestFromPresence_descriptor_,
      OperUserFriendRequestFromPresence::default_instance_,
      OperUserFriendRequestFromPresence_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperUserFriendRequestFromPresence, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperUserFriendRequestFromPresence, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperUserFriendRequestFromPresence));
  MessageTransferRequest_descriptor_ = file->message_type(6);
  static const int MessageTransferRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageTransferRequest, from_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageTransferRequest, to_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageTransferRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageTransferRequest, content_),
  };
  MessageTransferRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageTransferRequest_descriptor_,
      MessageTransferRequest::default_instance_,
      MessageTransferRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageTransferRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageTransferRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageTransferRequest));
  MessageTransferResponse_descriptor_ = file->message_type(7);
  static const int MessageTransferResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageTransferResponse, online_),
  };
  MessageTransferResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageTransferResponse_descriptor_,
      MessageTransferResponse::default_instance_,
      MessageTransferResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageTransferResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageTransferResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageTransferResponse));
  KickUserRequest_descriptor_ = file->message_type(8);
  static const int KickUserRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickUserRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickUserRequest, acc_ident_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickUserRequest, ttype_),
  };
  KickUserRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KickUserRequest_descriptor_,
      KickUserRequest::default_instance_,
      KickUserRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickUserRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickUserRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KickUserRequest));
  UserInfoMessageType_descriptor_ = file->enum_type(0);
  UserState_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_presence_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChgUserInfoRequset_descriptor_, &ChgUserInfoRequset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChgUserInfoNotify_descriptor_, &ChgUserInfoNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUserStateRequset_descriptor_, &GetUserStateRequset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUserStateResponse_descriptor_, &GetUserStateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUserStateResponse_UserStateInfo_descriptor_, &GetUserStateResponse_UserStateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUserInfoFromPresence_descriptor_, &GetUserInfoFromPresence::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperUserFriendRequestFromPresence_descriptor_, &OperUserFriendRequestFromPresence::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageTransferRequest_descriptor_, &MessageTransferRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageTransferResponse_descriptor_, &MessageTransferResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KickUserRequest_descriptor_, &KickUserRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_presence_2eproto() {
  delete ChgUserInfoRequset::default_instance_;
  delete ChgUserInfoRequset_reflection_;
  delete ChgUserInfoNotify::default_instance_;
  delete ChgUserInfoNotify_reflection_;
  delete GetUserStateRequset::default_instance_;
  delete GetUserStateRequset_reflection_;
  delete GetUserStateResponse::default_instance_;
  delete GetUserStateResponse_reflection_;
  delete GetUserStateResponse_UserStateInfo::default_instance_;
  delete GetUserStateResponse_UserStateInfo_reflection_;
  delete GetUserInfoFromPresence::default_instance_;
  delete GetUserInfoFromPresence_reflection_;
  delete OperUserFriendRequestFromPresence::default_instance_;
  delete OperUserFriendRequestFromPresence_reflection_;
  delete MessageTransferRequest::default_instance_;
  delete MessageTransferRequest_reflection_;
  delete MessageTransferResponse::default_instance_;
  delete MessageTransferResponse_reflection_;
  delete KickUserRequest::default_instance_;
  delete KickUserRequest_reflection_;
}

void protobuf_AddDesc_presence_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016presence.proto\022\013tt_presence\"\207\002\n\022ChgUse"
    "rInfoRequset\022\017\n\007user_id\030\001 \002(\004\022\021\n\tacc_ide"
    "nt\030\002 \001(\t\022\023\n\013trans_ident\030\003 \001(\t\022\021\n\tis_came"
    "ra\030\004 \001(\010\022\r\n\005ttype\030\005 \001(\r\022=\n\nuser_state\030\006 "
    "\001(\0162\026.tt_presence.UserState:\021USER_STATE_"
    "ONLINE\022B\n\010msg_type\030\007 \001(\0162 .tt_presence.U"
    "serInfoMessageType:\016MSG_TYPE_STATE\022\023\n\013ms"
    "g_content\030\010 \001(\t\"\363\001\n\021ChgUserInfoNotify\022\017\n"
    "\007user_id\030\001 \002(\004\022B\n\010msg_type\030\002 \001(\0162 .tt_pr"
    "esence.UserInfoMessageType:\016MSG_TYPE_STA"
    "TE\022*\n\nuser_state\030\003 \001(\0162\026.tt_presence.Use"
    "rState\022\021\n\tis_camera\030\004 \001(\010\022\023\n\013trans_ident"
    "\030\005 \001(\t\022\r\n\005ttype\030\006 \001(\r\022\023\n\013msg_content\030\007 \001"
    "(\t\022\021\n\tuser_list\030\010 \003(\004\"(\n\023GetUserStateReq"
    "uset\022\021\n\tuser_list\030\005 \003(\004\"\363\001\n\024GetUserState"
    "Response\022B\n\tuser_list\030\001 \003(\0132/.tt_presenc"
    "e.GetUserStateResponse.UserStateInfo\032\226\001\n"
    "\rUserStateInfo\022\017\n\007user_id\030\001 \002(\004\022=\n\nuser_"
    "state\030\002 \001(\0162\026.tt_presence.UserState:\021USE"
    "R_STATE_ONLINE\022\023\n\013trans_ident\030\003 \001(\t\022\021\n\ti"
    "s_camera\030\004 \001(\010\022\r\n\005ttype\030\005 \001(\r\"\371\001\n\027GetUse"
    "rInfoFromPresence\022\017\n\007user_id\030\001 \002(\004\022B\n\010ms"
    "g_type\030\002 \001(\0162 .tt_presence.UserInfoMessa"
    "geType:\016MSG_TYPE_STATE\022*\n\nuser_state\030\003 \001"
    "(\0162\026.tt_presence.UserState\022\021\n\tis_camera\030"
    "\004 \001(\010\022\r\n\005ttype\030\005 \001(\r\022\023\n\013trans_ident\030\006 \001("
    "\t\022\023\n\013msg_content\030\007 \001(\t\022\021\n\tuser_list\030\010 \003("
    "\004\"b\n!OperUserFriendRequestFromPresence\022\017"
    "\n\007from_id\030\001 \002(\004\022\r\n\005to_id\030\002 \002(\004\022\014\n\004type\030\003"
    " \002(\r\022\017\n\007content\030\004 \002(\t\"W\n\026MessageTransfer"
    "Request\022\017\n\007from_id\030\001 \002(\004\022\r\n\005to_id\030\002 \002(\004\022"
    "\014\n\004type\030\003 \002(\r\022\017\n\007content\030\004 \002(\t\")\n\027Messag"
    "eTransferResponse\022\016\n\006online\030\001 \002(\010\"D\n\017Kic"
    "kUserRequest\022\017\n\007user_id\030\001 \002(\004\022\021\n\tacc_ide"
    "nt\030\002 \001(\t\022\r\n\005ttype\030\003 \001(\r*j\n\023UserInfoMessa"
    "geType\022\022\n\016MSG_TYPE_STATE\020\000\022\025\n\021MSG_TYPE_N"
    "ICKNAME\020\001\022\026\n\022MSG_TYPE_SIGNATURE\020\002\022\020\n\014MSG"
    "_TYPE_MAX\020\003*\224\001\n\tUserState\022\025\n\021USER_STATE_"
    "ONLINE\020\000\022\025\n\021USER_STATE_CORBET\020\001\022\024\n\020USER_"
    "STATE_LEAVE\020\002\022\023\n\017USER_STATE_BUSY\020\003\022\026\n\022US"
    "ER_STATE_GAMEING\020\004\022\026\n\022USER_STATE_OFFLINE"
    "\020\005", 1642);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "presence.proto", &protobuf_RegisterTypes);
  ChgUserInfoRequset::default_instance_ = new ChgUserInfoRequset();
  ChgUserInfoNotify::default_instance_ = new ChgUserInfoNotify();
  GetUserStateRequset::default_instance_ = new GetUserStateRequset();
  GetUserStateResponse::default_instance_ = new GetUserStateResponse();
  GetUserStateResponse_UserStateInfo::default_instance_ = new GetUserStateResponse_UserStateInfo();
  GetUserInfoFromPresence::default_instance_ = new GetUserInfoFromPresence();
  OperUserFriendRequestFromPresence::default_instance_ = new OperUserFriendRequestFromPresence();
  MessageTransferRequest::default_instance_ = new MessageTransferRequest();
  MessageTransferResponse::default_instance_ = new MessageTransferResponse();
  KickUserRequest::default_instance_ = new KickUserRequest();
  ChgUserInfoRequset::default_instance_->InitAsDefaultInstance();
  ChgUserInfoNotify::default_instance_->InitAsDefaultInstance();
  GetUserStateRequset::default_instance_->InitAsDefaultInstance();
  GetUserStateResponse::default_instance_->InitAsDefaultInstance();
  GetUserStateResponse_UserStateInfo::default_instance_->InitAsDefaultInstance();
  GetUserInfoFromPresence::default_instance_->InitAsDefaultInstance();
  OperUserFriendRequestFromPresence::default_instance_->InitAsDefaultInstance();
  MessageTransferRequest::default_instance_->InitAsDefaultInstance();
  MessageTransferResponse::default_instance_->InitAsDefaultInstance();
  KickUserRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_presence_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_presence_2eproto {
  StaticDescriptorInitializer_presence_2eproto() {
    protobuf_AddDesc_presence_2eproto();
  }
} static_descriptor_initializer_presence_2eproto_;
const ::google::protobuf::EnumDescriptor* UserInfoMessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfoMessageType_descriptor_;
}
bool UserInfoMessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UserState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserState_descriptor_;
}
bool UserState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ChgUserInfoRequset::kUserIdFieldNumber;
const int ChgUserInfoRequset::kAccIdentFieldNumber;
const int ChgUserInfoRequset::kTransIdentFieldNumber;
const int ChgUserInfoRequset::kIsCameraFieldNumber;
const int ChgUserInfoRequset::kTtypeFieldNumber;
const int ChgUserInfoRequset::kUserStateFieldNumber;
const int ChgUserInfoRequset::kMsgTypeFieldNumber;
const int ChgUserInfoRequset::kMsgContentFieldNumber;
#endif  // !_MSC_VER

ChgUserInfoRequset::ChgUserInfoRequset()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_presence.ChgUserInfoRequset)
}

void ChgUserInfoRequset::InitAsDefaultInstance() {
}

ChgUserInfoRequset::ChgUserInfoRequset(const ChgUserInfoRequset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_presence.ChgUserInfoRequset)
}

void ChgUserInfoRequset::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  acc_ident_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trans_ident_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_camera_ = false;
  ttype_ = 0u;
  user_state_ = 0;
  msg_type_ = 0;
  msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChgUserInfoRequset::~ChgUserInfoRequset() {
  // @@protoc_insertion_point(destructor:tt_presence.ChgUserInfoRequset)
  SharedDtor();
}

void ChgUserInfoRequset::SharedDtor() {
  if (acc_ident_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete acc_ident_;
  }
  if (trans_ident_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete trans_ident_;
  }
  if (msg_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_content_;
  }
  if (this != default_instance_) {
  }
}

void ChgUserInfoRequset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChgUserInfoRequset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChgUserInfoRequset_descriptor_;
}

const ChgUserInfoRequset& ChgUserInfoRequset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_presence_2eproto();
  return *default_instance_;
}

ChgUserInfoRequset* ChgUserInfoRequset::default_instance_ = NULL;

ChgUserInfoRequset* ChgUserInfoRequset::New() const {
  return new ChgUserInfoRequset;
}

void ChgUserInfoRequset::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChgUserInfoRequset*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(is_camera_, msg_type_);
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_acc_ident()) {
      if (acc_ident_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        acc_ident_->clear();
      }
    }
    if (has_trans_ident()) {
      if (trans_ident_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        trans_ident_->clear();
      }
    }
    if (has_msg_content()) {
      if (msg_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_content_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChgUserInfoRequset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_presence.ChgUserInfoRequset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_acc_ident;
        break;
      }

      // optional string acc_ident = 2;
      case 2: {
        if (tag == 18) {
         parse_acc_ident:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acc_ident()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->acc_ident().data(), this->acc_ident().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "acc_ident");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_trans_ident;
        break;
      }

      // optional string trans_ident = 3;
      case 3: {
        if (tag == 26) {
         parse_trans_ident:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trans_ident()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trans_ident().data(), this->trans_ident().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "trans_ident");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_camera;
        break;
      }

      // optional bool is_camera = 4;
      case 4: {
        if (tag == 32) {
         parse_is_camera:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_camera_)));
          set_has_is_camera();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ttype;
        break;
      }

      // optional uint32 ttype = 5;
      case 5: {
        if (tag == 40) {
         parse_ttype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ttype_)));
          set_has_ttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_user_state;
        break;
      }

      // optional .tt_presence.UserState user_state = 6 [default = USER_STATE_ONLINE];
      case 6: {
        if (tag == 48) {
         parse_user_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tt_presence::UserState_IsValid(value)) {
            set_user_state(static_cast< ::tt_presence::UserState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_msg_type;
        break;
      }

      // optional .tt_presence.UserInfoMessageType msg_type = 7 [default = MSG_TYPE_STATE];
      case 7: {
        if (tag == 56) {
         parse_msg_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tt_presence::UserInfoMessageType_IsValid(value)) {
            set_msg_type(static_cast< ::tt_presence::UserInfoMessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_msg_content;
        break;
      }

      // optional string msg_content = 8;
      case 8: {
        if (tag == 66) {
         parse_msg_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg_content().data(), this->msg_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tt_presence.ChgUserInfoRequset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_presence.ChgUserInfoRequset)
  return false;
#undef DO_
}

void ChgUserInfoRequset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_presence.ChgUserInfoRequset)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional string acc_ident = 2;
  if (has_acc_ident()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->acc_ident().data(), this->acc_ident().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acc_ident");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->acc_ident(), output);
  }

  // optional string trans_ident = 3;
  if (has_trans_ident()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trans_ident().data(), this->trans_ident().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "trans_ident");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->trans_ident(), output);
  }

  // optional bool is_camera = 4;
  if (has_is_camera()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_camera(), output);
  }

  // optional uint32 ttype = 5;
  if (has_ttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ttype(), output);
  }

  // optional .tt_presence.UserState user_state = 6 [default = USER_STATE_ONLINE];
  if (has_user_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->user_state(), output);
  }

  // optional .tt_presence.UserInfoMessageType msg_type = 7 [default = MSG_TYPE_STATE];
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->msg_type(), output);
  }

  // optional string msg_content = 8;
  if (has_msg_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg_content().data(), this->msg_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->msg_content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_presence.ChgUserInfoRequset)
}

::google::protobuf::uint8* ChgUserInfoRequset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_presence.ChgUserInfoRequset)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional string acc_ident = 2;
  if (has_acc_ident()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->acc_ident().data(), this->acc_ident().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acc_ident");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->acc_ident(), target);
  }

  // optional string trans_ident = 3;
  if (has_trans_ident()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trans_ident().data(), this->trans_ident().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "trans_ident");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->trans_ident(), target);
  }

  // optional bool is_camera = 4;
  if (has_is_camera()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_camera(), target);
  }

  // optional uint32 ttype = 5;
  if (has_ttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ttype(), target);
  }

  // optional .tt_presence.UserState user_state = 6 [default = USER_STATE_ONLINE];
  if (has_user_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->user_state(), target);
  }

  // optional .tt_presence.UserInfoMessageType msg_type = 7 [default = MSG_TYPE_STATE];
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->msg_type(), target);
  }

  // optional string msg_content = 8;
  if (has_msg_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg_content().data(), this->msg_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->msg_content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_presence.ChgUserInfoRequset)
  return target;
}

int ChgUserInfoRequset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string acc_ident = 2;
    if (has_acc_ident()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acc_ident());
    }

    // optional string trans_ident = 3;
    if (has_trans_ident()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trans_ident());
    }

    // optional bool is_camera = 4;
    if (has_is_camera()) {
      total_size += 1 + 1;
    }

    // optional uint32 ttype = 5;
    if (has_ttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ttype());
    }

    // optional .tt_presence.UserState user_state = 6 [default = USER_STATE_ONLINE];
    if (has_user_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->user_state());
    }

    // optional .tt_presence.UserInfoMessageType msg_type = 7 [default = MSG_TYPE_STATE];
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
    }

    // optional string msg_content = 8;
    if (has_msg_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChgUserInfoRequset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChgUserInfoRequset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChgUserInfoRequset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChgUserInfoRequset::MergeFrom(const ChgUserInfoRequset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_acc_ident()) {
      set_acc_ident(from.acc_ident());
    }
    if (from.has_trans_ident()) {
      set_trans_ident(from.trans_ident());
    }
    if (from.has_is_camera()) {
      set_is_camera(from.is_camera());
    }
    if (from.has_ttype()) {
      set_ttype(from.ttype());
    }
    if (from.has_user_state()) {
      set_user_state(from.user_state());
    }
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_msg_content()) {
      set_msg_content(from.msg_content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChgUserInfoRequset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChgUserInfoRequset::CopyFrom(const ChgUserInfoRequset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChgUserInfoRequset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ChgUserInfoRequset::Swap(ChgUserInfoRequset* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(acc_ident_, other->acc_ident_);
    std::swap(trans_ident_, other->trans_ident_);
    std::swap(is_camera_, other->is_camera_);
    std::swap(ttype_, other->ttype_);
    std::swap(user_state_, other->user_state_);
    std::swap(msg_type_, other->msg_type_);
    std::swap(msg_content_, other->msg_content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChgUserInfoRequset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChgUserInfoRequset_descriptor_;
  metadata.reflection = ChgUserInfoRequset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChgUserInfoNotify::kUserIdFieldNumber;
const int ChgUserInfoNotify::kMsgTypeFieldNumber;
const int ChgUserInfoNotify::kUserStateFieldNumber;
const int ChgUserInfoNotify::kIsCameraFieldNumber;
const int ChgUserInfoNotify::kTransIdentFieldNumber;
const int ChgUserInfoNotify::kTtypeFieldNumber;
const int ChgUserInfoNotify::kMsgContentFieldNumber;
const int ChgUserInfoNotify::kUserListFieldNumber;
#endif  // !_MSC_VER

ChgUserInfoNotify::ChgUserInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_presence.ChgUserInfoNotify)
}

void ChgUserInfoNotify::InitAsDefaultInstance() {
}

ChgUserInfoNotify::ChgUserInfoNotify(const ChgUserInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_presence.ChgUserInfoNotify)
}

void ChgUserInfoNotify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  msg_type_ = 0;
  user_state_ = 0;
  is_camera_ = false;
  trans_ident_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ttype_ = 0u;
  msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChgUserInfoNotify::~ChgUserInfoNotify() {
  // @@protoc_insertion_point(destructor:tt_presence.ChgUserInfoNotify)
  SharedDtor();
}

void ChgUserInfoNotify::SharedDtor() {
  if (trans_ident_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete trans_ident_;
  }
  if (msg_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_content_;
  }
  if (this != default_instance_) {
  }
}

void ChgUserInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChgUserInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChgUserInfoNotify_descriptor_;
}

const ChgUserInfoNotify& ChgUserInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_presence_2eproto();
  return *default_instance_;
}

ChgUserInfoNotify* ChgUserInfoNotify::default_instance_ = NULL;

ChgUserInfoNotify* ChgUserInfoNotify::New() const {
  return new ChgUserInfoNotify;
}

void ChgUserInfoNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChgUserInfoNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(user_id_, user_state_);
    ZR_(is_camera_, ttype_);
    if (has_trans_ident()) {
      if (trans_ident_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        trans_ident_->clear();
      }
    }
    if (has_msg_content()) {
      if (msg_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_content_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  user_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChgUserInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_presence.ChgUserInfoNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msg_type;
        break;
      }

      // optional .tt_presence.UserInfoMessageType msg_type = 2 [default = MSG_TYPE_STATE];
      case 2: {
        if (tag == 16) {
         parse_msg_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tt_presence::UserInfoMessageType_IsValid(value)) {
            set_msg_type(static_cast< ::tt_presence::UserInfoMessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_user_state;
        break;
      }

      // optional .tt_presence.UserState user_state = 3;
      case 3: {
        if (tag == 24) {
         parse_user_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tt_presence::UserState_IsValid(value)) {
            set_user_state(static_cast< ::tt_presence::UserState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_camera;
        break;
      }

      // optional bool is_camera = 4;
      case 4: {
        if (tag == 32) {
         parse_is_camera:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_camera_)));
          set_has_is_camera();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_trans_ident;
        break;
      }

      // optional string trans_ident = 5;
      case 5: {
        if (tag == 42) {
         parse_trans_ident:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trans_ident()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trans_ident().data(), this->trans_ident().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "trans_ident");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ttype;
        break;
      }

      // optional uint32 ttype = 6;
      case 6: {
        if (tag == 48) {
         parse_ttype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ttype_)));
          set_has_ttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_msg_content;
        break;
      }

      // optional string msg_content = 7;
      case 7: {
        if (tag == 58) {
         parse_msg_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg_content().data(), this->msg_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_user_list;
        break;
      }

      // repeated uint64 user_list = 8;
      case 8: {
        if (tag == 64) {
         parse_user_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 64, input, this->mutable_user_list())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_user_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_user_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tt_presence.ChgUserInfoNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_presence.ChgUserInfoNotify)
  return false;
#undef DO_
}

void ChgUserInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_presence.ChgUserInfoNotify)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional .tt_presence.UserInfoMessageType msg_type = 2 [default = MSG_TYPE_STATE];
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msg_type(), output);
  }

  // optional .tt_presence.UserState user_state = 3;
  if (has_user_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->user_state(), output);
  }

  // optional bool is_camera = 4;
  if (has_is_camera()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_camera(), output);
  }

  // optional string trans_ident = 5;
  if (has_trans_ident()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trans_ident().data(), this->trans_ident().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "trans_ident");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->trans_ident(), output);
  }

  // optional uint32 ttype = 6;
  if (has_ttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ttype(), output);
  }

  // optional string msg_content = 7;
  if (has_msg_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg_content().data(), this->msg_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->msg_content(), output);
  }

  // repeated uint64 user_list = 8;
  for (int i = 0; i < this->user_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      8, this->user_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_presence.ChgUserInfoNotify)
}

::google::protobuf::uint8* ChgUserInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_presence.ChgUserInfoNotify)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional .tt_presence.UserInfoMessageType msg_type = 2 [default = MSG_TYPE_STATE];
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msg_type(), target);
  }

  // optional .tt_presence.UserState user_state = 3;
  if (has_user_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->user_state(), target);
  }

  // optional bool is_camera = 4;
  if (has_is_camera()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_camera(), target);
  }

  // optional string trans_ident = 5;
  if (has_trans_ident()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trans_ident().data(), this->trans_ident().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "trans_ident");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->trans_ident(), target);
  }

  // optional uint32 ttype = 6;
  if (has_ttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ttype(), target);
  }

  // optional string msg_content = 7;
  if (has_msg_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg_content().data(), this->msg_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->msg_content(), target);
  }

  // repeated uint64 user_list = 8;
  for (int i = 0; i < this->user_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(8, this->user_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_presence.ChgUserInfoNotify)
  return target;
}

int ChgUserInfoNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional .tt_presence.UserInfoMessageType msg_type = 2 [default = MSG_TYPE_STATE];
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
    }

    // optional .tt_presence.UserState user_state = 3;
    if (has_user_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->user_state());
    }

    // optional bool is_camera = 4;
    if (has_is_camera()) {
      total_size += 1 + 1;
    }

    // optional string trans_ident = 5;
    if (has_trans_ident()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trans_ident());
    }

    // optional uint32 ttype = 6;
    if (has_ttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ttype());
    }

    // optional string msg_content = 7;
    if (has_msg_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_content());
    }

  }
  // repeated uint64 user_list = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->user_list(i));
    }
    total_size += 1 * this->user_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChgUserInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChgUserInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChgUserInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChgUserInfoNotify::MergeFrom(const ChgUserInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_list_.MergeFrom(from.user_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_user_state()) {
      set_user_state(from.user_state());
    }
    if (from.has_is_camera()) {
      set_is_camera(from.is_camera());
    }
    if (from.has_trans_ident()) {
      set_trans_ident(from.trans_ident());
    }
    if (from.has_ttype()) {
      set_ttype(from.ttype());
    }
    if (from.has_msg_content()) {
      set_msg_content(from.msg_content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChgUserInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChgUserInfoNotify::CopyFrom(const ChgUserInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChgUserInfoNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ChgUserInfoNotify::Swap(ChgUserInfoNotify* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(msg_type_, other->msg_type_);
    std::swap(user_state_, other->user_state_);
    std::swap(is_camera_, other->is_camera_);
    std::swap(trans_ident_, other->trans_ident_);
    std::swap(ttype_, other->ttype_);
    std::swap(msg_content_, other->msg_content_);
    user_list_.Swap(&other->user_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChgUserInfoNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChgUserInfoNotify_descriptor_;
  metadata.reflection = ChgUserInfoNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserStateRequset::kUserListFieldNumber;
#endif  // !_MSC_VER

GetUserStateRequset::GetUserStateRequset()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_presence.GetUserStateRequset)
}

void GetUserStateRequset::InitAsDefaultInstance() {
}

GetUserStateRequset::GetUserStateRequset(const GetUserStateRequset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_presence.GetUserStateRequset)
}

void GetUserStateRequset::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserStateRequset::~GetUserStateRequset() {
  // @@protoc_insertion_point(destructor:tt_presence.GetUserStateRequset)
  SharedDtor();
}

void GetUserStateRequset::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetUserStateRequset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUserStateRequset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUserStateRequset_descriptor_;
}

const GetUserStateRequset& GetUserStateRequset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_presence_2eproto();
  return *default_instance_;
}

GetUserStateRequset* GetUserStateRequset::default_instance_ = NULL;

GetUserStateRequset* GetUserStateRequset::New() const {
  return new GetUserStateRequset;
}

void GetUserStateRequset::Clear() {
  user_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUserStateRequset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_presence.GetUserStateRequset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 user_list = 5;
      case 5: {
        if (tag == 40) {
         parse_user_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_user_list())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_user_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_user_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tt_presence.GetUserStateRequset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_presence.GetUserStateRequset)
  return false;
#undef DO_
}

void GetUserStateRequset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_presence.GetUserStateRequset)
  // repeated uint64 user_list = 5;
  for (int i = 0; i < this->user_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->user_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_presence.GetUserStateRequset)
}

::google::protobuf::uint8* GetUserStateRequset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_presence.GetUserStateRequset)
  // repeated uint64 user_list = 5;
  for (int i = 0; i < this->user_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->user_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_presence.GetUserStateRequset)
  return target;
}

int GetUserStateRequset::ByteSize() const {
  int total_size = 0;

  // repeated uint64 user_list = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->user_list(i));
    }
    total_size += 1 * this->user_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserStateRequset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUserStateRequset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUserStateRequset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUserStateRequset::MergeFrom(const GetUserStateRequset& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_list_.MergeFrom(from.user_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUserStateRequset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserStateRequset::CopyFrom(const GetUserStateRequset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserStateRequset::IsInitialized() const {

  return true;
}

void GetUserStateRequset::Swap(GetUserStateRequset* other) {
  if (other != this) {
    user_list_.Swap(&other->user_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUserStateRequset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUserStateRequset_descriptor_;
  metadata.reflection = GetUserStateRequset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserStateResponse_UserStateInfo::kUserIdFieldNumber;
const int GetUserStateResponse_UserStateInfo::kUserStateFieldNumber;
const int GetUserStateResponse_UserStateInfo::kTransIdentFieldNumber;
const int GetUserStateResponse_UserStateInfo::kIsCameraFieldNumber;
const int GetUserStateResponse_UserStateInfo::kTtypeFieldNumber;
#endif  // !_MSC_VER

GetUserStateResponse_UserStateInfo::GetUserStateResponse_UserStateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_presence.GetUserStateResponse.UserStateInfo)
}

void GetUserStateResponse_UserStateInfo::InitAsDefaultInstance() {
}

GetUserStateResponse_UserStateInfo::GetUserStateResponse_UserStateInfo(const GetUserStateResponse_UserStateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_presence.GetUserStateResponse.UserStateInfo)
}

void GetUserStateResponse_UserStateInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  user_state_ = 0;
  trans_ident_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_camera_ = false;
  ttype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserStateResponse_UserStateInfo::~GetUserStateResponse_UserStateInfo() {
  // @@protoc_insertion_point(destructor:tt_presence.GetUserStateResponse.UserStateInfo)
  SharedDtor();
}

void GetUserStateResponse_UserStateInfo::SharedDtor() {
  if (trans_ident_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete trans_ident_;
  }
  if (this != default_instance_) {
  }
}

void GetUserStateResponse_UserStateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUserStateResponse_UserStateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUserStateResponse_UserStateInfo_descriptor_;
}

const GetUserStateResponse_UserStateInfo& GetUserStateResponse_UserStateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_presence_2eproto();
  return *default_instance_;
}

GetUserStateResponse_UserStateInfo* GetUserStateResponse_UserStateInfo::default_instance_ = NULL;

GetUserStateResponse_UserStateInfo* GetUserStateResponse_UserStateInfo::New() const {
  return new GetUserStateResponse_UserStateInfo;
}

void GetUserStateResponse_UserStateInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetUserStateResponse_UserStateInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(user_state_, ttype_);
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_trans_ident()) {
      if (trans_ident_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        trans_ident_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUserStateResponse_UserStateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_presence.GetUserStateResponse.UserStateInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_state;
        break;
      }

      // optional .tt_presence.UserState user_state = 2 [default = USER_STATE_ONLINE];
      case 2: {
        if (tag == 16) {
         parse_user_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tt_presence::UserState_IsValid(value)) {
            set_user_state(static_cast< ::tt_presence::UserState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_trans_ident;
        break;
      }

      // optional string trans_ident = 3;
      case 3: {
        if (tag == 26) {
         parse_trans_ident:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trans_ident()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trans_ident().data(), this->trans_ident().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "trans_ident");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_camera;
        break;
      }

      // optional bool is_camera = 4;
      case 4: {
        if (tag == 32) {
         parse_is_camera:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_camera_)));
          set_has_is_camera();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ttype;
        break;
      }

      // optional uint32 ttype = 5;
      case 5: {
        if (tag == 40) {
         parse_ttype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ttype_)));
          set_has_ttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tt_presence.GetUserStateResponse.UserStateInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_presence.GetUserStateResponse.UserStateInfo)
  return false;
#undef DO_
}

void GetUserStateResponse_UserStateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_presence.GetUserStateResponse.UserStateInfo)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional .tt_presence.UserState user_state = 2 [default = USER_STATE_ONLINE];
  if (has_user_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->user_state(), output);
  }

  // optional string trans_ident = 3;
  if (has_trans_ident()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trans_ident().data(), this->trans_ident().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "trans_ident");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->trans_ident(), output);
  }

  // optional bool is_camera = 4;
  if (has_is_camera()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_camera(), output);
  }

  // optional uint32 ttype = 5;
  if (has_ttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ttype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_presence.GetUserStateResponse.UserStateInfo)
}

::google::protobuf::uint8* GetUserStateResponse_UserStateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_presence.GetUserStateResponse.UserStateInfo)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional .tt_presence.UserState user_state = 2 [default = USER_STATE_ONLINE];
  if (has_user_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->user_state(), target);
  }

  // optional string trans_ident = 3;
  if (has_trans_ident()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trans_ident().data(), this->trans_ident().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "trans_ident");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->trans_ident(), target);
  }

  // optional bool is_camera = 4;
  if (has_is_camera()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_camera(), target);
  }

  // optional uint32 ttype = 5;
  if (has_ttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ttype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_presence.GetUserStateResponse.UserStateInfo)
  return target;
}

int GetUserStateResponse_UserStateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional .tt_presence.UserState user_state = 2 [default = USER_STATE_ONLINE];
    if (has_user_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->user_state());
    }

    // optional string trans_ident = 3;
    if (has_trans_ident()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trans_ident());
    }

    // optional bool is_camera = 4;
    if (has_is_camera()) {
      total_size += 1 + 1;
    }

    // optional uint32 ttype = 5;
    if (has_ttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ttype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserStateResponse_UserStateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUserStateResponse_UserStateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUserStateResponse_UserStateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUserStateResponse_UserStateInfo::MergeFrom(const GetUserStateResponse_UserStateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_state()) {
      set_user_state(from.user_state());
    }
    if (from.has_trans_ident()) {
      set_trans_ident(from.trans_ident());
    }
    if (from.has_is_camera()) {
      set_is_camera(from.is_camera());
    }
    if (from.has_ttype()) {
      set_ttype(from.ttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUserStateResponse_UserStateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserStateResponse_UserStateInfo::CopyFrom(const GetUserStateResponse_UserStateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserStateResponse_UserStateInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetUserStateResponse_UserStateInfo::Swap(GetUserStateResponse_UserStateInfo* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(user_state_, other->user_state_);
    std::swap(trans_ident_, other->trans_ident_);
    std::swap(is_camera_, other->is_camera_);
    std::swap(ttype_, other->ttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUserStateResponse_UserStateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUserStateResponse_UserStateInfo_descriptor_;
  metadata.reflection = GetUserStateResponse_UserStateInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GetUserStateResponse::kUserListFieldNumber;
#endif  // !_MSC_VER

GetUserStateResponse::GetUserStateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_presence.GetUserStateResponse)
}

void GetUserStateResponse::InitAsDefaultInstance() {
}

GetUserStateResponse::GetUserStateResponse(const GetUserStateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_presence.GetUserStateResponse)
}

void GetUserStateResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserStateResponse::~GetUserStateResponse() {
  // @@protoc_insertion_point(destructor:tt_presence.GetUserStateResponse)
  SharedDtor();
}

void GetUserStateResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetUserStateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUserStateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUserStateResponse_descriptor_;
}

const GetUserStateResponse& GetUserStateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_presence_2eproto();
  return *default_instance_;
}

GetUserStateResponse* GetUserStateResponse::default_instance_ = NULL;

GetUserStateResponse* GetUserStateResponse::New() const {
  return new GetUserStateResponse;
}

void GetUserStateResponse::Clear() {
  user_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUserStateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_presence.GetUserStateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tt_presence.GetUserStateResponse.UserStateInfo user_list = 1;
      case 1: {
        if (tag == 10) {
         parse_user_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_user_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tt_presence.GetUserStateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_presence.GetUserStateResponse)
  return false;
#undef DO_
}

void GetUserStateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_presence.GetUserStateResponse)
  // repeated .tt_presence.GetUserStateResponse.UserStateInfo user_list = 1;
  for (int i = 0; i < this->user_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_presence.GetUserStateResponse)
}

::google::protobuf::uint8* GetUserStateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_presence.GetUserStateResponse)
  // repeated .tt_presence.GetUserStateResponse.UserStateInfo user_list = 1;
  for (int i = 0; i < this->user_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_presence.GetUserStateResponse)
  return target;
}

int GetUserStateResponse::ByteSize() const {
  int total_size = 0;

  // repeated .tt_presence.GetUserStateResponse.UserStateInfo user_list = 1;
  total_size += 1 * this->user_list_size();
  for (int i = 0; i < this->user_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserStateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUserStateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUserStateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUserStateResponse::MergeFrom(const GetUserStateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_list_.MergeFrom(from.user_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUserStateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserStateResponse::CopyFrom(const GetUserStateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserStateResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->user_list())) return false;
  return true;
}

void GetUserStateResponse::Swap(GetUserStateResponse* other) {
  if (other != this) {
    user_list_.Swap(&other->user_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUserStateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUserStateResponse_descriptor_;
  metadata.reflection = GetUserStateResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserInfoFromPresence::kUserIdFieldNumber;
const int GetUserInfoFromPresence::kMsgTypeFieldNumber;
const int GetUserInfoFromPresence::kUserStateFieldNumber;
const int GetUserInfoFromPresence::kIsCameraFieldNumber;
const int GetUserInfoFromPresence::kTtypeFieldNumber;
const int GetUserInfoFromPresence::kTransIdentFieldNumber;
const int GetUserInfoFromPresence::kMsgContentFieldNumber;
const int GetUserInfoFromPresence::kUserListFieldNumber;
#endif  // !_MSC_VER

GetUserInfoFromPresence::GetUserInfoFromPresence()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_presence.GetUserInfoFromPresence)
}

void GetUserInfoFromPresence::InitAsDefaultInstance() {
}

GetUserInfoFromPresence::GetUserInfoFromPresence(const GetUserInfoFromPresence& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_presence.GetUserInfoFromPresence)
}

void GetUserInfoFromPresence::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  msg_type_ = 0;
  user_state_ = 0;
  is_camera_ = false;
  ttype_ = 0u;
  trans_ident_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserInfoFromPresence::~GetUserInfoFromPresence() {
  // @@protoc_insertion_point(destructor:tt_presence.GetUserInfoFromPresence)
  SharedDtor();
}

void GetUserInfoFromPresence::SharedDtor() {
  if (trans_ident_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete trans_ident_;
  }
  if (msg_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_content_;
  }
  if (this != default_instance_) {
  }
}

void GetUserInfoFromPresence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUserInfoFromPresence::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUserInfoFromPresence_descriptor_;
}

const GetUserInfoFromPresence& GetUserInfoFromPresence::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_presence_2eproto();
  return *default_instance_;
}

GetUserInfoFromPresence* GetUserInfoFromPresence::default_instance_ = NULL;

GetUserInfoFromPresence* GetUserInfoFromPresence::New() const {
  return new GetUserInfoFromPresence;
}

void GetUserInfoFromPresence::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetUserInfoFromPresence*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(user_id_, ttype_);
    if (has_trans_ident()) {
      if (trans_ident_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        trans_ident_->clear();
      }
    }
    if (has_msg_content()) {
      if (msg_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_content_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  user_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUserInfoFromPresence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_presence.GetUserInfoFromPresence)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msg_type;
        break;
      }

      // optional .tt_presence.UserInfoMessageType msg_type = 2 [default = MSG_TYPE_STATE];
      case 2: {
        if (tag == 16) {
         parse_msg_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tt_presence::UserInfoMessageType_IsValid(value)) {
            set_msg_type(static_cast< ::tt_presence::UserInfoMessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_user_state;
        break;
      }

      // optional .tt_presence.UserState user_state = 3;
      case 3: {
        if (tag == 24) {
         parse_user_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tt_presence::UserState_IsValid(value)) {
            set_user_state(static_cast< ::tt_presence::UserState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_camera;
        break;
      }

      // optional bool is_camera = 4;
      case 4: {
        if (tag == 32) {
         parse_is_camera:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_camera_)));
          set_has_is_camera();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ttype;
        break;
      }

      // optional uint32 ttype = 5;
      case 5: {
        if (tag == 40) {
         parse_ttype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ttype_)));
          set_has_ttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_trans_ident;
        break;
      }

      // optional string trans_ident = 6;
      case 6: {
        if (tag == 50) {
         parse_trans_ident:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trans_ident()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trans_ident().data(), this->trans_ident().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "trans_ident");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_msg_content;
        break;
      }

      // optional string msg_content = 7;
      case 7: {
        if (tag == 58) {
         parse_msg_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg_content().data(), this->msg_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_user_list;
        break;
      }

      // repeated uint64 user_list = 8;
      case 8: {
        if (tag == 64) {
         parse_user_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 64, input, this->mutable_user_list())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_user_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_user_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tt_presence.GetUserInfoFromPresence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_presence.GetUserInfoFromPresence)
  return false;
#undef DO_
}

void GetUserInfoFromPresence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_presence.GetUserInfoFromPresence)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional .tt_presence.UserInfoMessageType msg_type = 2 [default = MSG_TYPE_STATE];
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msg_type(), output);
  }

  // optional .tt_presence.UserState user_state = 3;
  if (has_user_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->user_state(), output);
  }

  // optional bool is_camera = 4;
  if (has_is_camera()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_camera(), output);
  }

  // optional uint32 ttype = 5;
  if (has_ttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ttype(), output);
  }

  // optional string trans_ident = 6;
  if (has_trans_ident()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trans_ident().data(), this->trans_ident().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "trans_ident");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->trans_ident(), output);
  }

  // optional string msg_content = 7;
  if (has_msg_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg_content().data(), this->msg_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->msg_content(), output);
  }

  // repeated uint64 user_list = 8;
  for (int i = 0; i < this->user_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      8, this->user_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_presence.GetUserInfoFromPresence)
}

::google::protobuf::uint8* GetUserInfoFromPresence::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_presence.GetUserInfoFromPresence)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional .tt_presence.UserInfoMessageType msg_type = 2 [default = MSG_TYPE_STATE];
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msg_type(), target);
  }

  // optional .tt_presence.UserState user_state = 3;
  if (has_user_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->user_state(), target);
  }

  // optional bool is_camera = 4;
  if (has_is_camera()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_camera(), target);
  }

  // optional uint32 ttype = 5;
  if (has_ttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ttype(), target);
  }

  // optional string trans_ident = 6;
  if (has_trans_ident()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trans_ident().data(), this->trans_ident().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "trans_ident");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->trans_ident(), target);
  }

  // optional string msg_content = 7;
  if (has_msg_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg_content().data(), this->msg_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->msg_content(), target);
  }

  // repeated uint64 user_list = 8;
  for (int i = 0; i < this->user_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(8, this->user_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_presence.GetUserInfoFromPresence)
  return target;
}

int GetUserInfoFromPresence::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional .tt_presence.UserInfoMessageType msg_type = 2 [default = MSG_TYPE_STATE];
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
    }

    // optional .tt_presence.UserState user_state = 3;
    if (has_user_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->user_state());
    }

    // optional bool is_camera = 4;
    if (has_is_camera()) {
      total_size += 1 + 1;
    }

    // optional uint32 ttype = 5;
    if (has_ttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ttype());
    }

    // optional string trans_ident = 6;
    if (has_trans_ident()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trans_ident());
    }

    // optional string msg_content = 7;
    if (has_msg_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_content());
    }

  }
  // repeated uint64 user_list = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->user_list(i));
    }
    total_size += 1 * this->user_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserInfoFromPresence::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUserInfoFromPresence* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUserInfoFromPresence*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUserInfoFromPresence::MergeFrom(const GetUserInfoFromPresence& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_list_.MergeFrom(from.user_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_user_state()) {
      set_user_state(from.user_state());
    }
    if (from.has_is_camera()) {
      set_is_camera(from.is_camera());
    }
    if (from.has_ttype()) {
      set_ttype(from.ttype());
    }
    if (from.has_trans_ident()) {
      set_trans_ident(from.trans_ident());
    }
    if (from.has_msg_content()) {
      set_msg_content(from.msg_content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUserInfoFromPresence::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserInfoFromPresence::CopyFrom(const GetUserInfoFromPresence& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserInfoFromPresence::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetUserInfoFromPresence::Swap(GetUserInfoFromPresence* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(msg_type_, other->msg_type_);
    std::swap(user_state_, other->user_state_);
    std::swap(is_camera_, other->is_camera_);
    std::swap(ttype_, other->ttype_);
    std::swap(trans_ident_, other->trans_ident_);
    std::swap(msg_content_, other->msg_content_);
    user_list_.Swap(&other->user_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUserInfoFromPresence::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUserInfoFromPresence_descriptor_;
  metadata.reflection = GetUserInfoFromPresence_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperUserFriendRequestFromPresence::kFromIdFieldNumber;
const int OperUserFriendRequestFromPresence::kToIdFieldNumber;
const int OperUserFriendRequestFromPresence::kTypeFieldNumber;
const int OperUserFriendRequestFromPresence::kContentFieldNumber;
#endif  // !_MSC_VER

OperUserFriendRequestFromPresence::OperUserFriendRequestFromPresence()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_presence.OperUserFriendRequestFromPresence)
}

void OperUserFriendRequestFromPresence::InitAsDefaultInstance() {
}

OperUserFriendRequestFromPresence::OperUserFriendRequestFromPresence(const OperUserFriendRequestFromPresence& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_presence.OperUserFriendRequestFromPresence)
}

void OperUserFriendRequestFromPresence::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  from_id_ = GOOGLE_ULONGLONG(0);
  to_id_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperUserFriendRequestFromPresence::~OperUserFriendRequestFromPresence() {
  // @@protoc_insertion_point(destructor:tt_presence.OperUserFriendRequestFromPresence)
  SharedDtor();
}

void OperUserFriendRequestFromPresence::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void OperUserFriendRequestFromPresence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperUserFriendRequestFromPresence::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperUserFriendRequestFromPresence_descriptor_;
}

const OperUserFriendRequestFromPresence& OperUserFriendRequestFromPresence::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_presence_2eproto();
  return *default_instance_;
}

OperUserFriendRequestFromPresence* OperUserFriendRequestFromPresence::default_instance_ = NULL;

OperUserFriendRequestFromPresence* OperUserFriendRequestFromPresence::New() const {
  return new OperUserFriendRequestFromPresence;
}

void OperUserFriendRequestFromPresence::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OperUserFriendRequestFromPresence*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(from_id_, to_id_);
    type_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperUserFriendRequestFromPresence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_presence.OperUserFriendRequestFromPresence)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 from_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_id_)));
          set_has_from_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_to_id;
        break;
      }

      // required uint64 to_id = 2;
      case 2: {
        if (tag == 16) {
         parse_to_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_id_)));
          set_has_to_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required uint32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // required string content = 4;
      case 4: {
        if (tag == 34) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tt_presence.OperUserFriendRequestFromPresence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_presence.OperUserFriendRequestFromPresence)
  return false;
#undef DO_
}

void OperUserFriendRequestFromPresence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_presence.OperUserFriendRequestFromPresence)
  // required uint64 from_id = 1;
  if (has_from_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->from_id(), output);
  }

  // required uint64 to_id = 2;
  if (has_to_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->to_id(), output);
  }

  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // required string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_presence.OperUserFriendRequestFromPresence)
}

::google::protobuf::uint8* OperUserFriendRequestFromPresence::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_presence.OperUserFriendRequestFromPresence)
  // required uint64 from_id = 1;
  if (has_from_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->from_id(), target);
  }

  // required uint64 to_id = 2;
  if (has_to_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->to_id(), target);
  }

  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // required string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_presence.OperUserFriendRequestFromPresence)
  return target;
}

int OperUserFriendRequestFromPresence::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 from_id = 1;
    if (has_from_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_id());
    }

    // required uint64 to_id = 2;
    if (has_to_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_id());
    }

    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required string content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperUserFriendRequestFromPresence::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperUserFriendRequestFromPresence* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperUserFriendRequestFromPresence*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperUserFriendRequestFromPresence::MergeFrom(const OperUserFriendRequestFromPresence& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_id()) {
      set_from_id(from.from_id());
    }
    if (from.has_to_id()) {
      set_to_id(from.to_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperUserFriendRequestFromPresence::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperUserFriendRequestFromPresence::CopyFrom(const OperUserFriendRequestFromPresence& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperUserFriendRequestFromPresence::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void OperUserFriendRequestFromPresence::Swap(OperUserFriendRequestFromPresence* other) {
  if (other != this) {
    std::swap(from_id_, other->from_id_);
    std::swap(to_id_, other->to_id_);
    std::swap(type_, other->type_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperUserFriendRequestFromPresence::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperUserFriendRequestFromPresence_descriptor_;
  metadata.reflection = OperUserFriendRequestFromPresence_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageTransferRequest::kFromIdFieldNumber;
const int MessageTransferRequest::kToIdFieldNumber;
const int MessageTransferRequest::kTypeFieldNumber;
const int MessageTransferRequest::kContentFieldNumber;
#endif  // !_MSC_VER

MessageTransferRequest::MessageTransferRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_presence.MessageTransferRequest)
}

void MessageTransferRequest::InitAsDefaultInstance() {
}

MessageTransferRequest::MessageTransferRequest(const MessageTransferRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_presence.MessageTransferRequest)
}

void MessageTransferRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  from_id_ = GOOGLE_ULONGLONG(0);
  to_id_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageTransferRequest::~MessageTransferRequest() {
  // @@protoc_insertion_point(destructor:tt_presence.MessageTransferRequest)
  SharedDtor();
}

void MessageTransferRequest::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void MessageTransferRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageTransferRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageTransferRequest_descriptor_;
}

const MessageTransferRequest& MessageTransferRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_presence_2eproto();
  return *default_instance_;
}

MessageTransferRequest* MessageTransferRequest::default_instance_ = NULL;

MessageTransferRequest* MessageTransferRequest::New() const {
  return new MessageTransferRequest;
}

void MessageTransferRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MessageTransferRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(from_id_, to_id_);
    type_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageTransferRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_presence.MessageTransferRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 from_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_id_)));
          set_has_from_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_to_id;
        break;
      }

      // required uint64 to_id = 2;
      case 2: {
        if (tag == 16) {
         parse_to_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_id_)));
          set_has_to_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required uint32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // required string content = 4;
      case 4: {
        if (tag == 34) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tt_presence.MessageTransferRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_presence.MessageTransferRequest)
  return false;
#undef DO_
}

void MessageTransferRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_presence.MessageTransferRequest)
  // required uint64 from_id = 1;
  if (has_from_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->from_id(), output);
  }

  // required uint64 to_id = 2;
  if (has_to_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->to_id(), output);
  }

  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // required string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_presence.MessageTransferRequest)
}

::google::protobuf::uint8* MessageTransferRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_presence.MessageTransferRequest)
  // required uint64 from_id = 1;
  if (has_from_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->from_id(), target);
  }

  // required uint64 to_id = 2;
  if (has_to_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->to_id(), target);
  }

  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // required string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_presence.MessageTransferRequest)
  return target;
}

int MessageTransferRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 from_id = 1;
    if (has_from_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_id());
    }

    // required uint64 to_id = 2;
    if (has_to_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_id());
    }

    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required string content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageTransferRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageTransferRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageTransferRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageTransferRequest::MergeFrom(const MessageTransferRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_id()) {
      set_from_id(from.from_id());
    }
    if (from.has_to_id()) {
      set_to_id(from.to_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageTransferRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageTransferRequest::CopyFrom(const MessageTransferRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageTransferRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void MessageTransferRequest::Swap(MessageTransferRequest* other) {
  if (other != this) {
    std::swap(from_id_, other->from_id_);
    std::swap(to_id_, other->to_id_);
    std::swap(type_, other->type_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageTransferRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageTransferRequest_descriptor_;
  metadata.reflection = MessageTransferRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageTransferResponse::kOnlineFieldNumber;
#endif  // !_MSC_VER

MessageTransferResponse::MessageTransferResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_presence.MessageTransferResponse)
}

void MessageTransferResponse::InitAsDefaultInstance() {
}

MessageTransferResponse::MessageTransferResponse(const MessageTransferResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_presence.MessageTransferResponse)
}

void MessageTransferResponse::SharedCtor() {
  _cached_size_ = 0;
  online_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageTransferResponse::~MessageTransferResponse() {
  // @@protoc_insertion_point(destructor:tt_presence.MessageTransferResponse)
  SharedDtor();
}

void MessageTransferResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageTransferResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageTransferResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageTransferResponse_descriptor_;
}

const MessageTransferResponse& MessageTransferResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_presence_2eproto();
  return *default_instance_;
}

MessageTransferResponse* MessageTransferResponse::default_instance_ = NULL;

MessageTransferResponse* MessageTransferResponse::New() const {
  return new MessageTransferResponse;
}

void MessageTransferResponse::Clear() {
  online_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageTransferResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_presence.MessageTransferResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool online = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tt_presence.MessageTransferResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_presence.MessageTransferResponse)
  return false;
#undef DO_
}

void MessageTransferResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_presence.MessageTransferResponse)
  // required bool online = 1;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->online(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_presence.MessageTransferResponse)
}

::google::protobuf::uint8* MessageTransferResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_presence.MessageTransferResponse)
  // required bool online = 1;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->online(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_presence.MessageTransferResponse)
  return target;
}

int MessageTransferResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool online = 1;
    if (has_online()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageTransferResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageTransferResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageTransferResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageTransferResponse::MergeFrom(const MessageTransferResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online()) {
      set_online(from.online());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageTransferResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageTransferResponse::CopyFrom(const MessageTransferResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageTransferResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MessageTransferResponse::Swap(MessageTransferResponse* other) {
  if (other != this) {
    std::swap(online_, other->online_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageTransferResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageTransferResponse_descriptor_;
  metadata.reflection = MessageTransferResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KickUserRequest::kUserIdFieldNumber;
const int KickUserRequest::kAccIdentFieldNumber;
const int KickUserRequest::kTtypeFieldNumber;
#endif  // !_MSC_VER

KickUserRequest::KickUserRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tt_presence.KickUserRequest)
}

void KickUserRequest::InitAsDefaultInstance() {
}

KickUserRequest::KickUserRequest(const KickUserRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tt_presence.KickUserRequest)
}

void KickUserRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  acc_ident_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ttype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickUserRequest::~KickUserRequest() {
  // @@protoc_insertion_point(destructor:tt_presence.KickUserRequest)
  SharedDtor();
}

void KickUserRequest::SharedDtor() {
  if (acc_ident_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete acc_ident_;
  }
  if (this != default_instance_) {
  }
}

void KickUserRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickUserRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickUserRequest_descriptor_;
}

const KickUserRequest& KickUserRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_presence_2eproto();
  return *default_instance_;
}

KickUserRequest* KickUserRequest::default_instance_ = NULL;

KickUserRequest* KickUserRequest::New() const {
  return new KickUserRequest;
}

void KickUserRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_acc_ident()) {
      if (acc_ident_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        acc_ident_->clear();
      }
    }
    ttype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KickUserRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tt_presence.KickUserRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_acc_ident;
        break;
      }

      // optional string acc_ident = 2;
      case 2: {
        if (tag == 18) {
         parse_acc_ident:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acc_ident()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->acc_ident().data(), this->acc_ident().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "acc_ident");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ttype;
        break;
      }

      // optional uint32 ttype = 3;
      case 3: {
        if (tag == 24) {
         parse_ttype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ttype_)));
          set_has_ttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tt_presence.KickUserRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tt_presence.KickUserRequest)
  return false;
#undef DO_
}

void KickUserRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tt_presence.KickUserRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional string acc_ident = 2;
  if (has_acc_ident()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->acc_ident().data(), this->acc_ident().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acc_ident");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->acc_ident(), output);
  }

  // optional uint32 ttype = 3;
  if (has_ttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ttype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tt_presence.KickUserRequest)
}

::google::protobuf::uint8* KickUserRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tt_presence.KickUserRequest)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional string acc_ident = 2;
  if (has_acc_ident()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->acc_ident().data(), this->acc_ident().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acc_ident");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->acc_ident(), target);
  }

  // optional uint32 ttype = 3;
  if (has_ttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ttype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tt_presence.KickUserRequest)
  return target;
}

int KickUserRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string acc_ident = 2;
    if (has_acc_ident()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acc_ident());
    }

    // optional uint32 ttype = 3;
    if (has_ttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ttype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickUserRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KickUserRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KickUserRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KickUserRequest::MergeFrom(const KickUserRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_acc_ident()) {
      set_acc_ident(from.acc_ident());
    }
    if (from.has_ttype()) {
      set_ttype(from.ttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KickUserRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickUserRequest::CopyFrom(const KickUserRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickUserRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void KickUserRequest::Swap(KickUserRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(acc_ident_, other->acc_ident_);
    std::swap(ttype_, other->ttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KickUserRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KickUserRequest_descriptor_;
  metadata.reflection = KickUserRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tt_presence

// @@protoc_insertion_point(global_scope)
